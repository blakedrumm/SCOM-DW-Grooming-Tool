#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: dbaaa663-c207-4a12-89c9-a90824da56b1
# Source File: C:\Users\bdrum\Documents\SAPIEN\PowerShell Studio\Projects\SCOM-DW-GroomingGUI\SCOM-DW-GroomingGUI.psproj
#------------------------------------------------------------------------
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2020 v5.7.182
     Generated on:       12/19/2022 11:53 PM
     Generated by:       Blake Drumm
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2020
#>



#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	if (!$((Get-ChildItem HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\Application).PSChildname | Where-Object { $_ -eq "SCOMDWTool" }))
	{
		#New-EventLog -source "SCOMDWTool" -LogName Application
		[System.Diagnostics.EventLog]::CreateEventSource('SCOMDWTool', "Application")
		Write-EventLog -LogName Application -Source 'SCOMDWTool' -EventID 0 -Message 'Created the source for the event log. (SCOMDWTool)' -EntryType Information -ErrorAction SilentlyContinue
	}
	
	
	#--------------------------------------------------------------------------
	$script:LicensePath = "$env:ProgramData\SCOM-DataWarehouseGUI-AgreedToLicense.log"
	if (Test-Path -Path $script:LicensePath)
	{
		if ((Show-MainForm_psf) -eq 'OK')
		{
			
		}
	}
	else
	{
		if ((Show-Disclaimer_Form_psf) -eq 'OK')
		{
			if ($Disclaimer_Form_checkboxIAcceptDoNotShowThis)
			{
				Write-EventLog -LogName Application -Source 'SCOMDWTool' -EventID 0 -Message 'Accepted MIT License' -EntryType Information
				"$env:USERNAME - Agreed on $(Get-Date -Format "MM/dd/yyyy hh:mm:ss tt")" | Out-File -FilePath $script:LicensePath
			}
		}
		else
		{
			break
		}
		Show-MainForm_psf
	}
	
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}


#endregion Source: Startup.pss

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	$DWScriptVersion = '2.0.0.0'
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	try
	{
		[string]$ScriptDirectory = Get-ScriptDirectory
	}
	catch
	{
		[string]$ScriptDirectory = 'Script file is not saved.'
		Write-EventLog -LogName Application -Source "SCOMDWTool" -EventID 4 -Message $ScriptDirectory
	}
	
	#region Job Tracker
	$JobTrackerList = New-Object System.Collections.ArrayList
	function Add-JobTracker
	{
		<#
			.SYNOPSIS
				Add a new job to the JobTracker and starts the timer.
		
			.DESCRIPTION
				Add a new job to the JobTracker and starts the timer.
		
			.PARAMETER  Name
				The name to assign to the job.
		
			.PARAMETER  JobScript
				The script block that the job will be performing.
				Important: Do not access form controls from this script block.
		
			.PARAMETER ArgumentList
				The arguments to pass to the job.
		
			.PARAMETER  CompletedScript
				The script block that will be called when the job is complete.
				The job is passed as an argument. The Job argument is null when the job fails.
		
			.PARAMETER  UpdateScript
				The script block that will be called each time the timer ticks.
				The job is passed as an argument. Use this to get the Job's progress.
		
			.EXAMPLE
				Add-JobTracker -Name 'JobName' `
				-JobScript {	
					Param($Argument1)#Pass any arguments using the ArgumentList parameter
					#Important: Do not access form controls from this script block.
					Get-CIMInstance Win32_Process -Namespace "root\CIMV2"
				}`
				-CompletedScript {
					Param($Job)		
					$results = Receive-Job -Job $Job
				}`
				-UpdateScript {
					Param($Job)
					#$results = Receive-Job -Job $Job -Keep
				}
		
			.LINK
				
		#>
		
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[string]$Name,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[ScriptBlock]$JobScript,
			$ArgumentList = $null,
			[ScriptBlock]$CompletedScript,
			[ScriptBlock]$UpdateScript)
		
		#Start the Job
		$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
		
		if ($null -ne $job)
		{
			#Create a Custom Object to keep track of the Job & Script Blocks
			$members = @{
				'Job'		     = $Job;
				'CompleteScript' = $CompletedScript;
				'UpdateScript'   = $UpdateScript
			}
			
			$psObject = New-Object System.Management.Automation.PSObject -Property $members
			
			[void]$JobTrackerList.Add($psObject)
			
			#Start the Timer
			if (-not $timerJobTracker.Enabled)
			{
				$timerJobTracker.Start()
			}
		}
		elseif ($null -ne $CompletedScript)
		{
			#Failed
			Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
		}
		
	}
	
	function Update-JobTracker
	{
		<#
			.SYNOPSIS
				Checks the status of each job on the list.
		#>
		
		#Poll the jobs for status updates
		$timerJobTracker.Stop() #Freeze the Timer
		
		for ($index = 0; $index -lt $JobTrackerList.Count; $index++)
		{
			$psObject = $JobTrackerList[$index]
			
			if ($null -ne $psObject)
			{
				if ($null -ne $psObject.Job)
				{
					if ($psObject.Job.State -eq 'Blocked')
					{
						#Try to unblock the job
						Receive-Job $psObject.Job | Out-Null
					}
					elseif ($psObject.Job.State -ne 'Running')
					{
						#Call the Complete Script Block
						if ($null -ne $psObject.CompleteScript)
						{
							#$results = Receive-Job -Job $psObject.Job
							Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
						}
						
						$JobTrackerList.RemoveAt($index)
						Remove-Job -Job $psObject.Job
						$index-- #Step back so we don't skip a job
					}
					elseif ($null -ne $psObject.UpdateScript)
					{
						#Call the Update Script Block
						Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
					}
				}
			}
			else
			{
				$JobTrackerList.RemoveAt($index)
				$index-- #Step back so we don't skip a job
			}
		}
		
		if ($JobTrackerList.Count -gt 0)
		{
			$timerJobTracker.Start() #Resume the timer
		}
	}
	
	function Stop-JobTracker
	{
		<#
			.SYNOPSIS
				Stops and removes all Jobs from the list.
		#>
		#Stop the timer
		$timerJobTracker.Stop()
		
		#Remove all the jobs
		while ($JobTrackerList.Count -gt 0)
		{
			$job = $JobTrackerList[0].Job
			$JobTrackerList.RemoveAt(0)
			Stop-Job $job
			Remove-Job $job
		}
	}
	#endregion
		<#
			.SYNOPSIS
				Executes an SQL statement. Executes using Windows Authentication unless the Username and Password are provided.
			
			.DESCRIPTION
				A detailed description of the Invoke-SqlCommand function.
			
			.PARAMETER ServerInstance
				The SQL Server instance name.
			
			.PARAMETER Database
				The SQL Server database name where the query will be executed.
			
			.PARAMETER Timeout
				The connection timeout.
			
			.PARAMETER Connection
				The System.Data.SqlClient.SQLConnection instance used to connect.
			
			.PARAMETER Username
				The SQL Authentication Username.
			
			.PARAMETER Password
				The SQL Authentication Password.
			
			.PARAMETER CommandType
				The System.Data.CommandType value specifying Text or StoredProcedure.
			
			.PARAMETER Query
				The SQL query to execute.
			
			.PARAMETER Path
				The path to an SQL script.
			
			.PARAMETER Parameters
				Hashtable containing the key value pairs used to generate as collection of System.Data.SqlParameter.
			
			.PARAMETER As
				Specifies how to return the result.
				
				PSCustomObject
				- Returns the result set as an array of System.Management.Automation.PSCustomObject objects.
				DataSet
				- Returns the result set as an System.Data.DataSet object.
				DataTable
				- Returns the result set as an System.Data.DataTable object.
				DataRow
				- Returns the result set as an array of System.Data.DataRow objects.
				Scalar
				- Returns the first column of the first row in the result set. Should be used when a value with no column name is returned (i.e. SELECT COUNT(*) FROM Test.Sample).
				NonQuery
				- Returns the number of rows affected. Should be used for INSERT, UPDATE, and DELETE.
			
			.EXAMPLE
				PS C:\> Invoke-SqlCommand -Server "DATASERVER" -Database "Web" -Query "SELECT TOP 1 * FROM Test.Sample"
				
				datetime2         : 1/17/2013 8:46:22 AM
				ID                : 202507
				uniqueidentifier1 : 1d0cf1c0-9fb1-4e21-9d5a-b8e9365400fc
				bool1             : False
				datetime1         : 1/17/2013 12:00:00 AM
				double1           : 1
				varchar1          : varchar11
				decimal1          : 1
				int1              : 1
				
				Returned the first row as a System.Management.Automation.PSCustomObject.
			
			.EXAMPLE
				PS C:\> Invoke-SqlCommand -Server "DATASERVER" -Database "Web" -Query "SELECT COUNT(*) FROM Test.Sample" -As Scalar
				
				9544
			
			.NOTES
				Additional information about the function.
		#>
	function Invoke-SqlCommand
	{
		[CmdletBinding(DefaultParameterSetName = 'Default')]
		param
		(
			[Parameter(Mandatory = $true,
					   Position = 0)]
			[string]$ServerInstance,
			[Parameter(Mandatory = $true,
					   Position = 1)]
			[string]$Database,
			[Parameter(Mandatory = $false,
					   Position = 2)]
			[int]$Timeout = 30,
			[System.Data.SqlClient.SQLConnection]$Connection,
			[System.Data.CommandType]$CommandType = [System.Data.CommandType]::Text,
			[string]$Query,
			[ValidateScript({ Test-Path -Path $_ })]
			[string]$Path,
			[hashtable]$Parameters,
			[ValidateSet('DataSet', 'DataTable', 'DataRow', 'PSCustomObject', 'Scalar', 'NonQuery')]
			[string]$As = "PSCustomObject"
		)
		
		begin
		{
			
			trap
			{
				$ErrorDetails = @"

User:
	$([System.Security.Principal.WindowsIdentity]::GetCurrent().Name)

Error Details:
	$($Error[0])

SQL Query:
	$Query
"@
				Write-EventLog -LogName Application -Source 'SCOMDWTool' -EventID 11 -Message "Encountered exception while attempting to run SQL Query:`n$ErrorDetails" -EntryType Error
				Write-Warning "Encountered exception while running SQL Query: $ErrorDetails"
				
				[void][System.Reflection.Assembly]::LoadWithPartialName("Microsoft.VisualBasic")
				[Microsoft.VisualBasic.Interaction]::MsgBox(@"
Event ID:
11

User:
	$([System.Security.Principal.WindowsIdentity]::GetCurrent().Name)

Error Details:
	$($Error[0])

For more details see the Application Event Log.
"@, "OKOnly,SystemModal,Critical,DefaultButton2", "Encountered exception while attempting to run SQL Query") | Out-Null
			}
			
			if ($Path)
			{
				$Query = [System.IO.File]::ReadAllText("$((Resolve-Path -Path $Path).Path)")
			}
			else
			{
				if (-not $Query)
				{
					throw (New-Object System.ArgumentNullException -ArgumentList "Query", "The query statement is missing.")
				}
			}
			
			$createConnection = (-not $Connection)
			
			if ($createConnection)
			{
				$Connection = New-Object System.Data.SqlClient.SQLConnection
				if ($Username -and $Password)
				{
					$Connection.ConnectionString = "Server=$($ServerInstance);Database=$($Database);User Id=$($Username);Password=$($Password);"
				}
				else
				{
					$Connection.ConnectionString = "Server=$($ServerInstance);Database=$($Database);Integrated Security=SSPI;"
				}
				if ($PSBoundParameters.Verbose)
				{
					$Connection.FireInfoMessageEventOnUserErrors = $true
					$Connection.Add_InfoMessage([System.Data.SqlClient.SqlInfoMessageEventHandler] { Write-Verbose "$($_)" })
				}
			}
			
			if (-not ($Connection.State -like "Open"))
			{
				try { $Connection.Open() }
				catch [Exception] { throw $_ }
			}
		}
		
		process
		{
			$command = New-Object System.Data.SqlClient.SqlCommand ($query, $Connection)
			$command.CommandTimeout = $Timeout
			$command.CommandType = $CommandType
			if ($Parameters)
			{
				foreach ($p in $Parameters.Keys)
				{
					$command.Parameters.AddWithValue($p, $Parameters[$p]) | Out-Null
				}
			}
			
			$scriptBlock = {
				$result = @()
				$reader = $command.ExecuteReader()
				if ($reader)
				{
					$counter = $reader.FieldCount
					$columns = @()
					for ($i = 0; $i -lt $counter; $i++)
					{
						$columns += $reader.GetName($i)
					}
					
					if ($reader.HasRows)
					{
						while ($reader.Read())
						{
							$row = @{ }
							for ($i = 0; $i -lt $counter; $i++)
							{
								$row[$columns[$i]] = $reader.GetValue($i)
							}
							$result += [PSCustomObject]$row
						}
					}
				}
				$result
			}
			
			if ($As)
			{
				switch ($As)
				{
					"Scalar" {
						$scriptBlock = {
							$result = $command.ExecuteScalar()
							$result
						}
					}
					"NonQuery" {
						$scriptBlock = {
							$result = $command.ExecuteNonQuery()
							$result
						}
					}
					default {
						if ("DataSet", "DataTable", "DataRow" -contains $As)
						{
							$scriptBlock = {
								$ds = New-Object System.Data.DataSet
								$da = New-Object System.Data.SqlClient.SqlDataAdapter($command)
								$da.Fill($ds) | Out-Null
								switch ($As)
								{
									"DataSet" { $result = $ds }
									"DataTable" { $result = $ds.Tables }
									default { $result = $ds.Tables | ForEach-Object -Process { $_.Rows } }
								}
								$result
							}
						}
					}
				}
			}
			try
			{
				$result = Invoke-Command -ScriptBlock $ScriptBlock
			}
			catch
			{
				$ErrorDetails = @"

User:
	$([System.Security.Principal.WindowsIdentity]::GetCurrent().Name)

Error Details:
	$($Error[0])

SQL Query:
	$Query
"@
				Write-EventLog -LogName Application -Source 'SCOMDWTool' -EventID 10 -Message "Encountered exception while attempting to run SQL Query:`n$ErrorDetails" -EntryType Error
				Write-Warning "Encountered exception while running SQL Query: $ErrorDetails"
				
				[void][System.Reflection.Assembly]::LoadWithPartialName("Microsoft.VisualBasic")
				[Microsoft.VisualBasic.Interaction]::MsgBox(@"
Event ID:
10

User:
	$([System.Security.Principal.WindowsIdentity]::GetCurrent().Name)

Error Details:
	$($Error[0])

For more details see the Application Event Log.
"@, "OKOnly,SystemModal,Critical,DefaultButton2", "Encountered exception while attempting to run SQL Query") | Out-Null
			}
			$command.Parameters.Clear()
		}
		
		end
		{
			if ($createConnection) { $Connection.Close() }
			
			$result
		}
	}
	
	function Run-SQLQuery_RetentionData
	{
		param
		(
			[Parameter(Mandatory = $true,
					   Position = 0)]
			[string]$ServerInstance,
			[Parameter(Mandatory = $true,
					   Position = 1)]
			[string]$Database
		)
		
		Invoke-SqlCommand -Query @"
  DECLARE
     @DatasetId uniqueidentifier
    ,@AggregationTypeId int
    ,@ServerName sysname
    ,@DatabaseName sysname
    ,@SchemaName sysname
    ,@DatasetName nvarchar(256)
    ,@DatasetDescription nvarchar(max)
    ,@AggregationTypeName nvarchar(50)
    ,@MaxDataAgeDays int
    ,@DataFileGroupName sysname
    ,@IndexFileGroupName sysname
    ,@StandardDatasetTableMapRowId int
    ,@TableGuid uniqueidentifier
    ,@TableNameSuffix varchar(100)
    ,@StartDateTime datetime
    ,@EndDateTime datetime
    ,@StandardDatasetAggregationStorageRowId int
    ,@DependentTableInd tinyint
    ,@BaseTableName nvarchar(90)
    ,@TableName nvarchar(max)
    ,@RowCount bigint
    ,@SizeKb bigint
    ,@RowCountForDailyAvg bigint
    ,@SizeKbForDailyAvg bigint
    ,@MinStartDateTime datetime
    ,@MaxEndDateTime datetime
    ,@TotalHours bigint
    ,@TableCreatedDateTime datetime
    ,@DomainTableRowId int
     
  DECLARE @TableSize TABLE (
       TableName      sysname         NOT NULL
      ,[RowCount]     bigint          NOT NULL
      ,Reserved       varchar(30)     NOT NULL 
      ,Data           varchar(30)     NOT NULL
      ,IndexSize      varchar(30)     NOT NULL 
      ,Unused         varchar(30)     NOT NULL
  )

  DECLARE @Result TABLE (
       DatasetId            uniqueidentifier NOT NULL
      ,ServerName           sysname       NOT NULL
      ,DatabaseName         sysname       NOT NULL
      ,DatasetName          nvarchar(256) NOT NULL
      ,AggregationTypeId    int           NOT NULL
      ,AggregationTypeName  nvarchar(50)  NOT NULL
      ,MaxDataAgeDays       int           NOT NULL
      ,[RowCount]           bigint        NULL
      ,MinStartDateTime     datetime      NULL
      ,SizeKb               bigint        NOT NULL
      ,DailySizeKb          float         NULL
      ,DailyRowCount        bigint        NULL
      ,TotalSizeKb          float         NULL
      ,TotalRowCount        bigint        NULL
      ,DataFileGroupName    sysname       NOT NULL
      ,IndexFileGroupName   sysname       NOT NULL
  )

  SET @DatasetId = '00000000-0000-0000-0000-000000000000'
  
  WHILE EXISTS (SELECT *
                FROM vDataset d
                      JOIN StandardDataset sd ON (d.DatasetId = sd.DatasetId)
                      JOIN vMemberDatabase mdb ON (d.MemberDatabaseRowId = mdb.MemberDatabaseRowId)
                WHERE (d.DatasetId > @DatasetId)
                  AND (d.InstallCompletedInd = 1)
               )
  BEGIN
    SELECT TOP 1
       @DatasetId = d.DatasetId
      ,@SchemaName = sd.SchemaName
      ,@DatasetName = d.DatasetDefaultName
      ,@DatasetDescription = d.DatasetDefaultDescription
      ,@ServerName = mdb.ServerName
      ,@DatabaseName = mdb.DatabaseName
    FROM vDataset d
            JOIN StandardDataset sd ON (d.DatasetId = sd.DatasetId)
            JOIN vMemberDatabase mdb ON (d.MemberDatabaseRowId = mdb.MemberDatabaseRowId)
    WHERE (d.DatasetId > @DatasetId)
      AND (d.InstallCompletedInd = 1)
    ORDER BY d.DatasetId

    SET @AggregationTypeId = -1
    
    WHILE EXISTS (SELECT *
                  FROM StandardDatasetAggregation
                  WHERE (DatasetId = @DatasetId)
                    AND (AggregationTypeId > @AggregationTypeId)
                 )
    BEGIN
      SELECT TOP 1
         @AggregationTypeId = a.AggregationTypeId
        ,@AggregationTypeName = at.AggregationTypeDefaultName
        ,@MaxDataAgeDays = a.MaxDataAgeDays
        ,@DataFileGroupName = a.DataFileGroupName
        ,@IndexFileGroupName = a.IndexFileGroupName
      FROM StandardDatasetAggregation a
              JOIN vAggregationType at ON (a.AggregationTypeId = at.AggregationTypeId)
      WHERE (a.DatasetId = @DatasetId)
        AND (a.AggregationTypeId > @AggregationTypeId)
      ORDER BY a.AggregationTypeId
      
      SET @RowCount = 0
      SET @SizeKb = 0
      SET @TotalHours = 0
      SET @MinStartDateTime = NULL
      SET @RowCountForDailyAvg = 0
      SET @SizeKbForDailyAvg = 0
      
      SET @StandardDatasetTableMapRowId = 0
      
      WHILE EXISTS (SELECT *
                    FROM StandardDatasetTableMap
                    WHERE (DatasetId = @DatasetId)
                      AND (AggregationTypeId = @AggregationTypeId)
                      AND (StandardDatasetTableMapRowId > @StandardDatasetTableMapRowId)
                   )
      BEGIN
        SELECT TOP 1
           @StandardDatasetTableMapRowId = StandardDatasetTableMapRowId
          ,@TableGuid = TableGuid
          ,@TableNameSuffix = TableNameSuffix
          ,@StartDateTime = StartDateTime
          ,@EndDateTime = EndDateTime
        FROM StandardDatasetTableMap
        WHERE (DatasetId = @DatasetId)
          AND (AggregationTypeId = @AggregationTypeId)
          AND (StandardDatasetTableMapRowId > @StandardDatasetTableMapRowId)
        ORDER BY StandardDatasetTableMapRowId
        
        SET @StandardDatasetAggregationStorageRowId = 0
        
        WHILE EXISTS (SELECT *
                      FROM StandardDatasetAggregationStorage
                      WHERE (DatasetId = @DatasetId)
                        AND (AggregationTypeId = @AggregationTypeId)
                        AND (StandardDatasetAggregationStorageRowId > @StandardDatasetAggregationStorageRowId)
                     )
        BEGIN
          SELECT TOP 1
             @StandardDatasetAggregationStorageRowId = StandardDatasetAggregationStorageRowId
            ,@DependentTableInd = DependentTableInd
            ,@BaseTableName = BaseTableName
          FROM StandardDatasetAggregationStorage
          WHERE (DatasetId = @DatasetId)
            AND (AggregationTypeId = @AggregationTypeId)
            AND (StandardDatasetAggregationStorageRowId > @StandardDatasetAggregationStorageRowId)
          ORDER BY StandardDatasetAggregationStorageRowId
          
          SELECT @TableCreatedDateTime = create_date
          FROM sys.objects o
                JOIN sys.schemas s ON (o.schema_id = s.schema_id)
          WHERE (s.name = @SchemaName)
            AND (o.name = @BaseTableName + '_' + @TableNameSuffix)
          
          IF (@StartDateTime < @TableCreatedDateTime)
            SET @StartDateTime = @TableCreatedDateTime
            
          IF (@EndDateTime > GETUTCDATE())
            SET @EndDateTime = GETUTCDATE()
          
          SET @TableName = QUOTENAME(@SchemaName) + '.' + QUOTENAME(@BaseTableName + '_' + @TableNameSuffix)
          
          DELETE @TableSize
          
          INSERT @TableSize (TableName, [RowCount], Reserved, Data, IndexSize, Unused)
          EXEC sp_spaceused @TableName
          
          SELECT 
             @RowCount = @RowCount + CASE WHEN @DependentTableInd = 0 THEN [RowCount] ELSE 0 END
            ,@SizeKb = @SizeKb + CAST(REPLACE(REPLACE(Reserved, 'KB', ''), ' ', '') as bigint)
          FROM @TableSize
          
          IF (@StartDateTime IS NOT NULL) AND (@EndDateTime IS NOT NULL)
          BEGIN
            SET @TotalHours = @TotalHours + ABS(DATEDIFF(hour, @StartDateTime, @EndDateTime))
            
            SELECT 
               @RowCountForDailyAvg = @RowCountForDailyAvg + CASE WHEN @DependentTableInd = 0 THEN [RowCount] ELSE 0 END
              ,@SizeKbForDailyAvg = @SizeKbForDailyAvg + CAST(REPLACE(REPLACE(Reserved, 'KB', ''), ' ', '') as bigint)
            FROM @TableSize
            
            SET @MinStartDateTime = 
                  CASE
                    WHEN @MinStartDateTime IS NULL THEN @StartDateTime
                    WHEN @StartDateTime < @MinStartDateTime THEN @StartDateTime
                    ELSE @MinStartDateTime
                  END

            SET @MaxEndDateTime = 
                  CASE
                    WHEN @MaxEndDateTime IS NULL THEN @EndDateTime
                    WHEN @EndDateTime > @MaxEndDateTime THEN @EndDateTime
                    ELSE @MaxEndDateTime
                  END
          END
        END 
      END 
      
      SET @TotalHours = ABS(DATEDIFF(hour, @MinStartDateTime, @MaxEndDateTime))
      
      INSERT @Result (
         DatasetId
        ,ServerName
        ,DatabaseName
        ,DatasetName
        ,AggregationTypeId
        ,AggregationTypeName
        ,MaxDataAgeDays
        ,[RowCount]
        ,MinStartDateTime
        ,SizeKb
        ,DailyRowCount
        ,DailySizeKb
        ,DataFileGroupName
        ,IndexFileGroupName
      )
      SELECT 
         @DatasetId
        ,@ServerName
        ,@DatabaseName
        ,@DatasetName
        ,@AggregationTypeId
        ,@AggregationTypeName
        ,@MaxDataAgeDays
        ,@RowCount
        ,@MinStartDateTime
        ,@SizeKb
        ,ROUND(CASE WHEN @TotalHours > 0 THEN @RowCountForDailyAvg / CAST(@TotalHours AS float) * 24.0 ELSE NULL END, 0)
        ,CASE WHEN @TotalHours > 0 THEN @SizeKbForDailyAvg / CAST(@TotalHours AS float) * 24.0 ELSE NULL END
        ,ISNULL(@DataFileGroupName, 'default')
        ,ISNULL(@IndexFileGroupName, 'default')
    END 
  END 
  
  IF EXISTS (SELECT * FROM sys.objects WHERE name = 'MaintenanceSetting')
  BEGIN
    DELETE @TableSize

    SET @DomainTableRowId = 0
    
    WHILE EXISTS (SELECT *
                  FROM DomainTable
                  WHERE (DomainTableRowId > @DomainTableRowId)
                 )
    BEGIN
      SELECT TOP 1
         @DomainTableRowId = DomainTableRowId
        ,@TableName = QUOTENAME(SchemaName) + '.' + QUOTENAME(TableName)
      FROM DomainTable
      WHERE (DomainTableRowId > @DomainTableRowId)
      ORDER BY DomainTableRowId

      INSERT @TableSize (TableName, [RowCount], Reserved, Data, IndexSize, Unused)
      EXEC sp_spaceused @TableName
    END

    INSERT @Result (
       DatasetId
      ,ServerName
      ,DatabaseName
      ,DatasetName
      ,AggregationTypeId
      ,AggregationTypeName
      ,MaxDataAgeDays
      ,SizeKb
      ,DataFileGroupName
      ,IndexFileGroupName
    )
    SELECT
       '00000000-0000-0000-0000-000000000000' DatasetId
      ,ServerName
      ,DatabaseName
      ,'Configuration data set' DatasetName
      ,at.AggregationTypeId
      ,at.AggregationTypeDefaultName
      ,CASE
          WHEN ms.InstanceMaxAgeDays > ms.ManagementPackMaxAgeDays THEN ms.ManagementPackMaxAgeDays
          ELSE ms.InstanceMaxAgeDays
       END 'MaxDataAgeDays'
      ,ISNULL((SELECT SUM(CAST(REPLACE(REPLACE(Reserved, 'KB', ''), ' ', '') as bigint)) FROM @TableSize), 0)
      ,'default'
      ,'default'
    FROM vMemberDatabase mdb
          CROSS JOIN vAggregationType at
          CROSS JOIN MaintenanceSetting ms
    WHERE (mdb.MasterDatabaseInd = 1)
      AND (at.AggregationTypeId = 0)
  END
  
  UPDATE @Result
  SET TotalSizeKb = DailySizeKb * MaxDataAgeDays
     ,TotalRowCount = DailyRowCount * MaxDataAgeDays

  SELECT
    result.DatasetName
    ,result.AggregationTypeName
	,CASE
		WHEN sda.AggregationTypeId IS NULL THEN '0'
		ELSE sda.AggregationTypeId
	END AggregationTypeId
	--,sda.AggregationTypeId
    ,result.MaxDataAgeDays as 'MaxDataAgeDays'
	,GroomingIntervalMinutes
    ,SizeGB = ROUND((CAST(result.SizeKb AS float) / 1000000.00),3)
    ,PercentOfDW = CAST(result.SizeKb AS float) / (SELECT SUM(SizeKb) FROM @Result) * 100
	,CASE
		WHEN sda.GroomStoredProcedureName IS NULL THEN 'NoGroomingAvailable'
		ELSE sda.GroomStoredProcedureName
	END GroomStoredProcedureName
    ,CASE
		WHEN sda.DatasetId IS NULL THEN '00000000-0000-0000-0000-000000000000'
		ELSE sda.DatasetId
	END DatasetId
  FROM @Result result
  left outer JOIN
  StandardDatasetAggregation sda ON (sda.DatasetId = result.DatasetId) and sda.AggregationTypeId = result.AggregationTypeId
  ORDER BY SizeGB DESC
"@ -Database $Database -ServerInstance $ServerInstance -As PSCustomObject
	}
	$RunSQLQuery_RetentionDataFunction = "function Invoke-SQLCommand { ${function:Invoke-SQLCommand} }; function Run-SQLQuery_RetentionData { ${function:Run-SQLQuery_RetentionData} }"
	
	function Run-SQLQuery_ActualRetentionDays
	{
		param
		(
			[Parameter(Mandatory = $true,
					   Position = 0)]
			[string]$ServerInstance,
			[Parameter(Mandatory = $true,
					   Position = 1)]
			[string]$Database
		)
		Invoke-SqlCommand -Query @"
select 'Alert' AS Type, datediff(d,min(DWCreatedDateTime),max(DWCreatedDateTime)) AS DaysOfData, min(DWLastModifiedDateTime) as MinDate, max(DWLastModifiedDateTime) as MaxDate from Alert.vAlert
UNION ALL
select 'Event' AS Type, datediff(d,min(datetime),max(datetime)) AS DaysOfData, min(datetime) as MinDate, max(datetime) as MaxDate from Event.vEvent
UNION ALL
select 'Performance Raw' AS Type, datediff(d,min(datetime),max(datetime)) AS DaysOfData, min(datetime) as MinDate, max(datetime) as MaxDate from Perf.vPerfRaw
UNION ALL
select 'Performance Hourly' AS Type, datediff(d,min(datetime),max(datetime)) AS DaysOfData, min(datetime) as MinDate, max(datetime) as MaxDate from Perf.vPerfHourly
UNION ALL
select 'Performance Daily' AS Type, datediff(d,min(datetime),max(datetime)) AS DaysOfData, min(datetime) as MinDate, max(datetime) as MaxDate from Perf.vPerfDaily
UNION ALL
select 'State Raw' AS Type, datediff(d,min(datetime),max(datetime)) AS DaysOfData, min(datetime) as MinDate, max(datetime) as MaxDate from State.vStateRaw
UNION ALL
select 'State Hourly' AS Type, datediff(d,min(datetime),max(datetime)) AS DaysOfData, min(datetime) as MinDate, max(datetime) as MaxDate from State.vStateHourly
UNION ALL
select 'State Daily' AS Type, datediff(d,min(datetime),max(datetime)) AS DaysOfData, min(datetime) as MinDate, max(datetime) as MaxDate from State.vStateDaily
ORDER BY DaysOfData DESC
"@ -Database $Database -ServerInstance $ServerInstance -As PSCustomObject
	}
	$RunSQLQuery_ActualRetentionDaysFunction = "function Invoke-SQLCommand { ${function:Invoke-SQLCommand} }; function Run-SQLQuery_ActualRetentionDays { ${function:Run-SQLQuery_ActualRetentionDays} }"
	
	function Run-SQLQuery_GroomingHistory
	{
		param
		(
			[Parameter(Mandatory = $true,
					   Position = 0)]
			[string]$ServerInstance,
			[Parameter(Mandatory = $true,
					   Position = 1)]
			[string]$Database
		)
		
		Invoke-SqlCommand -Query @"
WITH AggregationInfo_DurationIsNotNull AS
  (SELECT AggregationType = CASE
                                WHEN AggregationTypeId = 0 THEN 'Raw'
                                WHEN AggregationTypeId = 20 THEN 'Hourly'
                                WHEN AggregationTypeId = 30 THEN 'Daily'
                                ELSE NULL
                            END,
                            AggregationTypeId,
                            MIN(AggregationDateTime) AS 'TimeUTC_NextToAggregate',
                            SUM(CAST (DirtyInd AS Int)) AS 'Count_OutstandingAggregations',
                            DatasetId
   FROM StandardDatasetAggregationHistory WITH(NOLOCK)
   WHERE LastAggregationDurationSeconds IS NOT NULL
   GROUP BY DatasetId,
            AggregationTypeId),
     AggregationInfo_DurationIsNull AS
  (SELECT AggregationType = CASE
                                WHEN AggregationTypeId = 0 THEN 'Raw'
                                WHEN AggregationTypeId = 20 THEN 'Hourly'
                                WHEN AggregationTypeId = 30 THEN 'Daily'
                                ELSE NULL
                            END ,
                            AggregationTypeId ,
                            MIN(AggregationDateTime) AS 'TimeUTC_NextToAggregate' ,
                            COUNT(AggregationDateTime) AS 'Count_Aggregations' ,
                            DatasetId
   FROM StandardDatasetAggregationHistory WITH(NOLOCK)
   WHERE LastAggregationDurationSeconds IS NULL
   GROUP BY DatasetId,
            AggregationTypeId)
SELECT DS.DatasetDefaultName,
       AINN.AggregationType,
       AINN.TimeUTC_NextToAggregate,
       Count_OutstandingAggregations,
       Count_Aggregations,
       SDA.MaxDataAgeDays,
       SDA.LastGroomingDateTime,
       SDS.DebugLevel,
       AINN.DataSetId
FROM StandardDataSet AS SDS WITH(NOLOCK)
JOIN AggregationInfo_DurationIsNotNull AS AINN WITH(NOLOCK) ON SDS.DatasetId = AINN.DatasetId
INNER JOIN AggregationInfo_DurationIsNull AS AIIN WITH(NOLOCK) ON SDS.DatasetId = AIIN.DatasetId
JOIN dbo.StandardDatasetAggregation AS SDA WITH(NOLOCK) ON SDA.DatasetId = SDS.DatasetId
JOIN Dataset AS DS ON SDS.DatasetId = DS.DatasetId
AND SDA.AggregationTypeID = AINN.AggregationTypeID
ORDER BY SchemaName DESC,
         AggregationType ASC,
         LastGroomingDateTime DESC
"@ -Database $Database -ServerInstance $ServerInstance -As PSCustomObject
	}
	$RunSQLQuery_GroomingHistoryFunction = "function Invoke-SQLCommand { ${function:Invoke-SQLCommand} }; function Run-SQLQuery_GroomingHistory { ${function:Run-SQLQuery_GroomingHistory} }"
	
	function Run-SQLQuery_GroomingStaging
	{
		param
		(
			[Parameter(Mandatory = $true,
					   Position = 0)]
			[string]$ServerInstance,
			[Parameter(Mandatory = $true,
					   Position = 1)]
			[string]$Database
		)
		
		Invoke-SqlCommand -Query @"
SELECT 'ManagedEntityStage' AS 'TableName',count(*) AS 'Count' FROM ManagedEntityStage WITH (NOLOCK)
UNION ALL
SELECT 'HealthServiceOutageStage' AS 'TableName',count(*) AS 'Count' FROM HealthServiceOutageStage WITH (NOLOCK)
UNION ALL
SELECT 'MaintenanceModeStage' AS 'TableName',count(*) AS 'Count' FROM MaintenanceModeStage WITH (NOLOCK)
UNION ALL
SELECT 'RelationshipStage' AS 'TableName',count(*) AS 'Count' FROM RelationshipStage WITH (NOLOCK)
UNION ALL
SELECT 'TypedManagedEntityStage' AS 'TableName',count(*) AS 'Count' FROM TypedManagedEntityStage WITH (NOLOCK)
UNION ALL
SELECT 'Alert.AlertStage' AS 'TableName',count(*) AS 'Count' FROM Alert.AlertStage WITH (NOLOCK)
UNION ALL
SELECT 'Alert.AlertStage2Process' AS 'TableName',count(*) AS 'Count' FROM Alert.AlertStage2Process WITH (NOLOCK)
UNION ALL
SELECT 'Event.EventStage' AS 'TableName',count(*) AS 'Count' FROM Event.EventStage WITH (NOLOCK)
UNION ALL
SELECT 'Perf.PerformanceStage' AS 'TableName',count(*) AS 'Count' FROM Perf.PerformanceStage WITH (NOLOCK)
UNION ALL
SELECT 'State.StateStage' AS 'TableName',count(*) AS 'Count' FROM State.StateStage WITH (NOLOCK)
UNION ALL
SELECT 'AemManagedEntityStage' AS 'TableName',count(*) AS 'Count' FROM AemManagedEntityStage WITH (NOLOCK)
ORDER BY TableName ASC
"@ -Database $Database -ServerInstance $ServerInstance -As PSCustomObject
	}
	$RunSQLQuery_GroomingStagingFunction = "function Invoke-SQLCommand { ${function:Invoke-SQLCommand} }; function Run-SQLQuery_GroomingStaging { ${function:Run-SQLQuery_GroomingStaging} }"
	
	
	function Run-SQLQuery_GroomingHistoryFull
	{
		param
		(
			[Parameter(Mandatory = $true,
					   Position = 0)]
			[string]$ServerInstance,
			[Parameter(Mandatory = $true,
					   Position = 1)]
			[string]$Database
		)
		
		Invoke-SqlCommand -Query @"
SELECT ds.DatasetDefaultName AS 'Dataset Name',
       sdah.AggregationDateTime AS 'Aggregation Date/Time',
       atype.AggregationTypeDefaultName AS 'Aggregation Type',
       sdah.AggregationCount AS 'Count Aggregations',
       sdah.DirtyInd AS 'Outstanding Aggregation Count',
       sdah.FirstAggregationStartDateTime AS 'Aggregation Start Time',
       sdah.FirstAggregationDurationSeconds AS 'Aggregation Duration Seconds',
       sdah.LastAggregationStartDateTime AS 'Last Aggregation Start Time',
       sdah.LastAggregationDurationSeconds AS 'Last Aggregation Duration Seconds',
       sdah.DataLastReceivedDateTime AS 'Data Last Received Date/Time'
FROM StandardDatasetAggregationHistory sdah WITH(NOLOCK)
JOIN Dataset ds WITH (NOLOCK) ON sdah.DatasetId = ds.DatasetId
JOIN AggregationType atype WITH (NOLOCK) ON sdah.AggregationTypeId = atype.AggregationTypeId
ORDER BY sdah.AggregationDateTime DESC
"@ -Database $Database -ServerInstance $ServerInstance -As PSCustomObject
	}
	$RunSQLQuery_GroomingHistoryFullFunction = "function Invoke-SQLCommand { ${function:Invoke-SQLCommand} }; function Run-SQLQuery_GroomingHistoryFull { ${function:Run-SQLQuery_GroomingHistoryFull} }"
	
	function Run-SQLQuery_ManualGrooming
	{
		param
		(
			[Parameter(Mandatory = $true,
					   Position = 0)]
			[string]$ServerInstance,
			[Parameter(Mandatory = $true,
					   Position = 1)]
			[string]$Database,
			[Parameter(Mandatory = $true,
					   Position = 2)]
			[string]$DatasetId
		)
		# Not currently using this
		$query = @"
/****** Object:  StoredProcedure [dbo].[StandardDatasetGroom]    Script Date: 6/29/2022 9:13:14 PM ******/
BEGIN
  SET NOCOUNT ON

  DECLARE 
     @ErrorInd        bit
    ,@ErrorMessage    nvarchar(max)
    ,@ErrorNumber     int
    ,@ErrorSeverity   int
    ,@ErrorState      int
    ,@ErrorLine       int
    ,@ErrorProcedure  nvarchar(256)
    ,@ErrorMessageText nvarchar(max)

  SET @ErrorInd = 0

  DECLARE
	@DatasetId uniqueidentifier
    ,@DebugLevel tinyint
    ,@DebugMessage nvarchar(max)
    ,@OperationDurationMs bigint
    ,@TableBaseName sysname
    ,@TableNameSuffix varchar(50)
    ,@AggregationTypeSuffix varchar(50)
    ,@BaseTableName sysname
    ,@TableName sysname
    ,@Statement nvarchar(max)
    ,@CurrentAggregationTypeId int
    ,@LockResourceName sysname
    ,@ExecResult int
    ,@LastGroomingDateTime smalldatetime
    ,@MaxRowsToGroom int
    ,@RawInsertTableCount int
    ,@InsertTableCount int
    ,@CutoffDateTime datetime
    ,@StorageRowId int
    ,@MapRowId int
    ,@TableGuid uniqueidentifier
    ,@GroomingStartedDateTime datetime
    ,@RowsDeleted int
    ,@SchemaName sysname

  BEGIN TRY
    BEGIN TRAN
    SET @DatasetId = '$DatasetId'
    -- set lock to make sure only one process
    -- performs grooming on this data set
    SET @LockResourceName = CAST(@DatasetId AS varchar(50)) + '_Groom'
  
    EXEC @ExecResult = sp_getapplock
           @Resource = @LockResourceName
          ,@LockMode = 'Exclusive'
          ,@LockOwner = 'Transaction'
          ,@LockTimeout = 0

    IF (@ExecResult < -1)
    BEGIN
      RAISERROR(777971001, 16, 1, 'StandardDatasetGroom', @ExecResult)
    END
    
    IF (@ExecResult = -1)
    BEGIN
      COMMIT
      RETURN
    END

    SELECT
       @DebugLevel = DebugLevel
      ,@RawInsertTableCount = RawInsertTableCount
      ,@SchemaName = SchemaName
    FROM StandardDataset
    WHERE DatasetId = @DatasetId

    SET @CurrentAggregationTypeId = -1
      
    SELECT TOP 1
       @CurrentAggregationTypeId = AggregationTypeId
      ,@MaxRowsToGroom = MaxRowsToGroom
      ,@CutoffDateTime = DATEADD(minute, ISNULL(AggregationIntervalDurationMinutes, 0), 
                              DATEADD(day, -MaxDataAgeDays, GETUTCDATE()))
    FROM StandardDatasetAggregation
    WHERE (DatasetId = @DatasetId)
      AND (AggregationTypeId > @CurrentAggregationTypeId)
    ORDER BY AggregationTypeId
  
    IF (@CurrentAggregationTypeId <> -1)
    BEGIN
      -- no-raw aggregations may only have 1 insert table
      SELECT @InsertTableCount = 
         CASE
           WHEN @CurrentAggregationTypeId > 0 THEN 1
           ELSE @RawInsertTableCount
         END
      
      SET @LastGroomingDateTime = GETUTCDATE()

      IF (@InsertTableCount = (SELECT COUNT(*)
                               FROM StandardDatasetTableMap
                               WHERE (DatasetId = @DatasetId)
                               AND (AggregationTypeId = @CurrentAggregationTypeId))
         )
      BEGIN
        -- this aggregation only has insert tables - groom each of them
        SET @MapRowId = -1
        
        SELECT @Statement = GroomStoredProcedureName
        FROM StandardDatasetAggregation
        WHERE (DatasetId = @DatasetId)
          AND (AggregationTypeId = @CurrentAggregationTypeId)
        
        WHILE (EXISTS (SELECT *
                       FROM StandardDatasetTableMap
                       WHERE (DatasetId = @DatasetId)
                         AND (AggregationTypeId = @CurrentAggregationTypeId)
                         AND (InsertInd = 1)
                         AND (StandardDatasetTableMapRowId > @MapRowId))
              )
        BEGIN
          SELECT TOP 1
             @MapRowId = StandardDatasetTableMapRowId
            ,@TableGuid = TableGuid
            ,@TableNameSuffix = TableNameSuffix
          FROM StandardDatasetTableMap
          WHERE (DatasetId = @DatasetId)
            AND (AggregationTypeId = @CurrentAggregationTypeId)
            AND (InsertInd = 1)
            AND (StandardDatasetTableMapRowId > @MapRowId)
          ORDER BY StandardDatasetTableMapRowId
          
          IF (@DebugLevel > 2)
          BEGIN
            SET @DebugMessage = 'Starting grooming of tables with suffix  ' + @TableNameSuffix + ' aggregation type ' + CAST(@CurrentAggregationTypeId AS varchar(10)) + '. Method: delete rows'
            SET @GroomingStartedDateTime = GETUTCDATE()
            
            EXEC DebugMessageInsert
               @DatasetId = @DatasetId
              ,@MessageLevel = 3
              ,@MessageText = @DebugMessage
          END

          EXECUTE @Statement
             @DatasetId = @DatasetId
            ,@AggregationTypeId = @CurrentAggregationTypeId
            ,@TableGuid = @TableGuid
            ,@CutoffDateTime = @CutoffDateTime
            ,@MaxRowsToGroom = @MaxRowsToGroom
            ,@RowsDeleted = @RowsDeleted OUTPUT

          IF (@DebugLevel > 2)
          BEGIN
            SET @DebugMessage = 'Finished grooming of tables with suffix  ' + @TableNameSuffix + ' aggregation type ' + CAST(@CurrentAggregationTypeId AS varchar(10))
            SET @OperationDurationMs = ABS(DATEDIFF(ms, GETUTCDATE(), @GroomingStartedDateTime))
            
            EXEC DebugMessageInsert
               @DatasetId = @DatasetId
              ,@MessageLevel = 3
              ,@MessageText = @DebugMessage
              ,@OperationDurationMs = @OperationDurationMs
          END
        END
      END
      ELSE
      BEGIN

        -- Groom the PerformanceRuleInstance table because as per config of each Dataset,
        -- we have only 1 RawInsertTableCount configured and this will cause the grooming
        -- stored procedure that grooms PerformanceRuleInstance as well to not get executed.
        -- That is correct, but we need to manually groom it here then.
        DECLARE @MaxDataAgeDays int
        SELECT @MaxDataAgeDays = MAX(MaxDataAgeDays)
        FROM StandardDatasetAggregation
        WHERE (DatasetId = @DatasetId)
        
        DELETE pri
        FROM PerformanceRuleInstance pri
        WHERE LastReceivedDateTime < DATEADD(day, -@MaxDataAgeDays, GETUTCDATE())

        -- run through optimized non-insert tables only
        WHILE EXISTS (SELECT *
                      FROM StandardDatasetTableMap
                      WHERE (DatasetId = @DatasetId)
                        AND (AggregationTypeId = @CurrentAggregationTypeId)
                        AND (OptimizedInd = 1)
                        AND (InsertInd = 0)
                        AND (EndDateTime < @CutoffDateTime))
        BEGIN
          SELECT TOP 1 @TableNameSuffix = TableNameSuffix
          FROM StandardDatasetTableMap
          WHERE (DatasetId = @DatasetId)
            AND (AggregationTypeId = @CurrentAggregationTypeId)
            AND (OptimizedInd = 1)
            AND (InsertInd = 0)
            AND (EndDateTime < @CutoffDateTime)
          ORDER BY StandardDatasetTableMapRowId
          
          IF (@DebugLevel > 2)
          BEGIN
            SET @DebugMessage = 'Starting grooming of tables with suffix  ' + @TableNameSuffix + '. Method: drop table'
            SET @GroomingStartedDateTime = GETUTCDATE()
            
            EXEC DebugMessageInsert
               @DatasetId = @DatasetId
              ,@MessageLevel = 3
              ,@MessageText = @DebugMessage
          END

          -- drop all dependent tables if any first
          SET @StorageRowId = -1
          
          WHILE EXISTS (SELECT *
                        FROM StandardDatasetAggregationStorage
                        WHERE (DatasetId = @DatasetId)
                          AND (AggregationTypeId = @CurrentAggregationTypeId)
                          AND (DependentTableInd = 1)
                          AND (StandardDatasetAggregationStorageRowId > @StorageRowId)
                       )
          BEGIN
            SELECT TOP 1
               @BaseTableName = BaseTableName
              ,@StorageRowId = StandardDatasetAggregationStorageRowId
            FROM StandardDatasetAggregationStorage
            WHERE (DatasetId = @DatasetId)
              AND (AggregationTypeId = @CurrentAggregationTypeId)
              AND (StandardDatasetAggregationStorageRowId > @StorageRowId)
              AND (DependentTableInd = 1)
            ORDER BY StandardDatasetAggregationStorageRowId
            
            SET @Statement = 'DROP TABLE ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@BaseTableName + '_' + @TableNameSuffix)
            EXECUTE (@Statement)
          END
          
          -- drop main table
          SELECT @BaseTableName = BaseTableName
          FROM StandardDatasetAggregationStorage
          WHERE (DatasetId = @DatasetId)
            AND (AggregationTypeId = @CurrentAggregationTypeId)
            AND (DependentTableInd = 0)

          SET @Statement = 'DROP TABLE ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@BaseTableName + '_' + @TableNameSuffix)
          EXECUTE (@Statement)

          -- delete table map record          
          DELETE StandardDatasetTableMap
          WHERE (DatasetId = @DatasetId)
            AND (AggregationTypeId = @CurrentAggregationTypeId)
            AND (TableNameSuffix = @TableNameSuffix)
          
          IF (@DebugLevel > 2)
          BEGIN
            SET @DebugMessage = 'Finished grooming of tables with suffix  ' + @TableNameSuffix
            SET @OperationDurationMs = ABS(DATEDIFF(ms, GETUTCDATE(), @GroomingStartedDateTime))
            
            EXEC DebugMessageInsert
               @DatasetId = @DatasetId
              ,@MessageLevel = 3
              ,@MessageText = @DebugMessage
              ,@OperationDurationMs = @OperationDurationMs
          END
        END
      END
      
      UPDATE StandardDatasetAggregation
      SET LastGroomingDateTime = @LastGroomingDateTime
      WHERE (DatasetId = @DatasetId)
        AND (AggregationTypeId = @CurrentAggregationTypeId)
        
      EXEC StandardDatasetBuildCoverView
             @DatasetId = @DatasetId
            ,@AggregationTypeId = @CurrentAggregationTypeId
    END
    
    COMMIT
  END TRY
  BEGIN CATCH
    IF (@@TRANCOUNT > 0)
      ROLLBACK TRAN
  
    SELECT 
       @ErrorNumber = ERROR_NUMBER()
      ,@ErrorSeverity = ERROR_SEVERITY()
      ,@ErrorState = ERROR_STATE()
      ,@ErrorLine = ERROR_LINE()
      ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-')
      ,@ErrorMessageText = ERROR_MESSAGE()

    SET @ErrorInd = 1
  END CATCH

  -- report error if any
  IF (@ErrorInd = 1)
  BEGIN
    IF (@DebugLevel > 0)
    BEGIN
      DECLARE @DebugMessageText nvarchar(max)

      SET @DebugMessageText = N'Failed to groom data for standard data set. Error ' + CAST(@ErrorNumber AS varchar(15))
                      + ', Procedure ' + @ErrorProcedure
                      + ', Line ' + CAST(@ErrorLine AS varchar(15))
                      + ', Message: '+ @ErrorMessageText
      EXEC DebugMessageInsert
         @DatasetId = @DatasetId
        ,@MessageLevel = 1
        ,@MessageText = @DebugMessageText
    END
      
    DECLARE @AdjustedErrorSeverity int

    SET @AdjustedErrorSeverity = CASE
                                   WHEN @ErrorSeverity > 18 THEN 18
                                   ELSE @ErrorSeverity
                                 END
    
    RAISERROR (777971002, @AdjustedErrorSeverity, 1
      ,@ErrorNumber
      ,@ErrorSeverity
      ,@ErrorState
      ,@ErrorProcedure
      ,@ErrorLine
      ,@ErrorMessageText
    )
  END
END

"@
		Invoke-SqlCommand -Query $query -Database $Database -ServerInstance $ServerInstance -As PSCustomObject
	}
	$RunSQLQuery_ManualGroomingFunction = "function Invoke-SQLCommand { ${function:Invoke-SQLCommand} }; function Run-SQLQuery_ManualGrooming { ${function:Run-SQLQuery_ManualGrooming} }"
	
	function Run-SQLQuery_SetRetentionDays
	{
		param
		(
			[Parameter(Mandatory = $true,
					   Position = 0)]
			[string]$ServerInstance,
			[Parameter(Mandatory = $true,
					   Position = 1)]
			[string]$Database,
			[Parameter(Mandatory = $true,
					   Position = 2)]
			[string]$GroomStoredProcedureName,
			[Parameter(Position = 3)]
			[string]$AggregationId,
			[Parameter(Mandatory = $true,
					   Position = 4)]
			[string]$Days
		)
		$query = @"
UPDATE StandardDatasetAggregation 
SET MaxDataAgeDays = $Days --change this number if you want something different
WHERE GroomStoredProcedureName = `'$GroomStoredProcedureName`' AND AggregationTypeId = `'$AggregationId`'
"@
		Invoke-SqlCommand -Query $query -Database $Database -ServerInstance $ServerInstance -As PSCustomObject
	}
	$RunSQLQuery_SetRetentionDaysFunction = "function Invoke-SQLCommand { ${function:Invoke-SQLCommand} }; function Run-SQLQuery_SetRetentionDays { ${function:Run-SQLQuery_SetRetentionDays} }"
	
	function Get-CurrentSQLDWSettings
	{
		param
		(
			[Parameter(Mandatory = $true,
					   Position = 0)]
			[string]$ServerInstance,
			[Parameter(Mandatory = $true,
					   Position = 1)]
			[string]$Database,
			[Parameter(Mandatory = $false,
					   Position = 2)]
			[switch]$DontRemoveGridviewOutput
		)
		
		$buttonRefreshDataTop.Enabled = $false
		if ($DontRemoveGridviewOutput)
		{
			$script:DontRemoveGridviewOutput = $true
		}
		else
		{
			$script:DontRemoveGridviewOutput = $false
		}
		Add-JobTracker -ArgumentList $RunSQLQuery_RetentionDataFunction, $ServerInstance, $Database -Name 'GetCurrentSettings_Job' `
					   -JobScript {
			Param ($script,
				$DWDBServer,
				$DWDBName) #Pass any arguments using the ArgumentList parameter
			#Important: Do not access form controls from this script block.
			. ([ScriptBlock]::Create($script))
			Run-SQLQuery_RetentionData -Database $DWDBName -ServerInstance $DWDBServer
		}`
					   -CompletedScript {
			Param ($Job)
			$script:mainGridViewResults = Receive-Job -Job $Job
			$progressBarTop.Visible = $false
			$buttonGetCurrentSettings.Enabled = $true
			if ($script:mainGridViewResults)
			{
				Write-EventLog -LogName Application -Source "SCOMDWTool" -EventID 3 -Message "Results received! - Top Data Grid"
				$buttonImportOverrideMP.Enabled = $true
				$buttonRemoveOverrideMP.Enabled = $true
				$buttonStagingTables.Enabled = $true
				$timer1.Enabled = $true
				$labelLastUpdatedTop.Visible = $true
				$currentDate = Get-Date
				$labelLastUpdatedTop.Text = "Last Updated: $($currentDate.ToShortDateString()) $($currentDate.ToLongTimeString())"
				$labelLastUpdatedTop.Tag = $labelLastUpdatedTop.Text
				$labelCurrentUTCTime.Visible = $true
				$clockImageLabel.Visible = $true
				#$mainGridView.Refresh()
				$AggregationType_textbox.Enabled = $true
				$DaysSelector.Enabled = $true
				$buttonResetToDefaults.Enabled = $true
				$buttonRunGroomingManually.Enabled = $true
				$buttonGroomingHistory.Enabled = $true
				$buttonFullHistory.Enabled = $true
				$DataSetName_textbox.Enabled = $true
				$buttonRefreshDataTop.Enabled = $true
				
				#Create Columns for Datatable
				$gatherNewTable = New-Object System.Data.DataTable
				$gatherNewTable.Columns.Add("Dataset Name", "System.String") | Out-Null
				$gatherNewTable.Columns.Add("Aggregation Type", "System.String") | Out-Null
				$gatherNewTable.Columns.Add("Current Retention (Days)", "System.Int32") | Out-Null
				$gatherNewTable.Columns.Add("Is Default Value?", "System.String") | Out-Null
				#$gatherNewTable.Columns.Add("Grooming Interval (Minutes)", "System.Int32") | Out-Null
				$gatherNewTable.Columns.Add("Current Size (GB)", "System.String") | Out-Null
				$gatherNewTable.Columns.Add("Percent of Database (%)", "System.Int32") | Out-Null
				foreach ($result in $mainGridViewResults)
				{
					if ($result)
					{
						$datasetName = $result | Select-Object DatasetName -ExpandProperty DatasetName
						$aggregationTypeName = $result | Select-Object AggregationTypeName -ExpandProperty AggregationTypeName
						[int]$retentionDays = $result | Select-Object MaxDataAgeDays -ExpandProperty MaxDataAgeDays
						$row = $gatherNewTable.NewRow();
						$row["Dataset Name"] = $datasetName;
						$row["Aggregation Type"] = $aggregationTypeName;
						$row["Current Retention (Days)"] = $retentionDays;
						<#
						try
						{
							$row["Grooming Interval (Minutes)"] = [int]$($result | Select-Object GroomingIntervalMinutes -ExpandProperty GroomingIntervalMinutes);
						}
						catch
						{
							$row["Grooming Interval (Minutes)"] = 0;
						}
						#>
						# Check if defaults are set
						switch ($datasetName)
						{
							'Alert data set' {
								switch ($aggregationTypeName)
								{
									'Raw data' {
										switch ($retentionDays)
										{
											'400' {
												$row["Is Default Value?"] = 'Default';
											}
											default {
												$row["Is Default Value?"] = 'Non-Default';
											}
										}
									}
								}
							}
							'Client Monitoring data set' {
								switch ($aggregationTypeName)
								{
									'Daily aggregations' {
										switch ($retentionDays)
										{
											'400' {
												$row["Is Default Value?"] = 'Default';
											}
											default {
												$row["Is Default Value?"] = 'Non-Default';
											}
										}
									}
									'Raw data' {
										switch ($retentionDays)
										{
											'30' {
												$row["Is Default Value?"] = 'Default';
											}
											default {
												$row["Is Default Value?"] = 'Non-Default';
											}
										}
									}
								}
							}
							'Configuration data set' {
								switch ($aggregationTypeName)
								{
									'Raw data' {
										switch ($retentionDays)
										{
											'400' {
												$row["Is Default Value?"] = 'Default';
											}
											default {
												$row["Is Default Value?"] = 'Non-Default';
											}
										}
									}
								}
							}
							'Event data set' {
								switch ($aggregationTypeName)
								{
									'Raw data' {
										switch ($retentionDays)
										{
											'100' {
												$row["Is Default Value?"] = 'Default';
											}
											default {
												$row["Is Default Value?"] = 'Non-Default';
											}
										}
									}
								}
							}
							'Performance data set' {
								switch ($aggregationTypeName)
								{
									'Daily aggregations' {
										switch ($retentionDays)
										{
											'400' {
												$row["Is Default Value?"] = 'Default';
											}
											default {
												$row["Is Default Value?"] = 'Non-Default';
											}
										}
									}
									'Hourly aggregations' {
										switch ($retentionDays)
										{
											'400' {
												$row["Is Default Value?"] = 'Default';
											}
											default {
												$row["Is Default Value?"] = 'Non-Default';
											}
										}
									}
									'Raw data' {
										switch ($retentionDays)
										{
											'10' {
												$row["Is Default Value?"] = 'Default';
											}
											default {
												$row["Is Default Value?"] = 'Non-Default';
											}
										}
									}
								}
							}
							'State data set' {
								switch ($aggregationTypeName)
								{
									'Daily aggregations' {
										switch ($retentionDays)
										{
											'400' {
												$row["Is Default Value?"] = 'Default';
											}
											default {
												$row["Is Default Value?"] = 'Non-Default';
											}
										}
									}
									'Hourly aggregations' {
										switch ($retentionDays)
										{
											'400' {
												$row["Is Default Value?"] = 'Default';
											}
											default {
												$row["Is Default Value?"] = 'Non-Default';
											}
										}
									}
									'Raw data' {
										switch ($retentionDays)
										{
											'180' {
												$row["Is Default Value?"] = 'Default';
											}
											default {
												$row["Is Default Value?"] = 'Non-Default';
											}
										}
									}
								}
							}
							default {
								$row["Is Default Value?"] = 'Unknown';
							}
						}
						
						$row["Current Size (GB)"] = "$($result | Select-Object SizeGB -ExpandProperty SizeGB) GB";
						$row["Percent of Database (%)"] = [int]$($result | Select-Object PercentOfDW -ExpandProperty PercentOfDW);
						$gatherNewTable.Rows.Add($row);
					}
					
				}
				## - Save changes to the table:
				$gatherNewTable.AcceptChanges();
				
				## - Display custom data created:
				$mainGridView.DataSource = $gatherNewTable;
				$mainGridView.Sort($($mainGridView.Columns['Percent of Database (%)']), 'Descending')
				$buttonExportCurrentConfiguration.Enabled = $true
				$buttonSet.Enabled = $false
				#Update-ComboBox -ComboBox $DataSetName_textbox -Items $($results | Select-Object DatasetName -ExpandProperty DatasetName -Unique)
				#Update-ComboBox -ComboBox $AggregationType_textbox -Items $($results | Select-Object AggregationTypeName -ExpandProperty AggregationTypeName -Unique)
			}
			else
			{
				Write-EventLog -LogName Application -Source "SCOMDWTool" -EventID 2 -Message "No results received! - Top Data Grid"
				Write-Warning "No results received!"
				$labelLastUpdatedTop.Visible = $false
				$buttonImportOverrideMP.Enabled = $false
				$buttonRemoveOverrideMP.Enabled = $false
				$buttonGroomingHistory.Enabled = $false
				$buttonFullHistory.Enabled = $false
			}
			
		}`
					   -UpdateScript {
			Param ($Job)
			#$results = Receive-Job -Job $Job -Keep
			$progressBarTop.Visible = $true
			$buttonExportCurrentConfiguration.Enabled = $false
			$AggregationType_textbox.Enabled = $false
			$DaysSelector.Enabled = $false
			$buttonResetToDefaults.Enabled = $false
			$buttonSet.Enabled = $false
			$buttonRunGroomingManually.Enabled = $false
			$buttonGroomingHistory.Enabled = $false
			$buttonFullHistory.Enabled = $false
			$DataSetName_textbox.Enabled = $false
			$buttonGetCurrentSettings.Enabled = $false
			$buttonImportOverrideMP.Enabled = $false
			$buttonRemoveOverrideMP.Enabled = $false
			$buttonStagingTables.Enabled = $false
			if (!$script:DontRemoveGridviewOutput)
			{
				$mainGridView.DataSource = $null
			}
			
			$buttonRefreshDataTop.Enabled = $false
		}
	}
	
	function Get-ActualSQLDWRetentionDays
	{
		param
		(
			[Parameter(Mandatory = $true,
					   Position = 0)]
			[string]$ServerInstance,
			[Parameter(Mandatory = $true,
					   Position = 1)]
			[string]$Database
		)
		$buttonRefreshDataBottom.Enabled = $false
		Add-JobTracker -ArgumentList $RunSQLQuery_ActualRetentionDaysFunction, $ServerInstance, $Database -Name 'RefreshActualRetentionDays_Job' `
					   -JobScript {
			Param ($script,
				$DWDBServer,
				$DWDBName) #Pass any arguments using the ArgumentList parameter
			#Important: Do not access form controls from this script block.
			. ([ScriptBlock]::Create($script))
			Run-SQLQuery_ActualRetentionDays -Database $DWDBName -ServerInstance $DWDBServer
		}`
					   -CompletedScript {
			Param ($Job)
			$results = Receive-Job -Job $Job
			$currentDate = Get-Date
			$labelLastUpdatedBottom.Text = "Last Updated: $($currentDate.ToShortDateString()) $($currentDate.ToLongTimeString())"
			$labelLastUpdatedBottom.Tag = $labelLastUpdatedBottom.Text
			$labelLastUpdatedBottom.Visible = $true
			$progressBarBottom.Visible = $false
			if ($results)
			{
				$buttonRefreshDataBottom.Enabled = $true
				Write-EventLog -LogName Application -Source "SCOMDWTool" -EventID 3 -Message "Results received! - Bottom Data Grid"
				$retentionDaysTable = New-Object System.Data.DataTable
				$retentionDaysTable.Columns.Add("Aggregation Type", "System.String") | Out-Null
				$retentionDaysTable.Columns.Add("Total Days of Data", "System.Int32") | Out-Null
				$retentionDaysTable.Columns.Add("Min Date (UTC)", "System.String") | Out-Null
				$retentionDaysTable.Columns.Add("Max Date (UTC)", "System.String") | Out-Null
				foreach ($result in $results)
				{
					if ($result)
					{
						$row = $retentionDaysTable.NewRow();
						$row["Aggregation Type"] = $($result | Select-Object 'Type' -ExpandProperty 'Type');
						$row["Total Days of Data"] = [int]$($result | Select-Object DaysOfData -ExpandProperty DaysOfData);
						$row["Min Date (UTC)"] = [string]$($result | Select-Object MinDate -ExpandProperty MinDate);
						$row["Max Date (UTC)"] = [string]$($result | Select-Object MaxDate -ExpandProperty MaxDate);
						$retentionDaysTable.Rows.Add($row);
					}
					
				}
				## - Save changes to the table:
				$retentionDaysTable.AcceptChanges();
				
				## - Display custom data created:
				$actualRetentionDays_GridView.DataSource = $retentionDaysTable;
				$actualRetentionDays_GridView.Sort($actualRetentionDays_GridView.Columns['Total Days of Data'], 'Descending')
				#Update-ComboBox -ComboBox $DataSetName_textbox -Items $($results | Select-Object DatasetName -ExpandProperty DatasetName -Unique)
				#Update-ComboBox -ComboBox $AggregationType_textbox -Items $($results | Select-Object AggregationTypeName -ExpandProperty AggregationTypeName -Unique)
			}
			else
			{
				Write-EventLog -LogName Application -Source "SCOMDWTool" -EventID 2 -Message "No results received! - Bottom Data Grid"
				Write-Warning "No results received!"
				$labelLastUpdatedBottom.Visible = $false
			}
		}`
					   -UpdateScript {
			Param ($Job)
			#$results = Receive-Job -Job $Job -Keep
			$actualRetentionDays_GridView.DataSource = $null
			$progressBarBottom.Visible = $true
			$buttonRefreshDataBottom.Enabled = $false
		}
	}
	
	function Get-GroomingHistory
	{
		param
		(
			[Parameter(Mandatory = $true,
					   Position = 0)]
			[string]$ServerInstance,
			[Parameter(Mandatory = $true,
					   Position = 1)]
			[string]$Database
		)
		Add-JobTracker -ArgumentList $RunSQLQuery_GroomingHistoryFunction, $ServerInstance, $Database -Name 'GetGroomingHistory_Job' `
					   -JobScript {
			Param ($script,
				$DWDBServer,
				$DWDBName) #Pass any arguments using the ArgumentList parameter
			#Important: Do not access form controls from this script block.
			. ([ScriptBlock]::Create($script))
			Run-SQLQuery_GroomingHistory -Database $DWDBName -ServerInstance $DWDBServer
		}`
					   -CompletedScript {
			Param ($Job)
			$buttonFullHistory.Enabled = $true
			$labelLastUpdatedGrooming.Visible = $true
			$labelLastUpdatedGrooming.Text = "Last Updated: $(Get-Date -Format "MM/dd/yyyy hh:mm:ss tt")"
			$timer1.Enabled = $true
			$labelLastUpdatedGrooming.Tag = $labelLastUpdatedGrooming.Text
			$progressBarGrooming.Visible = $false
			$results = Receive-Job -Job $Job
			$buttonRefreshGrooming.Enabled = $true
			if ($results)
			{
				$gatherGroomingHistoryTable = New-Object System.Data.DataTable
				$gatherGroomingHistoryTable.Columns.Add("Dataset Name", "System.String") | Out-Null
				$gatherGroomingHistoryTable.Columns.Add("Aggregation Type", "System.String") | Out-Null
				#$gatherGroomingHistoryTable.Columns.Add("Next Aggregation Time (UTC)", "System.String") | Out-Null
				$gatherGroomingHistoryTable.Columns.Add("Outstanding Aggregation Count", "System.Int32") | Out-Null
				$gatherGroomingHistoryTable.Columns.Add("Count Aggregations", "System.String") | Out-Null
				$gatherGroomingHistoryTable.Columns.Add("Max Data Age (Days)", "System.Int32") | Out-Null
				$gatherGroomingHistoryTable.Columns.Add("Last Grooming Time (UTC)", "System.String") | Out-Null
				
				
				foreach ($result in $results)
				{
					if ($result)
					{
						$row = $gatherGroomingHistoryTable.NewRow();
						
						$row["Dataset Name"] = [string]$($result | Select-Object DatasetDefaultName -ExpandProperty DatasetDefaultName);
						$row["Aggregation Type"] = [string]$($result | Select-Object AggregationType -ExpandProperty AggregationType);
						#$row["Next Aggregation Time (UTC)"] = $($result | Select-Object TimeUTC_NextToAggregate -ExpandProperty TimeUTC_NextToAggregate);
						$row["Outstanding Aggregation Count"] = [int]$($result | Select-Object Count_OutstandingAggregations -ExpandProperty Count_OutstandingAggregations);
						$row["Count Aggregations"] = [int]$($result | Select-Object Count_Aggregations -ExpandProperty Count_Aggregations);
						$row["Max Data Age (Days)"] = [int]$($result | Select-Object MaxDataAgeDays -ExpandProperty MaxDataAgeDays);
						$row["Last Grooming Time (UTC)"] = [string]$($result | Select-Object LastGroomingDateTime -ExpandProperty LastGroomingDateTime);
						$gatherGroomingHistoryTable.Rows.Add($row);
					}
					
				}
				## - Save changes to the table:
				$gatherGroomingHistoryTable.AcceptChanges();
				
				## - Display custom data created:
				$groomingHistoryGridView.DataSource = $gatherGroomingHistoryTable;
				$groomingHistoryGridView.Sort($groomingHistoryGridView.Columns['Last Grooming Time (UTC)'], 'Descending')
				
				#$groomingHistoryGridView.Sort($groomingHistoryGridView.Columns['Data Last Received Date / Time'], 'Descending')
				$labelScreenFrozen.Visible = $false
				$labelRowsReturned.Visible = $true
				$labelRowsReturned.Text = "Rows Returned: $($results.Count)"
				#Update-ComboBox -ComboBox $DataSetName_textbox -Items $($results | Select-Object DatasetName -ExpandProperty DatasetName -Unique)
				#Update-ComboBox -ComboBox $AggregationType_textbox -Items $($results | Select-Object AggregationTypeName -ExpandProperty AggregationTypeName -Unique)
			}
			else
			{
				Write-EventLog -LogName Application -Source "SCOMDWTool" -EventID 2 -Message "No results received! {3}"
				Write-Warning "No results received!"
			}
			
		}`
					   -UpdateScript {
			Param ($Job)
			#$results = Receive-Job -Job $Job -Keep
			$labelScreenFrozen.Visible = $true
			$labelRowsReturned.Visible = $false
			$progressBarGrooming.Visible = $true
			$groomingHistoryGridView.DataSource = $null
			$buttonRefreshGrooming.Enabled = $false
		}
	}
	
	function Get-GroomingHistoryFull
	{
		param
		(
			[Parameter(Mandatory = $true,
					   Position = 0)]
			[string]$ServerInstance,
			[Parameter(Mandatory = $true,
					   Position = 1)]
			[string]$Database
		)
		Add-JobTracker -ArgumentList $RunSQLQuery_GroomingHistoryFullFunction, $ServerInstance, $Database -Name 'GetGroomingHistoryFull_Job' `
					   -JobScript {
			Param ($script,
				$DWDBServer,
				$DWDBName) #Pass any arguments using the ArgumentList parameter
			#Important: Do not access form controls from this script block.
			. ([ScriptBlock]::Create($script))
			Run-SQLQuery_GroomingHistoryFull -Database $DWDBName -ServerInstance $DWDBServer
		}`
					   -CompletedScript {
			Param ($Job)
			if ($initialRun.count -eq 3)
			{
				$initialRun = $false
			}
			$buttonExportCurrentOutput.Enabled = $true
			$labelLastUpdatedGrooming.Visible = $true
			$labelLastUpdatedGrooming.Text = "Last Updated: $(Get-Date -Format "MM/dd/yyyy hh:mm:ss tt")"
			$timer1.Enabled = $true
			$labelLastUpdatedGrooming.Tag = $labelLastUpdatedGrooming.Text
			$progressBarGrooming.Visible = $false
			$results = Receive-Job -Job $Job
			$script:groomingHistoryFullGridViewResults = $results
			$buttonRefreshGrooming.Enabled = $true
			if ($results -and (-not $initialRun))
			{
				$data = $results | Select-Object 'Dataset Name' -ExpandProperty 'Dataset Name' -Unique
				$array = @()
				$array += 'No filter'
				foreach ($item in $data)
				{
					$array += $item
				}
				Update-ComboBox -ComboBox $comboboxDatasetName -Items $array
				$comboboxDatasetName.SelectedIndex = 0
				
				$data = $results | Select-Object 'Aggregation Type' -ExpandProperty 'Aggregation Type' -Unique
				$array = @()
				$array += 'No filter'
				foreach ($item in $data)
				{
					$array += $item
				}
				Update-ComboBox -ComboBox $comboboxAggregationType -Items $array
				$comboboxAggregationType.Text = 'No filter'
				
				$gatherGroomingHistoryTable = New-Object System.Data.DataTable
				$gatherGroomingHistoryTable.Columns.Add("Dataset Name", "System.String") | Out-Null
				$gatherGroomingHistoryTable.Columns.Add("Aggregation Type", "System.String") | Out-Null
				$gatherGroomingHistoryTable.Columns.Add("Aggregation Date/Time", "System.String") | Out-Null
				$gatherGroomingHistoryTable.Columns.Add("Outstanding Aggregation Count", "System.Int32") | Out-Null
				$gatherGroomingHistoryTable.Columns.Add("Count Aggregations", "System.Int32") | Out-Null
				$gatherGroomingHistoryTable.Columns.Add("Aggregation Start Time", "System.String") | Out-Null
				$gatherGroomingHistoryTable.Columns.Add("Aggregation Duration Seconds", "System.Int32") | Out-Null
				$gatherGroomingHistoryTable.Columns.Add("Last Aggregation Start Time", "System.String") | Out-Null
				$gatherGroomingHistoryTable.Columns.Add("Last Aggregation Duration Seconds", "System.Int32") | Out-Null
				$gatherGroomingHistoryTable.Columns.Add("Data Last Received Date/Time", "System.String") | Out-Null
				
				foreach ($result in $results)
				{
					if ($result)
					{
						$ErrorActionPreference = 'Stop'
						$row = $gatherGroomingHistoryTable.NewRow();
						
						$row["Dataset Name"] = [string]$($result | Select-Object 'Dataset Name' -ExpandProperty 'Dataset Name');
						try { $row["Aggregation Type"] = [string]$($result | Select-Object 'Aggregation Type' -ExpandProperty 'Aggregation Type') }
						catch { [DBNull]::Value };
						try
						{
							$row["Aggregation Date/Time"] = [string]$($result | Select-Object 'Aggregation Date/Time' -ExpandProperty 'Aggregation Date/Time')
						}
						catch { [DBNull]::Value };
						try
						{
							$row["Outstanding Aggregation Count"] = [int]$($result | Select-Object 'Outstanding Aggregation Count' -ExpandProperty 'Outstanding Aggregation Count')
						}
						catch { [DBNull]::Value };
						try
						{
							$row["Count Aggregations"] = [int]$($result | Select-Object 'Count Aggregations' -ExpandProperty 'Count Aggregations')
						}
						catch { [DBNull]::Value };
						try
						{
							$row["Aggregation Start Time"] = [string]$($result | Select-Object 'Aggregation Start Time' -ExpandProperty 'Aggregation Start Time')
						}
						catch { [DBNull]::Value };
						try
						{
							$row["Aggregation Duration Seconds"] = [int]$($result | Select-Object 'Aggregation Duration Seconds' -ExpandProperty 'Aggregation Duration Seconds')
						}
						catch { [DBNull]::Value };
						try
						{
							$row["Last Aggregation Start Time"] = [string]$($result | Select-Object 'Last Aggregation Start Time' -ExpandProperty 'Last Aggregation Start Time')
						}
						catch { [DBNull]::Value };
						try
						{
							$row["Last Aggregation Duration Seconds"] = [string]$($result | Select-Object 'Last Aggregation Duration Seconds' -ExpandProperty 'Last Aggregation Duration Seconds')
						}
						catch { [DBNull]::Value };
						try
						{
							$row["Data Last Received Date/Time"] = [string]$($result | Select-Object 'Data Last Received Date/Time' -ExpandProperty 'Data Last Received Date/Time')
						}
						catch { [DBNull]::Value };
						$gatherGroomingHistoryTable.Rows.Add($row);
						$ErrorActionPreference = 'Continue'
					}
					
				}
				## - Save changes to the table:
				$gatherGroomingHistoryTable.AcceptChanges();
				
				## - Display custom data created:
				$groomingHistoryGridView.DataSource = $gatherGroomingHistoryTable;
				$groomingHistoryGridView.Sort($groomingHistoryGridView.Columns['Aggregation Date/Time'], 'Descending')
				
				#$groomingHistoryGridView.Sort($groomingHistoryGridView.Columns['Data Last Received Date / Time'], 'Descending')
				$comboboxDatasetName.Enabled = $true
				$comboboxAggregationType.Enabled = $true
				$labelScreenFrozen.Visible = $false
				$labelRowsReturned.Visible = $true
				$labelRowsReturned.Text = "Rows Returned: $($results.Count)"
				$datetimepicker1.MinDate = $($script:groomingHistoryFullGridViewResults | Sort-Object 'Aggregation Date/Time' -Descending | Select-Object -Last 1 -Property 'Aggregation Date/Time' -ExpandProperty 'Aggregation Date/Time')
				#Update-ComboBox -ComboBox $DataSetName_textbox -Items $($results | Select-Object DatasetName -ExpandProperty DatasetName -Unique)
				#Update-ComboBox -ComboBox $AggregationType_textbox -Items $($results | Select-Object AggregationTypeName -ExpandProperty AggregationTypeName -Unique)
			}
			else
			{
				#Write-EventLog -LogName Application -Source "SCOMDWTool" -EventID 2 -Message "No results received! {3}"
				#Write-Warning "No results received!"
				$initialRun += 1
			}
			
		}`
					   -UpdateScript {
			Param ($Job)
			#$results = Receive-Job -Job $Job -Keep
			$labelScreenFrozen.Visible = $true
			$labelRowsReturned.Visible = $false
			$progressBarGrooming.Visible = $true
			$groomingHistoryGridView.DataSource = $null
			$buttonRefreshGrooming.Enabled = $false
		}
	}
	
	function Get-GroomingStaging
	{
		param
		(
			[Parameter(Mandatory = $true,
					   Position = 0)]
			[string]$ServerInstance,
			[Parameter(Mandatory = $true,
					   Position = 1)]
			[string]$Database,
			[string]$ChartType
		)
		
		Add-JobTracker -ArgumentList $RunSQLQuery_GroomingStagingFunction, $ServerInstance, $Database -Name 'GetGroomingStaging_Job' `
					   -JobScript {
			Param ($script,
				$DWDBServer,
				$DWDBName) #Pass any arguments using the ArgumentList parameter
			#Important: Do not access form controls from this script block.
			. ([ScriptBlock]::Create($script))
			Run-SQLQuery_GroomingStaging -Database $DWDBName -ServerInstance $DWDBServer
		}`
					   -CompletedScript {
			Param ($Job)
			$labelLastUpdatedGrooming.Visible = $true
			$labelLastUpdatedGrooming.Text = "Last Updated: $(Get-Date -Format "MM/dd/yyyy hh:mm:ss tt")"
			$timer1.Enabled = $true
			$labelLastUpdatedGrooming.Tag = $labelLastUpdatedGrooming.Text
			$progressBarGrooming.Visible = $false
			$results = Receive-Job -Job $Job
			$buttonRefreshGrooming.Enabled = $true
			if ($results)
			{
				$gatherGroomingStagingTable = New-Object System.Data.DataTable
				$gatherGroomingStagingTable.Columns.Add("Table Name", "System.String") | Out-Null
				$gatherGroomingStagingTable.Columns.Add("Count", "System.Int32") | Out-Null
				
				foreach ($result in $results)
				{
					if ($result)
					{
						$row = $gatherGroomingStagingTable.NewRow();
						$tableName = [string]$($result | Select-Object TableName -ExpandProperty TableName)
						$row["Table Name"] = $tableName;
						$row["Count"] = [int32]$($result | Select-Object Count -ExpandProperty Count);
						$gatherGroomingStagingTable.Rows.Add($row);
					}
					
				}
				## - Save changes to the table:
				$gatherGroomingStagingTable.AcceptChanges();
				
				## - Display custom data created:
				$groomingStagingGridView.DataSource = $gatherGroomingStagingTable;
				$groomingStagingGridView.Sort($groomingStagingGridView.Columns['Table Name'], 'Ascending')
				
				#$groomingHistoryGridView.Sort($groomingHistoryGridView.Columns['Data Last Received Date / Time'], 'Descending')
				$labelRowsReturned.Visible = $true
				$labelRowsReturned.Text = "Rows Returned: $($results.Count)"
				#Update-ComboBox -ComboBox $DataSetName_textbox -Items $($results | Select-Object DatasetName -ExpandProperty DatasetName -Unique)
				#Update-ComboBox -ComboBox $AggregationType_textbox -Items $($results | Select-Object AggregationTypeName -ExpandProperty AggregationTypeName -Unique)
				$script:overallCount = @()
				
				if (-NOT $script:tableList)
				{
					$script:tableList = @()
				}
				
				$groomingStagingGridView.Rows | ForEach-Object {
					$lastTable = $groomingStagingGridView.Rows[$_.Index].Cells['Table Name'].Value
					$lastCount = $groomingStagingGridView.Rows[$_.Index].Cells['Count'].Value
					$script:tableList += "$lastTable"
					$script:overallCount += $lastCount
					#Update-Chart -ChartControl $chartCount -XPoints (Get-Date).ToLongTimeString().ToString() -YPoints $lastCount -ChartType 'Line' -XTitle 'Table Name' -YTitle 'Count' -Title 'Staging Count History'
				}
				#Update-Chart -ChartControl $chartCount -XPoints "$((Get-Date).ToLongTimeString().ToString())" -YPoints $overallCount
				$error.Clear()
				try
				{
					Update-Chart -ChartControl $chartCount -XPoints $script:tableList -YPoints $script:overallCount -ChartType $ChartType -ErrorAction Stop
				}
				catch
				{
					#Write-EventLog -LogName Application -Source "SCOMDWTool" -EventID 2 -Message "Error occurred while updating Staging Table chart:`n$error"
					Write-Verbose "Error occurred while updating Staging Table chart:`n$error"
				}
			}
			else
			{
				Write-EventLog -LogName Application -Source "SCOMDWTool" -EventID 2 -Message "Unable to load chart in Grooming Staging window"
				Write-Warning "Unable to load chart in Grooming Staging window"
			}
			
		}`
					   -UpdateScript {
			Param ($Job)
			#$results = Receive-Job -Job $Job -Keep
			$labelRowsReturned.Visible = $false
			$progressBarGrooming.Visible = $true
			#$groomingStagingGridView.DataSource = $null
			$buttonRefreshGrooming.Enabled = $false
		}
	}
	
	function Run-ManualGrooming
	{
		param
		(
			[Parameter(Mandatory = $true,
					   Position = 0)]
			[string]$ServerInstance,
			[Parameter(Mandatory = $true,
					   Position = 1)]
			[string]$Database,
			[Parameter(Mandatory = $true,
					   Position = 2)]
			[string]$DatasetId
		)
		
		Add-JobTracker -ArgumentList $RunSQLQuery_ManualGroomingFunction, $ServerInstance, $Database, $DatasetId -Name 'RunGroomingManually_Job' `
					   -JobScript {
			Param ($script,
				$DWDBServer,
				$DWDBName,
				$DatasetId) #Pass any arguments using the ArgumentList parameter
			#Important: Do not access form controls from this script block.
			. ([ScriptBlock]::Create($script))
			Run-SQLQuery_ManualGrooming -Database $DWDBName -ServerInstance $DWDBServer -DatasetId $DatasetId
		}`
					   -CompletedScript {
			Param ($Job)
			$results = Receive-Job -Job $Job
			$buttonRunGroomingManually.Enabled = $true
			if ($results)
			{
				Write-Host $results
				#Update-ComboBox -ComboBox $DataSetName_textbox -Items $($results | Select-Object DatasetName -ExpandProperty DatasetName -Unique)
				#Update-ComboBox -ComboBox $AggregationType_textbox -Items $($results | Select-Object AggregationTypeName -ExpandProperty AggregationTypeName -Unique)
			}
			else
			{
				Write-EventLog -LogName Application -Source "SCOMDWTool" -EventID 2 -Message "Manual Grooming has been executed for the $($DataSetName_textbox.Text) - $($AggregationType_textbox.Text)!"
				Write-Output "Manual Grooming has been executed for the $($DataSetName_textbox.Text)!"
			}
			
		}`
					   -UpdateScript {
			Param ($Job)
			#$results = Receive-Job -Job $Job -Keep
			$buttonRunGroomingManually.Enabled = $false
		}
	}
	
	function Run-SetRetentionDays
	{
		param
		(
			[Parameter(Mandatory = $true,
					   Position = 0)]
			[string]$ServerInstance,
			[Parameter(Mandatory = $true,
					   Position = 1)]
			[string]$Database,
			[Parameter(Mandatory = $true,
					   Position = 2)]
			[string]$GroomStoredProcedureName,
			[Parameter(Position = 3)]
			[string]$AggregationId,
			[Parameter(Mandatory = $true,
					   Position = 4)]
			[string]$Days
		)
		
		Add-JobTracker -ArgumentList $RunSQLQuery_SetRetentionDaysFunction, $ServerInstance, $Database, $GroomStoredProcedureName, $AggregationId, $Days -Name 'RunSetRetentionDays_Job' `
					   -JobScript {
			Param ($script,
				$DWDBServer,
				$DWDBName,
				$GroomStoredProcedureName,
				$AggregationId,
				$Days) #Pass any arguments using the ArgumentList parameter
			#Important: Do not access form controls from this script block.
			. ([ScriptBlock]::Create($script))
			Run-SQLQuery_SetRetentionDays -Database $DWDBName -ServerInstance $DWDBServer -GroomStoredProcedureName $GroomStoredProcedureName -AggregationId $AggregationId -Days $Days
		}`
					   -CompletedScript {
			Param ($Job)
			$results = Receive-Job -Job $Job
			$buttonRunGroomingManually.Enabled = $true
			if ($results)
			{
				Add-Type -AssemblyName PresentationCore, PresentationFramework
				$ButtonType = [System.Windows.MessageBoxButton]::OK
				$MessageIcon = [System.Windows.MessageBoxImage]::Asterisk
				$MessageBody = "$results"
				$MessageTitle = "Something has happened"
				$Result = [System.Windows.MessageBox]::Show($MessageBody, $MessageTitle, $ButtonType, $MessageIcon)
				#Update-ComboBox -ComboBox $DataSetName_textbox -Items $($results | Select-Object DatasetName -ExpandProperty DatasetName -Unique)
				#Update-ComboBox -ComboBox $AggregationType_textbox -Items $($results | Select-Object AggregationTypeName -ExpandProperty AggregationTypeName -Unique)
			}
			
		}`
					   -UpdateScript {
			Param ($Job)
			#$results = Receive-Job -Job $Job -Keep
			$buttonRunGroomingManually.Enabled = $false
		}
	}
	
	#region Control Helper Functions
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		if ($DisplayMember)
		{
			$ComboBox.DisplayMember = $DisplayMember
		}
		
		if ($ValueMember)
		{
			$ComboBox.ValueMember = $ValueMember
		}
	}
	
	
	
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Item,
			[Parameter(Mandatory = $false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($null -eq $Item)
		{
			$DataGridView.DataSource = $null
		}
		elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
			-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterCIMProperties
				This switch removes CIM properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param (
			$InputObject,
			[ValidateNotNull()]
			[System.Data.DataTable]$Table,
			[switch]$RetainColumns,
			[switch]$FilterCIMProperties)
		
		if ($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($null -eq $InputObject)
		{
			$Table.Clear()
			return @( ,$Table)
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @( ,$Table)
	}
	
	function Update-Chart
	{
	<#
	    .SYNOPSIS
	        This functions helps you plot points on a chart.
	    
	    .DESCRIPTION
	        Use the function to plot points on a chart or add more charts to a chart control.
	    
	    .PARAMETER ChartControl
	        The Chart Control you when to add points to.
	    
	    .PARAMETER XPoints
	        Set the X Axis Points. These can be strings or numerical values.
	    
	    .PARAMETER YPoints
	        Set the Y Axis Points. These can be strings or numerical values.
	    
	    .PARAMETER XTitle
	        Set the Title for the X Axis.
	    
	    .PARAMETER YTitle
	        Set the Title for the Y Axis.
	    
	    .PARAMETER Title
	        Set the Title for the chart.
	    
	    .PARAMETER ChartType
	        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
	    
	    .PARAMETER SeriesIndex
	        Set the settings of a particular Series and corresponding ChartArea.
	    
	    .PARAMETER TitleIndex
	        Set the settings of a particular Title.
	    
	    .PARAMETER SeriesName
	        Set the settings of a particular Series using its name and corresponding ChartArea.
	        The Series will be created if not found.
	        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
	    
	    .PARAMETER Enable3D
	        The chart will be rendered in 3D.
	    
	    .PARAMETER Disable3D
	        The chart will be rendered in 2D.
	    
	    .PARAMETER AppendNew
	        When this switch is used, a new ChartArea is added to Chart Control.
	    
	    .NOTES
	        Additional information about the function.
	    
	    .LINK
	        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
	#>
		
		param
		(
			[Parameter(Mandatory = $true, Position = 1)]
			[ValidateNotNull()]
			[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
			[Parameter(Mandatory = $true, Position = 2)]
			[ValidateNotNull()]
			$XPoints,
			[Parameter(Mandatory = $true, Position = 3)]
			[ValidateNotNull()]
			$YPoints,
			[Parameter(Mandatory = $false, Position = 4)]
			[string]$XTitle,
			[Parameter(Mandatory = $false, Position = 5)]
			[string]$YTitle,
			[Parameter(Mandatory = $false, Position = 6)]
			[string]$Title,
			[Parameter(Mandatory = $false, Position = 7)]
			[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
			[Parameter(Mandatory = $false, Position = 8)]
			[int]$SeriesIndex = -1,
			[Parameter(Mandatory = $false, Position = 9)]
			[int]$TitleIndex = 0,
			[Parameter(Mandatory = $false)]
			[string]$SeriesName = $null,
			[switch]$Enable3D,
			[switch]$Disable3D,
			[switch]$AppendNew
		)
		$ChartAreaIndex = 0
		if ($AppendNew)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			$ChartArea = $ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
			
			$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
			$Series = $ChartControl.Series.Add($name)
			$SeriesIndex = $ChartControl.Series.Count - 1
			
			$Series.ChartArea = $ChartArea.Name
		}
		else
		{
			if ($ChartControl.ChartAreas.Count -eq 0)
			{
				$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
				[void]$ChartControl.ChartAreas.Add($name)
				$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
			}
			
			if ($ChartControl.Series.Count -eq 0)
			{
				if (-not $SeriesName)
				{
					$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
				}
				
				$Series = $ChartControl.Series.Add($SeriesName)
				$SeriesIndex = $ChartControl.Series.Count - 1
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			elseif ($SeriesName)
			{
				$Series = $ChartControl.Series.FindByName($SeriesName)
				
				if ($null -eq $Series)
				{
					if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
					{
						$Series = $ChartControl.Series[$SeriesIndex]
						$Series.Name = $SeriesName
					}
					else
					{
						$Series = $ChartControl.Series.Add($SeriesName)
						$SeriesIndex = $ChartControl.Series.Count - 1
					}
					
					$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
				}
				else
				{
					$SeriesIndex = $ChartControl.Series.IndexOf($Series)
					$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
				}
			}
		}
		
		if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
		{
			$SeriesIndex = 0
		}
		
		$Series = $ChartControl.Series[$SeriesIndex]
		$Series.Points.Clear()
		$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
		
		if ($Enable3D)
		{
			$ChartArea.Area3DStyle.Enable3D = $true
		}
		elseif ($Disable3D)
		{
			$ChartArea.Area3DStyle.Enable3D = $false
		}
		
		if ($Title)
		{
			if ($ChartControl.Titles.Count -eq 0)
			{
				#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
				$TitleObj = $ChartControl.Titles.Add($Title)
				$TitleIndex = $ChartControl.Titles.Count - 1
				$TitleObj.DockedToChartArea = $ChartArea.Name
				$TitleObj.IsDockedInsideChartArea = $false
			}
			
			$ChartControl.Titles[$TitleIndex].Text = $Title
		}
		
		if ($ChartType)
		{
			$Series.ChartType = $ChartType
		}
		
		if ($XTitle)
		{
			$ChartArea.AxisX.Title = $XTitle
		}
		
		if ($YTitle)
		{
			$ChartArea.AxisY.Title = $YTitle
		}
		
		if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
		{
			$array = New-Object System.Collections.ArrayList
			$array.Add($XPoints)
			$XPoints = $array
		}
		
		if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
		{
			$array = New-Object System.Collections.ArrayList
			$array.Add($YPoints)
			$YPoints = $array
		}
		
		$Series.Points.DataBindXY($XPoints, $YPoints)
	}
	
	function Clear-Chart
	{
	<#
		.SYNOPSIS
			This function clears the contents of the chart.
	
		.DESCRIPTION
			Use the function to remove contents from the chart control.
	
		.PARAMETER  ChartControl
			The Chart Control to clear.
	
		.PARAMETER  LeaveSingleChart
			Leaves the first chart and removes all others from the control.
		
		.LINK
			http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Position = 1, Mandatory = $true)]
			[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
			 ,
			[Parameter(Position = 2, Mandatory = $false)]
			[Switch]$LeaveSingleChart
		)
		
		$count = 0
		if ($LeaveSingleChart)
		{
			$count = 1
		}
		
		while ($ChartControl.Series.Count -gt $count)
		{
			$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
		}
		
		while ($ChartControl.ChartAreas.Count -gt $count)
		{
			$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
		}
		
		while ($ChartControl.Titles.Count -gt $count)
		{
			$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
		}
		
		if ($ChartControl.Series.Count -gt 0)
		{
			$ChartControl.Series[0].Points.Clear()
		}
	}
	#endregion
	
	## - [ Section to initialize DataTable objects] - ##
	## - Create DataTable:
	$table = New-Object System.Data.DataTable;
	
	## - Defining DataTable object columns and rows properties:
	# - Column1 = "Dataset Name".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Dataset Name";
	$column.ReadOnly = $true
	$table.Columns.Add($column);
	
	# - Column2 = "Aggregation Type".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Aggregation Type";
	$column.ReadOnly = $true
	$table.Columns.Add($column);
	
	# - Column3 = "Current Retention".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.Int32");
	$column.ColumnName = "Current Retention (Days)";
	$table.Columns.Add($column);
	
	# - Column4 = "Current Size (GB)".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.String");
	$column.ColumnName = "Current Size (GB)";
	$table.Columns.Add($column);
	
	# - Column5 = "Percent of Database".
	$column = New-Object System.Data.DataColumn;
	$column.DataType = [System.Type]::GetType("System.Int32");
	$column.ColumnName = "Percent of Database";
	$table.Columns.Add($column);
	
	function Test-TimeSpan
	{
		[CmdletBinding()]
		param (
			[Parameter(Position = 0)]
			[timespan]$TimeSpan
		)
		end
		{
			return $TimeSpan
		}
	}
	
	filter Format-TimeSpan
	{
		$format = '{0:%d} Day(s), {0:%h} Hour(s), {0:%m} Minute(s), {0:%s} Second(s)'
		return ($format -f $PSItem) -replace '0+(?=\d+ Millisecond)', ''
	}
	
	function Filter-GroomingHistoryFullTable
	{
		param
		(
			$data
		)
		if (-NOT $data)
		{
			return
		}
		try
		{
			$gatherGroomingHistoryTable.Dispose()
		}
		catch
		{
			Write-Verbose "Dispose `$gatherGroomingHistoryTable: $_"
		}
		$gatherGroomingHistoryTable = New-Object System.Data.DataTable
		$gatherGroomingHistoryTable.Columns.Add("Dataset Name", "System.String") | Out-Null
		$gatherGroomingHistoryTable.Columns.Add("Aggregation Type", "System.String") | Out-Null
		$gatherGroomingHistoryTable.Columns.Add("Aggregation Date/Time", "System.String") | Out-Null
		$gatherGroomingHistoryTable.Columns.Add("Outstanding Aggregation Count", "System.Int32") | Out-Null
		$gatherGroomingHistoryTable.Columns.Add("Count Aggregations", "System.Int32") | Out-Null
		$gatherGroomingHistoryTable.Columns.Add("Aggregation Start Time", "System.String") | Out-Null
		$gatherGroomingHistoryTable.Columns.Add("Aggregation Duration Seconds", "System.Int32") | Out-Null
		$gatherGroomingHistoryTable.Columns.Add("Last Aggregation Start Time", "System.String") | Out-Null
		$gatherGroomingHistoryTable.Columns.Add("Last Aggregation Duration Seconds", "System.Int32") | Out-Null
		$gatherGroomingHistoryTable.Columns.Add("Data Last Received Date/Time", "System.String") | Out-Null
		
		foreach ($object in $data)
		{
			$row = $gatherGroomingHistoryTable.NewRow();
			
			$row["Dataset Name"] = [string]$($object | Select-Object 'Dataset Name' -ExpandProperty 'Dataset Name');
			$ErrorActionPreference = 'Stop'
			try { $row["Aggregation Type"] = [string]$($object | Select-Object 'Aggregation Type' -ExpandProperty 'Aggregation Type') }
			catch { [DBNull]::Value };
			try
			{
				$row["Aggregation Date/Time"] = [string]$($object | Select-Object 'Aggregation Date/Time' -ExpandProperty 'Aggregation Date/Time')
			}
			catch { [DBNull]::Value };
			try
			{
				$row["Outstanding Aggregation Count"] = [int]$($object | Select-Object 'Outstanding Aggregation Count' -ExpandProperty 'Outstanding Aggregation Count')
			}
			catch { [DBNull]::Value };
			try
			{
				$row["Count Aggregations"] = [int]$($object | Select-Object 'Count Aggregations' -ExpandProperty 'Count Aggregations')
			}
			catch { [DBNull]::Value };
			try
			{
				$row["Aggregation Start Time"] = [string]$($object | Select-Object 'Aggregation Start Time' -ExpandProperty 'Aggregation Start Time')
			}
			catch { [DBNull]::Value };
			try
			{
				$row["Aggregation Duration Seconds"] = [int]$($object | Select-Object 'Aggregation Duration Seconds' -ExpandProperty 'Aggregation Duration Seconds')
			}
			catch { [DBNull]::Value };
			try
			{
				$row["Last Aggregation Start Time"] = [string]$($object | Select-Object 'Last Aggregation Start Time' -ExpandProperty 'Last Aggregation Start Time')
			}
			catch { [DBNull]::Value };
			try
			{
				$row["Last Aggregation Duration Seconds"] = [string]$($object | Select-Object 'Last Aggregation Duration Seconds' -ExpandProperty 'Last Aggregation Duration Seconds')
			}
			catch { [DBNull]::Value };
			try
			{
				$row["Data Last Received Date/Time"] = [string]$($object | Select-Object -ErrorAction Stop 'Data Last Received Date/Time' -ExpandProperty 'Data Last Received Date/Time')
			}
			catch { [DBNull]::Value };
			$gatherGroomingHistoryTable.Rows.Add($row);
			$ErrorActionPreference = 'Continue'
		}
		## - Save changes to the table:
		$gatherGroomingHistoryTable.AcceptChanges();
		
		## - Display custom data created:
		$groomingHistoryGridView.DataSource = $gatherGroomingHistoryTable;
		$groomingHistoryGridView.Sort($groomingHistoryGridView.Columns['Aggregation Date/Time'], 'Descending')
		
		#$groomingHistoryGridView.Sort($groomingHistoryGridView.Columns['Data Last Received Date / Time'], 'Descending')
		$comboboxDatasetName.Enabled = $true
		$comboboxAggregationType.Enabled = $true
		$labelScreenFrozen.Visible = $false
		$labelRowsReturned.Visible = $true
		$labelRowsReturned.Text = "Rows Returned: $($data.Count)"
		$labelLastUpdatedGrooming.Visible = $true
		$checkboxDateTime.Enabled = $true
	}
	
	function Filter-GroomingHistoryFullTableExtended
	{
		$script:gridViewFinal = $script:groomingHistoryFullGridViewResults
		try
		{
			if ($checkboxDateTime.Checked)
			{
				[System.DateTime]$valueToCheck = $datetimepicker1.Value
				$script:gridViewFinal = $script:gridViewFinal | Where-Object -ErrorAction Stop { ($_.'Aggregation Date/Time').ToShortDateString() -eq ($valueToCheck).ToShortDateString() }
			}
			if ($comboboxAggregationType.SelectedItem -ne 'No filter')
			{
				$script:gridViewFinal = $script:gridViewFinal | Where-Object -ErrorAction Stop { $_.'Aggregation Type' -eq $comboboxAggregationType.SelectedItem }
			}
			if ($comboboxDatasetName.SelectedItem -ne 'No filter')
			{
				$script:gridViewFinal = $script:gridViewFinal | Where-Object -ErrorAction Stop { $_.'Dataset Name' -eq $comboboxDatasetName.SelectedItem }
			}
			Filter-GroomingHistoryFullTable -data $script:gridViewFinal
		}
		catch
		{
			$groomingHistoryGridView.DataSource = $null
		}
		
	}
#endregion Source: Globals.ps1

#region Source: MainForm.psf
function Show-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		[ProgressBarOverlay] | Out-Null
	}
	catch
	{
        if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives', 'System.ComponentModel.Primitives', 'System.Drawing.Common', 'System.Runtime'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'  

        }
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition @"
		using System;
		using System.Windows.Forms;
		using System.Drawing;
        namespace SAPIENTypes
        {
		    public class ProgressBarOverlay : System.Windows.Forms.ProgressBar
	        {
                public ProgressBarOverlay() : base() { SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, true); }
	            protected override void WndProc(ref Message m)
	            { 
	                base.WndProc(ref m);
	                if (m.Msg == 0x000F)// WM_PAINT
	                {
	                    if (Style != System.Windows.Forms.ProgressBarStyle.Marquee || !string.IsNullOrEmpty(this.Text))
                        {
                            using (Graphics g = this.CreateGraphics())
                            {
                                using (StringFormat stringFormat = new StringFormat(StringFormatFlags.NoWrap))
                                {
                                    stringFormat.Alignment = StringAlignment.Center;
                                    stringFormat.LineAlignment = StringAlignment.Center;
                                    if (!string.IsNullOrEmpty(this.Text))
                                        g.DrawString(this.Text, this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    else
                                    {
                                        int percent = (int)(((double)Value / (double)Maximum) * 100);
                                        g.DrawString(percent.ToString() + "%", this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    }
                                }
                            }
                        }
	                }
	            }
              
                public string TextOverlay
                {
                    get
                    {
                        return base.Text;
                    }
                    set
                    {
                        base.Text = value;
                        Invalidate();
                    }
                }
	        }
        }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$mainForm = New-Object 'System.Windows.Forms.Form'
	$buttonStagingTables = New-Object 'System.Windows.Forms.Button'
	$buttonRemoveOverrideMP = New-Object 'System.Windows.Forms.Button'
	$buttonImportOverrideMP = New-Object 'System.Windows.Forms.Button'
	$splitter2 = New-Object 'System.Windows.Forms.Splitter'
	$buttonFullHistory = New-Object 'System.Windows.Forms.Button'
	$buttonExportCurrentConfiguration = New-Object 'System.Windows.Forms.Button'
	$labelCurrentUTCTime = New-Object 'System.Windows.Forms.Label'
	$labelLastUpdatedTop = New-Object 'System.Windows.Forms.Label'
	$progressBarTop = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$buttonRefreshDataTop = New-Object 'System.Windows.Forms.Button'
	$buttonGroomingHistory = New-Object 'System.Windows.Forms.Button'
	$labelLastUpdatedBottom = New-Object 'System.Windows.Forms.Label'
	$progressBarBottom = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$actualRetentionDays_GridView = New-Object 'System.Windows.Forms.DataGridView'
	$buttonRefreshDataBottom = New-Object 'System.Windows.Forms.Button'
	$buttonRunGroomingManually = New-Object 'System.Windows.Forms.Button'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$buttonDisclaimer = New-Object 'System.Windows.Forms.Button'
	$labelDays = New-Object 'System.Windows.Forms.Label'
	$DaysSelector = New-Object 'System.Windows.Forms.NumericUpDown'
	$buttonResetToDefaults = New-Object 'System.Windows.Forms.Button'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$labelAggregationType = New-Object 'System.Windows.Forms.Label'
	$labelDatasetName = New-Object 'System.Windows.Forms.Label'
	$buttonGetCurrentSettings = New-Object 'System.Windows.Forms.Button'
	$mainGridView = New-Object 'System.Windows.Forms.DataGridView'
	$DWDBNameTextBox = New-Object 'System.Windows.Forms.TextBox'
	$DWDBServerTextBox = New-Object 'System.Windows.Forms.TextBox'
	$labelDataWarehouseDatabas = New-Object 'System.Windows.Forms.Label'
	$labelDataWarehouseDBServe = New-Object 'System.Windows.Forms.Label'
	$buttonSet = New-Object 'System.Windows.Forms.Button'
	$DataSetName_textbox = New-Object 'System.Windows.Forms.TextBox'
	$AggregationType_textbox = New-Object 'System.Windows.Forms.TextBox'
	$splitter1 = New-Object 'System.Windows.Forms.Splitter'
	$linklabelMoreInformation = New-Object 'System.Windows.Forms.LinkLabel'
	$clockImageLabel = New-Object 'System.Windows.Forms.Label'
	$checkboxIgnoreWarning = New-Object 'System.Windows.Forms.CheckBox'
	$timerJobTracker = New-Object 'System.Windows.Forms.Timer'
	$imagelist1 = New-Object 'System.Windows.Forms.ImageList'
	$timer1 = New-Object 'System.Windows.Forms.Timer'
	$saveBackupConfigDialog = New-Object 'System.Windows.Forms.SaveFileDialog'
	$contextmenustrip1 = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$toolstripmenuitem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$verifyDatasetDaysMatch = New-Object 'System.Windows.Forms.ToolTip'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$mainForm_Load = {
		#TODO: Initialize Form Controls here
		## - Add Records to datatable dataset object:
		#$row = $table.NewRow();
		#$row["Dataset Name"] = "State Dataset";
		#$row["Aggregation Type"] = "Hourly aggregations";
		#$row["Current Retention (Days)"] = "30";
		#$row["Current Size (GB)"] = '0.75 GB';
		#$row["Percent of Database"] = '54.12';
		#$table.Rows.Add($row);
		
		#$row = $table.NewRow();
		#$row["Dataset Name"] = "State Dataset";
		#$row["Aggregation Type"] = "Raw data";
		#$row["Current Retention (Days)"] = "180";
		#$row["Current Size (GB)"] = '0.71 GB';
		#$row["Percent of Database"] = '12.11';
		#$table.Rows.Add($row);
		
		#$row = $table.NewRow();
		#$row["Dataset Name"] = "State Dataset";
		#$row["Aggregation Type"] = "Daily aggregations";
		#$row["Current Retention (Days)"] = "400";
		#$row["Current Size (GB)"] = '0.75 GB';
		#$row["Percent of Database"] = '11.21';
		#$table.Rows.Add($row);
		
		## - Save changes to the table:
		#$table.AcceptChanges();
		
		## - Display custom data created:
		#$mainGridView.DataSource = $table;
		
		#$dataTable = ConvertTo-DataTable -InputObject $test
		#Update-DataGridView -DataGridView $mainGridView -Item $dataTable -DataMember $dataTable
		
		$DaysSelector.Text = ''
		
		
		try
		{
			$script:opsMgrSetupRegKey = Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup' -ErrorAction Stop
			$DWDBServerTextBox.Text = $script:opsMgrSetupRegKey.DataWarehouseDBServerName
			$DWDBNameTextBox.Text = $script:opsMgrSetupRegKey.DataWarehouseDBName
			$DWDBServerTextBox.Tag = $DWDBServerTextBox.Text
			$DWDBNameTextBox.Tag = $DWDBNameTextBox.Text
			$DWDBServerName = $DWDBServerTextBox.Tag
			$DWDBName = $DWDBNameTextBox.Tag
			Get-CurrentSQLDWSettings -ServerInstance $DWDBServerName -Database $DWDBName
			Get-ActualSQLDWRetentionDays -ServerInstance $DWDBServerName -Database $DWDBName
			$mainGridView.Select()
		}
		catch
		{
			$script:opsMgrSetupRegKey = $null
			$buttonGetCurrentSettings.Enabled = $true
		}
	}
	
	$buttonDisclaimer_Click = {
		#TODO: Place custom script here
		Show-Disclaimer_Form_psf
	}
	
	$buttonGetCurrentSettings_Click = {
		#TODO: Place custom script here
		$DWDBServerTextBox.Tag = $DWDBServerTextBox.Text
		$DWDBNameTextBox.Tag = $DWDBNameTextBox.Text
		$DWDBServerName = $DWDBServerTextBox.Tag
		$DWDBName = $DWDBNameTextBox.Tag
		if ($DWDBServerTextBox.Text -and $DWDBNameTextBox.Text)
		{
			#$mainGridView.Refresh()
			Get-CurrentSQLDWSettings -ServerInstance $DWDBServerName -Database $DWDBName
			Get-ActualSQLDWRetentionDays -ServerInstance $DWDBServerName -Database $DWDBName
		}
		else
		{
			Write-EventLog -LogName Application -Source 'SCOMDWTool' -EventID 1 -Message "You need to provide values in BOTH the Data Warehouse Server Name and Database Name fields." -EntryType Warning
			Write-Warning 'You need to provide values in BOTH the Data Warehouse Server Name and Database Name fields.'
			
			Add-Type -AssemblyName PresentationCore, PresentationFramework
			$ButtonType = [System.Windows.MessageBoxButton]::OK
			$MessageIcon = [System.Windows.MessageBoxImage]::Error
			$MessageBody = "You need to provide values in BOTH the Data Warehouse Server Name and Database Name fields."
			$MessageTitle = "Missing Required Fields"
			$Result = [System.Windows.MessageBox]::Show($MessageBody, $MessageTitle, $ButtonType, $MessageIcon)
		}
	}
	
	
	$mainGridView_SelectionChanged = {
		#TODO: Place custom script here
		
		$daysColumn = ($script:mainGridViewResults | Where-Object { ($_.DatasetName -eq $DataSetName_textbox.Text) -and ($_.AggregationTypeName -eq $AggregationType_textbox.Text) } | Select-Object MaxDataAgeDays -ExpandProperty MaxDataAgeDays)
		
		#$mainGridView.SelectedRows | Foreach { Write-Output $mainGridView.Rows[$_.Index].Cells.Value }
		$mainGridView.SelectedRows | ForEach-Object {
			$DataSetName_textbox.Text = $mainGridView.Rows[$_.Index].Cells['Dataset Name'].Value
			$AggregationType_textbox.Text = $mainGridView.Rows[$_.Index].Cells['Aggregation Type'].Value
			$DaysSelector.Value = ($mainGridView.Rows[$_.Index].Cells['Current Retention (Days)'].Value)
		}
		if ($DataSetName_textbox.Text -eq 'Configuration data set')
		{
			$buttonSet.Text = 'Unable to modify the Configuration data set'
			$DaysSelector.Enabled = $false
			$checkboxIgnoreWarning.Enabled = $false
			$buttonRunGroomingManually.Enabled = $false
			$verifyDatasetDaysMatch.SetToolTip($buttonSet, $null)
		}
		elseif ($AggregationType_textbox.Text -eq 'Raw Data' -and $DataSetName_textbox.Text -eq 'Performance data set')
		{
			if ($checkboxIgnoreWarning.Checked)
			{
				$buttonSet.Text = 'Set'
				$checkboxIgnoreWarning.Enabled = $true
				$DaysSelector.Enabled = $false
			}
			else
			{
				$buttonSet.Text = 'Not recommended to modify Raw'
				$checkboxIgnoreWarning.Enabled = $true
				$DaysSelector.Enabled = $false
			}
			$checkboxIgnoreWarning.Visible = $true
			$linklabelMoreInformation.Visible = $true
			$buttonRunGroomingManually.Enabled = $true
			$verifyDatasetDaysMatch.SetToolTip($buttonSet, $null)
		}
		else
		{
			if ($AggregationType_textbox.Text -match "Hourly aggregations|Daily aggregations")
			{
				$verifyDatasetDaysMatch.SetToolTip($buttonSet, "Be sure the Hourly and Daily aggregations retention days match for the '$($DataSetName_textbox.Text)'.")
			}
			else
			{
				$verifyDatasetDaysMatch.SetToolTip($buttonSet, $null)
			}
			$buttonSet.Text = 'Set'
			$DaysSelector.Enabled = $true
			$checkboxIgnoreWarning.Visible = $false
			$linklabelMoreInformation.Visible = $false
			$buttonRunGroomingManually.Enabled = $true
		}
		$buttonSet.Enabled = $false
	}
	
	
	$jobTracker_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
		#Stop any pending jobs
		Stop-JobTracker
	}
	
	$timerJobTracker_Tick = {
		Update-JobTracker
	}
	
	#region Job Tracker
	$JobTrackerList = New-Object System.Collections.ArrayList
	function Add-JobTracker
	{
		<#
			.SYNOPSIS
				Add a new job to the JobTracker and starts the timer.
		
			.DESCRIPTION
				Add a new job to the JobTracker and starts the timer.
		
			.PARAMETER  Name
				The name to assign to the job.
		
			.PARAMETER  JobScript
				The script block that the job will be performing.
				Important: Do not access form controls from this script block.
		
			.PARAMETER ArgumentList
				The arguments to pass to the job.
		
			.PARAMETER  CompletedScript
				The script block that will be called when the job is complete.
				The job is passed as an argument. The Job argument is null when the job fails.
		
			.PARAMETER  UpdateScript
				The script block that will be called each time the timer ticks.
				The job is passed as an argument. Use this to get the Job's progress.
		
			.EXAMPLE
				Add-JobTracker -Name 'JobName' `
				-JobScript {	
					Param($Argument1)#Pass any arguments using the ArgumentList parameter
					#Important: Do not access form controls from this script block.
					Get-CIMInstance Win32_Process -Namespace "root\CIMV2"
				}`
				-CompletedScript {
					Param($Job)		
					$results = Receive-Job -Job $Job
				}`
				-UpdateScript {
					Param($Job)
					#$results = Receive-Job -Job $Job -Keep
				}
		
			.LINK
				
		#>
		
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[string]$Name,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[ScriptBlock]$JobScript,
			$ArgumentList = $null,
			[ScriptBlock]$CompletedScript,
			[ScriptBlock]$UpdateScript)
		
		#Start the Job
		$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
		
		if ($null -ne $job)
		{
			#Create a Custom Object to keep track of the Job & Script Blocks
			$members = @{
				'Job'		     = $Job;
				'CompleteScript' = $CompletedScript;
				'UpdateScript'   = $UpdateScript
			}
			
			$psObject = New-Object System.Management.Automation.PSObject -Property $members
			
			[void]$JobTrackerList.Add($psObject)
			
			#Start the Timer
			if (-not $timerJobTracker.Enabled)
			{
				$timerJobTracker.Start()
			}
		}
		elseif ($null -ne $CompletedScript)
		{
			#Failed
			Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
		}
		
	}
	
	function Update-JobTracker
	{
		<#
			.SYNOPSIS
				Checks the status of each job on the list.
		#>
		
		#Poll the jobs for status updates
		$timerJobTracker.Stop() #Freeze the Timer
		
		for ($index = 0; $index -lt $JobTrackerList.Count; $index++)
		{
			$psObject = $JobTrackerList[$index]
			
			if ($null -ne $psObject)
			{
				if ($null -ne $psObject.Job)
				{
					if ($psObject.Job.State -eq 'Blocked')
					{
						#Try to unblock the job
						Receive-Job $psObject.Job | Out-Null
					}
					elseif ($psObject.Job.State -ne 'Running')
					{
						#Call the Complete Script Block
						if ($null -ne $psObject.CompleteScript)
						{
							#$results = Receive-Job -Job $psObject.Job
							Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
						}
						
						$JobTrackerList.RemoveAt($index)
						Remove-Job -Job $psObject.Job
						$index-- #Step back so we don't skip a job
					}
					elseif ($null -ne $psObject.UpdateScript)
					{
						#Call the Update Script Block
						Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
					}
				}
			}
			else
			{
				$JobTrackerList.RemoveAt($index)
				$index-- #Step back so we don't skip a job
			}
		}
		
		if ($JobTrackerList.Count -gt 0)
		{
			$timerJobTracker.Start() #Resume the timer
		}
	}
	
	function Stop-JobTracker
	{
		<#
			.SYNOPSIS
				Stops and removes all Jobs from the list.
		#>
		#Stop the timer
		$timerJobTracker.Stop()
		
		#Remove all the jobs
		while ($JobTrackerList.Count -gt 0)
		{
			$job = $JobTrackerList[0].Job
			$JobTrackerList.RemoveAt(0)
			Stop-Job $job
			Remove-Job $job
		}
	}
	#endregion
	
	#region Control Helper Functions
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Item,
			[Parameter(Mandatory = $false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($null -eq $Item)
		{
			$DataGridView.DataSource = $null
		}
		elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
			-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterCIMProperties
				This switch removes CIM properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param (
			$InputObject,
			[ValidateNotNull()]
			[System.Data.DataTable]$Table,
			[switch]$RetainColumns,
			[switch]$FilterCIMProperties)
		
		if ($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($null -eq $InputObject)
		{
			$Table.Clear()
			return @( ,$Table)
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @( ,$Table)
	}
	
	
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		if ($DisplayMember)
		{
			$ComboBox.DisplayMember = $DisplayMember
		}
		
		if ($ValueMember)
		{
			$ComboBox.ValueMember = $ValueMember
		}
	}
	
	
	#endregion
	
	$buttonRunGroomingManually_Click = {
		#TODO: Place custom script here
		if ($(Get-SCManagementPack -Name 'Microsoft.SystemCenter.DataWarehouse.Internal.Overrides' | Select-Object Version -ExpandProperty Version) -ne '1.0.0.0')
		{
			Add-Type -AssemblyName PresentationCore, PresentationFramework
			$ButtonType = [System.Windows.MessageBoxButton]::YesNoCancel
			$MessageIcon = [System.Windows.MessageBoxImage]::Question
			$MessageBody = "Verify you have an override in place for the Standard Dataset Maintenance workflows. This should be done BEFORE you run grooming manually, to stop locking issues.`n`nDo you want to continue anyways?"
			$MessageTitle = "Prerequisite"
			$Result = [System.Windows.MessageBox]::Show($MessageBody, $MessageTitle, $ButtonType, $MessageIcon)
		}
		else
		{
			$Result = 'Yes'
		}
		if ($Result -eq 'Yes')
		{
			$DWDBServerName = $DWDBServerTextBox.Tag
			$DWDBName = $DWDBNameTextBox.Tag
			$filteredResults = ($script:mainGridViewResults | Where-Object { ($_.DatasetName -eq $DataSetName_textbox.Text) -and ($_.AggregationTypeName -eq $AggregationType_textbox.Text) })
			#$AggregationTypeId = $filteredResults | Select-Object AggregationTypeId
			$DatasetId = $filteredResults | Select-Object DatasetId -ExpandProperty DatasetId
			$OriginalGroomingIntervalMinutes = $filteredResults | Select-Object GroomingIntervalMinutes -ExpandProperty GroomingIntervalMinutes
			$buttonRunGroomingManually.Tag = $filteredResults.DatasetName
			Run-ManualGrooming -ServerInstance $DWDBServerName -Database $DWDBName -DatasetId $DatasetId
			
			
			Add-Type -AssemblyName PresentationCore, PresentationFramework
			$ButtonType = [System.Windows.MessageBoxButton]::OK
			$MessageIcon = [System.Windows.MessageBoxImage]::Information
			$MessageBody = "Running Manual DW Grooming for: $($filteredResults.DatasetName). This grooming job will get queued, you will need to verify that eventually the data starts to decrease."
			$MessageTitle = "SQL Query Executed"
			$Result = [System.Windows.MessageBox]::Show($MessageBody, $MessageTitle, $ButtonType, $MessageIcon)
		}
		elseif ($Result -eq 'No')
		{
			Add-Type -AssemblyName PresentationCore, PresentationFramework
			$ButtonType = [System.Windows.MessageBoxButton]::OK
			$MessageIcon = [System.Windows.MessageBoxImage]::Information
			$MessageBody = "Be sure you create the overrides for the Standard Dataset Maintenance before attempting to run Manual Grooming again.`n`nYou can do this automatically by pressing the 'Import Override MP' button."
			$MessageTitle = "Prerequisite"
			$Result = [System.Windows.MessageBox]::Show($MessageBody, $MessageTitle, $ButtonType, $MessageIcon)
		}
	}
	
	
	$buttonRefreshDataBottom_Click = {
		#TODO: Place custom script here
		$DWDBServerName = $DWDBServerTextBox.Tag
		$DWDBName = $DWDBNameTextBox.Tag
		Get-ActualSQLDWRetentionDays -ServerInstance $DWDBServerName -Database $DWDBName
	}
	
	$buttonRefreshDataTop_Click = {
		#TODO: Place custom script here
		$DWDBServerName = $DWDBServerTextBox.Tag
		$DWDBName = $DWDBNameTextBox.Tag
		Get-CurrentSQLDWSettings -ServerInstance $DWDBServerName -Database $DWDBName
	}
	
	$mainForm_FormClosing = [System.Windows.Forms.FormClosingEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.FormClosingEventArgs]
		#TODO: Place custom script here
		Stop-JobTracker
		$mainForm.Dispose()
		[GC]::Collect()
	}
	
	$buttonGroomingHistory_Click = {
		#TODO: Place custom script here
		Show-GroomingHistory_Form_psf
	}
	
	$checkboxIgnoreWarning_CheckedChanged = {
		#TODO: Place custom script here
		if ($checkboxIgnoreWarning.Checked)
		{
			$buttonSet.Enabled = $true
			$buttonSet.Text = 'Set'
			$DaysSelector.Enabled = $true
			$linklabelMoreInformation.Visible = $true
		}
		else
		{
			$buttonSet.Enabled = $false
			$buttonSet.Text = 'Not recommended to modify Raw'
			$DaysSelector.Enabled = $false
			$linklabelMoreInformation.Visible = $true
		}
	}
	
	$timer1_Tick = {
		#TODO: Place custom script here
		$utcTime = (Get-Date).ToUniversalTime()
		$labelCurrentUTCTime.Text = "Current UTC Time: $($utcTime.ToUniversalTime())"
	}
	
	$buttonSet_Click = {
		#TODO: Place custom script here
		$DWDBServerName = $DWDBServerTextBox.Tag
		$DWDBName = $DWDBNameTextBox.Tag
		$GroomStoredProcedureName = ($script:mainGridViewResults | Where-Object { ($_.DatasetName -eq $DataSetName_textbox.Text) -and ($_.AggregationTypeName -eq $AggregationType_textbox.Text) } | Select-Object GroomStoredProcedureName -ExpandProperty GroomStoredProcedureName)
		$AggregationTypeId = ($script:mainGridViewResults | Where-Object { ($_.DatasetName -eq $DataSetName_textbox.Text) -and ($_.AggregationTypeName -eq $AggregationType_textbox.Text) } | Select-Object AggregationTypeId -ExpandProperty AggregationTypeId)
		Run-SetRetentionDays -ServerInstance $DWDBServerName -Database $DWDBName -GroomStoredProcedureName $GroomStoredProcedureName -Days $($DaysSelector.Text) -AggregationId $AggregationTypeId
		Get-CurrentSQLDWSettings -ServerInstance $DWDBServerName -Database $DWDBName -DontRemoveGridviewOutput
	}
	
	$DataSetName_textbox_TextChanged = {
		#TODO: Place custom script here
		if ($DataSetName_textbox.Text -match "^State data set|^Performance data set|^Event data set|^Alert data set|^Client Monitoring data set")
		{
			$buttonResetToDefaults.Enabled = $true
		}
		else
		{
			$buttonResetToDefaults.Enabled = $false
		}
	}
	
	$buttonResetToDefaults_Click = {
		#State data set
		#	RAW
		if (($DataSetName_textbox.Text -eq 'State data set') -and ($AggregationType_textbox.Text -eq 'Raw data'))
		{
			$DaysSelector.Value = '180'
		}
		#	Hourly
		elseif (($DataSetName_textbox.Text -eq 'State data set') -and ($AggregationType_textbox.Text -eq 'Hourly aggregations'))
		{
			$DaysSelector.Value = '400'
		}
		#	Daily
		elseif (($DataSetName_textbox.Text -eq 'State data set') -and ($AggregationType_textbox.Text -eq 'Daily aggregations'))
		{
			$DaysSelector.Value = '400'
		}
		
		#Performance data set
		#	RAW
		elseif (($DataSetName_textbox.Text -eq 'Performance data set') -and ($AggregationType_textbox.Text -eq 'Raw data'))
		{
			$DaysSelector.Value = '10'
		}
		#	Hourly
		elseif (($DataSetName_textbox.Text -eq 'Performance data set') -and ($AggregationType_textbox.Text -eq 'Hourly aggregations'))
		{
			$DaysSelector.Value = '400'
		}
		#	Daily
		elseif (($DataSetName_textbox.Text -eq 'Performance data set') -and ($AggregationType_textbox.Text -eq 'Daily aggregations'))
		{
			$DaysSelector.Value = '400'
		}
		
		#Event data set
		#	RAW
		elseif (($DataSetName_textbox.Text -eq 'Event data set') -and ($AggregationType_textbox.Text -eq 'Raw data'))
		{
			$DaysSelector.Value = '100'
		}
		#Alert data set
		#	RAW
		elseif (($DataSetName_textbox.Text -eq 'Alert data set') -and ($AggregationType_textbox.Text -eq 'Raw data'))
		{
			$DaysSelector.Value = '400'
		}
		#Client Monitoring data set
		#	RAW
		elseif (($DataSetName_textbox.Text -eq 'Client Monitoring data set') -and ($AggregationType_textbox.Text -eq 'Raw data'))
		{
			$DaysSelector.Value = '30'
		}
		#	Daily
		elseif (($DataSetName_textbox.Text -eq 'Client Monitoring data set') -and ($AggregationType_textbox.Text -eq 'Daily aggregations'))
		{
			$DaysSelector.Value = '400'
		}
		#Configuration data set
		#	RAW
		elseif (($DataSetName_textbox.Text -eq 'Configuration data set') -and ($AggregationType_textbox.Text -eq 'Raw data'))
		{
			$DaysSelector.Value = '400'
		}
	}
	
	$linklabelMoreInformation_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.LinkLabelLinkClickedEventArgs]
		#TODO: Place custom script here
		Start-Process "https://kevinholman.com/2010/01/05/understanding-and-modifying-data-warehouse-retention-and-grooming/"
	}
	
	$buttonExportCurrentConfiguration_Click = {
		#TODO: Place custom script here
		$saveBackupConfigDialog.FileName = "DWRetentionSettingsBackup-$((Get-Date).ToString("MM_dd_yyyy_hh-mm-tt"))"
		$saveBackupConfigDialog.ShowDialog()
	}
	
	$saveBackupConfigDialog_FileOk = [System.ComponentModel.CancelEventHandler]{
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		#$script:mainGridViewResults
		#Write-Host $saveBackupConfigDialog.Filter.ToString()
		$outputFileData = $script:mainGridViewResults | Select-Object -Property DatasetName, AggregationTypeName, AggregationTypeId, MaxDataAgeDays, GroomingIntervalMinutes, SizeGB, PercentOfDW, GroomStoredProcedureName, DatasetId
		if ($saveBackupConfigDialog.FileName.EndsWith("csv"))
		{
			$outputFileData | Export-Csv -Path $saveBackupConfigDialog.FileName -NoTypeInformation
		}
		elseif ($saveBackupConfigDialog.FileName.EndsWith("txt"))
		{
			$outputFileData | Format-Table * -AutoSize | Out-File -FilePath $saveBackupConfigDialog.FileName
		}
		else
		{
			$outputFileData | Format-Table * -AutoSize | Out-File -FilePath $saveBackupConfigDialog.FileName
		}
		Write-Host "File exported here: $($saveBackupConfigDialog.FileName)" -ForegroundColor Gray
	}
	
	$toolstripmenuitem1_Click = {
		#TODO: Place custom script here
		if ((Show-Disclaimer_Form_psf) -eq 'OK')
		{
			
		}
	}
	
	$buttonFullHistory_Click = {
		#TODO: Place custom script here
		if ((Show-GroomingHistoryFull_Form_psf) -eq 'OK')
		{
			
		}
	}
	
	$buttonImportOverrideMP_Click = {
		#TODO: Place custom script here
		if ($script:opsMgrSetupRegKey)
		{
			Add-Type -AssemblyName PresentationCore, PresentationFramework
			$ButtonType = [System.Windows.MessageBoxButton]::YesNoCancel
			$MessageIcon = [System.Windows.MessageBoxImage]::Question
			$MessageBody = "This will import a Management Pack into your System Center Operations Manager environment that overrides (disables) the Standard Data Warehouse Data Set maintenance rule.`n`nAre you sure you want to continue?"
			$MessageTitle = "Prerequisite for Management Pack Import"
			$Result = [System.Windows.MessageBox]::Show($MessageBody, $MessageTitle, $ButtonType, $MessageIcon)
			
			if ($Result -eq 'Yes')
			{
				if ($(Get-SCManagementPack -Name 'Microsoft.SystemCenter.DataWarehouse.Internal.Overrides' | Select-Object Version -ExpandProperty Version) -ne '1.0.0.0')
				{
					$ManagementPackXML = @'
<?xml version="1.0" encoding="utf-8"?><ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>Microsoft.SystemCenter.DataWarehouse.Internal.Overrides</ID>
      <Version>1.0.0.0</Version>
    </Identity>
    <Name>Data Warehouse Internal Library (Overrides)</Name>
    <References>
      <Reference Alias="SystemCenter">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.2.11719.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SystemCenter1">
        <ID>Microsoft.SystemCenter.DataWarehouse.Library</ID>
        <Version>7.2.11719.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SystemCenter2">
        <ID>Microsoft.SystemCenter.DataWarehouse.Internal</ID>
        <Version>7.2.11719.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <Monitoring>
    <Overrides>
      <RulePropertyOverride ID="Aliaseb2c1370b7414915b2306ab98b340470OverrideForRuleMicrosoftSystemCenterDataWarehouseStandardDataSetMaintenanceForContextMicrosoftSystemCenterDataWarehouseStandardDataSet" Context="SystemCenter1!Microsoft.SystemCenter.DataWarehouse.StandardDataSet" Enforced="true" Rule="SystemCenter2!Microsoft.SystemCenter.DataWarehouse.StandardDataSetMaintenance" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
    </Overrides>
  </Monitoring>
  <Presentation>
    <Folders>
      <Folder ID="Folder_64d50df5e7da40c687abfe53c430ef49" Accessibility="Public" ParentFolder="SystemCenter!Microsoft.SystemCenter.Monitoring.ViewFolder.Root" />
    </Folders>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="false">
      <DisplayStrings>
        <DisplayString ElementID="Microsoft.SystemCenter.DataWarehouse.Internal.Overrides">
          <Name>Data Warehouse Internal Library (Overrides)</Name>
          <Description>This Management Pack contains the override for the rule for the 'Standard Data Warehouse Data Set maintenance rule'. This Management Pack is imported as part of the System Center Operations Manager - Data Warehouse Grooming Tool.</Description>
        </DisplayString>
        <DisplayString ElementID="Folder_64d50df5e7da40c687abfe53c430ef49">
          <Name>Data Warehouse Internal Library (Overrides)</Name>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles>
        <KnowledgeArticle ElementID="Microsoft.SystemCenter.DataWarehouse.Internal.Overrides" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:wx="http://schemas.microsoft.com/office/word/2003/auxHint" xmlns:w="http://schemas.microsoft.com/office/word/2003/wordml" xmlns:ns0="http://tempuri.org/XMLSchema1.xsd" xmlns:aml="http://schemas.microsoft.com/aml/2001/core" xmlns:wpc="http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas" xmlns:cx="http://schemas.microsoft.com/office/drawing/2014/chartex" xmlns:cx1="http://schemas.microsoft.com/office/drawing/2015/9/8/chartex" xmlns:cx2="http://schemas.microsoft.com/office/drawing/2015/10/21/chartex" xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:w10="urn:schemas-microsoft-com:office:word" xmlns:wne="http://schemas.microsoft.com/office/word/2006/wordml" xmlns:wsp="http://schemas.microsoft.com/office/word/2003/wordml/sp2">
              <maml:title>Summary</maml:title>
              <maml:para>This Management Pack contains the override needed to disable the Standard Data Warehouse Data Set maintenance rule.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:wx="http://schemas.microsoft.com/office/word/2003/auxHint" xmlns:w="http://schemas.microsoft.com/office/word/2003/wordml" xmlns:ns0="http://tempuri.org/XMLSchema1.xsd" xmlns:aml="http://schemas.microsoft.com/aml/2001/core" xmlns:wpc="http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas" xmlns:cx="http://schemas.microsoft.com/office/drawing/2014/chartex" xmlns:cx1="http://schemas.microsoft.com/office/drawing/2015/9/8/chartex" xmlns:cx2="http://schemas.microsoft.com/office/drawing/2015/10/21/chartex" xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:w10="urn:schemas-microsoft-com:office:word" xmlns:wne="http://schemas.microsoft.com/office/word/2006/wordml" xmlns:wsp="http://schemas.microsoft.com/office/word/2003/wordml/sp2">
              <maml:title>Additional</maml:title>
              <maml:para>This management pack was imported so that the manual execution of a groom job could run against the System Center Operations Manager Data Warehouse database without any locking issues.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:wx="http://schemas.microsoft.com/office/word/2003/auxHint" xmlns:w="http://schemas.microsoft.com/office/word/2003/wordml" xmlns:ns0="http://tempuri.org/XMLSchema1.xsd" xmlns:aml="http://schemas.microsoft.com/aml/2001/core" xmlns:wpc="http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas" xmlns:cx="http://schemas.microsoft.com/office/drawing/2014/chartex" xmlns:cx1="http://schemas.microsoft.com/office/drawing/2015/9/8/chartex" xmlns:cx2="http://schemas.microsoft.com/office/drawing/2015/10/21/chartex" xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:w10="urn:schemas-microsoft-com:office:word" xmlns:wne="http://schemas.microsoft.com/office/word/2006/wordml" xmlns:wsp="http://schemas.microsoft.com/office/word/2003/wordml/sp2">
              <maml:title>External</maml:title>
              <maml:para>
                <maml:navigationLink>
                  <maml:linkText>https://blakedrumm.com/blog/scom-dw-grooming-tool/</maml:linkText>
                  <maml:uri href="https://blakedrumm.com/blog/scom-dw-grooming-tool/" />
                </maml:navigationLink>
              </maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
      </KnowledgeArticles>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>
'@
					$ManagementPackXML | Out-File -FilePath "$env:USERPROFILE\Desktop\Microsoft.SystemCenter.DataWarehouse.Internal.Overrides.xml" -Encoding utf8 -Force
					Add-Type -AssemblyName PresentationCore, PresentationFramework
					$ButtonType = [System.Windows.MessageBoxButton]::OK
					$MessageIcon = [System.Windows.MessageBoxImage]::Asterisk
					$MessageBody = "The Management Pack has been written here: $env:USERPROFILE\Desktop\Microsoft.SystemCenter.DataWarehouse.Internal.Overrides.xml"
					$MessageTitle = "Writing Management Pack to File"
					$Result = [System.Windows.MessageBox]::Show($MessageBody, $MessageTitle, $ButtonType, $MessageIcon)
					Import-SCManagementPack -FullName "$env:USERPROFILE\Desktop\Microsoft.SystemCenter.DataWarehouse.Internal.Overrides.xml"
					Add-Type -AssemblyName PresentationCore, PresentationFramework
					$ButtonType = [System.Windows.MessageBoxButton]::OK
					$MessageIcon = [System.Windows.MessageBoxImage]::Asterisk
					$MessageBody = "Imported the Management Pack from here: $env:USERPROFILE\Desktop\Microsoft.SystemCenter.DataWarehouse.Internal.Overrides.xml`n`nName:`nMicrosoft.SystemCenter.DataWarehouse.Internal.Overrides`n`nDisplay Name:`nData Warehouse Internal Library (Overrides)"
					$MessageTitle = "Importing Management Pack from File"
					$Result = [System.Windows.MessageBox]::Show($MessageBody, $MessageTitle, $ButtonType, $MessageIcon)
				}
				else
				{
					Add-Type -AssemblyName PresentationCore, PresentationFramework
					$ButtonType = [System.Windows.MessageBoxButton]::OK
					$MessageIcon = [System.Windows.MessageBoxImage]::Asterisk
					$MessageBody = "The Management Pack is already imported and current. You may need to wait some time before you run grooming manually, to ensure the Management Pack override has been processed and loaded into the Configuration."
					$MessageTitle = "Management Pack is already imported"
					$Result = [System.Windows.MessageBox]::Show($MessageBody, $MessageTitle, $ButtonType, $MessageIcon)
				}
				
			}
			else
			{
				Add-Type -AssemblyName PresentationCore, PresentationFramework
				$ButtonType = [System.Windows.MessageBoxButton]::OK
				$MessageIcon = [System.Windows.MessageBoxImage]::Information
				$MessageBody = "Nothing has been changed. Override Management Pack was not imported."
				$MessageTitle = "Did not Import Management Pack"
				$Result = [System.Windows.MessageBox]::Show($MessageBody, $MessageTitle, $ButtonType, $MessageIcon)
			}
		}
		else
		{
			Add-Type -AssemblyName PresentationCore, PresentationFramework
			$ButtonType = [System.Windows.MessageBoxButton]::OK
			$MessageIcon = [System.Windows.MessageBoxImage]::Error
			$MessageBody = "For the Import MP button to work you need to run this application on a System Center Operations Manager - Management Server."
			$MessageTitle = "Prerequisite for Management Pack Import"
			$Result = [System.Windows.MessageBox]::Show($MessageBody, $MessageTitle, $ButtonType, $MessageIcon)
		}
	}
	
	$buttonRemoveOverrideMP_Click = {
		#TODO: Place custom script here
		if ($(Get-SCManagementPack -Name 'Microsoft.SystemCenter.DataWarehouse.Internal.Overrides'))
		{
			Add-Type -AssemblyName PresentationCore, PresentationFramework
			$ButtonType = [System.Windows.MessageBoxButton]::YesNoCancel
			$MessageIcon = [System.Windows.MessageBoxImage]::Question
			$MessageBody = "Are you sure you want to remove the Override Management Pack.`n`nName:`nMicrosoft.SystemCenter.DataWarehouse.Internal.Overrides`n`nDisplay Name:`nData Warehouse Internal Library (Overrides)"
			$MessageTitle = "Verify the Management Pack removal is intended"
			$Result = [System.Windows.MessageBox]::Show($MessageBody, $MessageTitle, $ButtonType, $MessageIcon)
			if ($Result -eq 'Yes')
			{
				Get-SCManagementPack -Name 'Microsoft.SystemCenter.DataWarehouse.Internal.Overrides' | Remove-SCManagementPack
				Add-Type -AssemblyName PresentationCore, PresentationFramework
				$ButtonType = [System.Windows.MessageBoxButton]::OK
				$MessageIcon = [System.Windows.MessageBoxImage]::Asterisk
				$MessageBody = "Removal was successful for the Management Pack!`n`nName:`nMicrosoft.SystemCenter.DataWarehouse.Internal.Overrides`n`nDisplay Name:`nData Warehouse Internal Library (Overrides)"
				$MessageTitle = "Successfully removed the Override Management Pack"
				$Result = [System.Windows.MessageBox]::Show($MessageBody, $MessageTitle, $ButtonType, $MessageIcon)
			}
		}
		else
		{
			Add-Type -AssemblyName PresentationCore, PresentationFramework
			$ButtonType = [System.Windows.MessageBoxButton]::OK
			$MessageIcon = [System.Windows.MessageBoxImage]::Asterisk
			$MessageBody = "The Management Pack was not found in your System Center Operations Manager Environment.`n`nName:`nMicrosoft.SystemCenter.DataWarehouse.Internal.Overrides`n`nDisplay Name:`nData Warehouse Internal Library (Overrides)"
			$MessageTitle = "Override Management Pack not found"
			$Result = [System.Windows.MessageBox]::Show($MessageBody, $MessageTitle, $ButtonType, $MessageIcon)
		}
	}
	
	$buttonStagingTables_Click={
		#TODO: Place custom script here
		Show-GroomingStaging_psf
	}
	
	$DaysSelector_ValueChanged={
		#TODO: Place custom script here
		$daysColumn = ($script:mainGridViewResults | Where-Object { ($_.DatasetName -eq $DataSetName_textbox.Text) -and ($_.AggregationTypeName -eq $AggregationType_textbox.Text) } | Select-Object MaxDataAgeDays -ExpandProperty MaxDataAgeDays)
		if ($DaysSelector.Value -eq $daysColumn)
		{
			$buttonSet.Enabled = $false
		}
		else
		{
			$buttonSet.Enabled = $true
		}
	}
	
	$mainGridView_KeyUp=[System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		#TODO: Place custom script here
		if ($_.KeyCode -eq 'F5')
		{
			$buttonRefreshDataTop_Click.Invoke()
		}
	}
	
	$actualRetentionDays_GridView_KeyUp=[System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		#TODO: Place custom script here
		if ($_.KeyCode -eq 'F5')
		{
			$buttonRefreshDataBottom_Click.Invoke()
		}
	}
	
	$buttonRefreshDataBottom_KeyUp=[System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		#TODO: Place custom script here
		if ($_.KeyCode -eq 'F5')
		{
			$buttonRefreshDataBottom_Click.Invoke()
		}
	}
	
	$buttonRefreshDataTop_KeyUp=[System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		#TODO: Place custom script here
		if ($_.KeyCode -eq 'F5')
		{
			$buttonRefreshDataBottom_Click.Invoke()
		}
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$mainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_actualRetentionDays_GridView = $actualRetentionDays_GridView.SelectedCells
		if ($actualRetentionDays_GridView.SelectionMode -eq 'FullRowSelect')
		{ $script:MainForm_actualRetentionDays_GridView_SelectedObjects = $actualRetentionDays_GridView.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:MainForm_actualRetentionDays_GridView_SelectedObjects = $actualRetentionDays_GridView.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $actualRetentionDays_GridView.Rows[$_].DataBoundItem } } }
		$script:MainForm_DaysSelector = $DaysSelector.Value
		$script:MainForm_mainGridView = $mainGridView.SelectedCells
		if ($mainGridView.SelectionMode -eq 'FullRowSelect')
		{ $script:MainForm_mainGridView_SelectedObjects = $mainGridView.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:MainForm_mainGridView_SelectedObjects = $mainGridView.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $mainGridView.Rows[$_].DataBoundItem } } }
		$script:MainForm_DWDBNameTextBox = $DWDBNameTextBox.Text
		$script:MainForm_DWDBServerTextBox = $DWDBServerTextBox.Text
		$script:MainForm_DataSetName_textbox = $DataSetName_textbox.Text
		$script:MainForm_AggregationType_textbox = $AggregationType_textbox.Text
		$script:MainForm_checkboxIgnoreWarning = $checkboxIgnoreWarning.Checked
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonStagingTables.remove_Click($buttonStagingTables_Click)
			$buttonRemoveOverrideMP.remove_Click($buttonRemoveOverrideMP_Click)
			$buttonImportOverrideMP.remove_Click($buttonImportOverrideMP_Click)
			$buttonFullHistory.remove_Click($buttonFullHistory_Click)
			$buttonExportCurrentConfiguration.remove_Click($buttonExportCurrentConfiguration_Click)
			$buttonRefreshDataTop.remove_Click($buttonRefreshDataTop_Click)
			$buttonRefreshDataTop.remove_KeyUp($buttonRefreshDataTop_KeyUp)
			$buttonGroomingHistory.remove_Click($buttonGroomingHistory_Click)
			$actualRetentionDays_GridView.remove_KeyUp($actualRetentionDays_GridView_KeyUp)
			$buttonRefreshDataBottom.remove_Click($buttonRefreshDataBottom_Click)
			$buttonRefreshDataBottom.remove_KeyUp($buttonRefreshDataBottom_KeyUp)
			$buttonRunGroomingManually.remove_Click($buttonRunGroomingManually_Click)
			$buttonDisclaimer.remove_Click($buttonDisclaimer_Click)
			$DaysSelector.remove_ValueChanged($DaysSelector_ValueChanged)
			$buttonResetToDefaults.remove_Click($buttonResetToDefaults_Click)
			$buttonGetCurrentSettings.remove_Click($buttonGetCurrentSettings_Click)
			$mainGridView.remove_SelectionChanged($mainGridView_SelectionChanged)
			$mainGridView.remove_KeyUp($mainGridView_KeyUp)
			$buttonSet.remove_Click($buttonSet_Click)
			$DataSetName_textbox.remove_TextChanged($DataSetName_textbox_TextChanged)
			$linklabelMoreInformation.remove_LinkClicked($linklabelMoreInformation_LinkClicked)
			$checkboxIgnoreWarning.remove_CheckedChanged($checkboxIgnoreWarning_CheckedChanged)
			$mainForm.remove_FormClosing($mainForm_FormClosing)
			$mainForm.remove_FormClosed($jobTracker_FormClosed)
			$mainForm.remove_Load($mainForm_Load)
			$timerJobTracker.remove_Tick($timerJobTracker_Tick)
			$timer1.remove_Tick($timer1_Tick)
			$saveBackupConfigDialog.remove_FileOk($saveBackupConfigDialog_FileOk)
			$toolstripmenuitem1.remove_Click($toolstripmenuitem1_Click)
			$mainForm.remove_Load($Form_StateCorrection_Load)
			$mainForm.remove_Closing($Form_StoreValues_Closing)
			$mainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$mainForm.SuspendLayout()
	$DaysSelector.BeginInit()
	$contextmenustrip1.SuspendLayout()
	#
	# mainForm
	#
	$mainForm.Controls.Add($buttonStagingTables)
	$mainForm.Controls.Add($buttonRemoveOverrideMP)
	$mainForm.Controls.Add($buttonImportOverrideMP)
	$mainForm.Controls.Add($splitter2)
	$mainForm.Controls.Add($buttonFullHistory)
	$mainForm.Controls.Add($buttonExportCurrentConfiguration)
	$mainForm.Controls.Add($labelCurrentUTCTime)
	$mainForm.Controls.Add($labelLastUpdatedTop)
	$mainForm.Controls.Add($progressBarTop)
	$mainForm.Controls.Add($buttonRefreshDataTop)
	$mainForm.Controls.Add($buttonGroomingHistory)
	$mainForm.Controls.Add($labelLastUpdatedBottom)
	$mainForm.Controls.Add($progressBarBottom)
	$mainForm.Controls.Add($actualRetentionDays_GridView)
	$mainForm.Controls.Add($buttonRefreshDataBottom)
	$mainForm.Controls.Add($buttonRunGroomingManually)
	$mainForm.Controls.Add($picturebox1)
	$mainForm.Controls.Add($buttonDisclaimer)
	$mainForm.Controls.Add($labelDays)
	$mainForm.Controls.Add($DaysSelector)
	$mainForm.Controls.Add($buttonResetToDefaults)
	$mainForm.Controls.Add($buttonExit)
	$mainForm.Controls.Add($labelAggregationType)
	$mainForm.Controls.Add($labelDatasetName)
	$mainForm.Controls.Add($buttonGetCurrentSettings)
	$mainForm.Controls.Add($mainGridView)
	$mainForm.Controls.Add($DWDBNameTextBox)
	$mainForm.Controls.Add($DWDBServerTextBox)
	$mainForm.Controls.Add($labelDataWarehouseDatabas)
	$mainForm.Controls.Add($labelDataWarehouseDBServe)
	$mainForm.Controls.Add($buttonSet)
	$mainForm.Controls.Add($DataSetName_textbox)
	$mainForm.Controls.Add($AggregationType_textbox)
	$mainForm.Controls.Add($splitter1)
	$mainForm.Controls.Add($linklabelMoreInformation)
	$mainForm.Controls.Add($clockImageLabel)
	$mainForm.Controls.Add($checkboxIgnoreWarning)
	$mainForm.AcceptButton = $buttonSet
	$mainForm.AutoScaleDimensions = New-Object System.Drawing.SizeF(96, 96)
	$mainForm.AutoScaleMode = 'Dpi'
	$mainForm.AutoSizeMode = 'GrowAndShrink'
	$mainForm.CancelButton = $buttonExit
	$mainForm.ClientSize = New-Object System.Drawing.Size(1033, 809)
	$mainForm.ContextMenuStrip = $contextmenustrip1
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABNTeXN0
ZW0uRHJhd2luZy5JY29uAgAAAAhJY29uRGF0YQhJY29uU2l6ZQcEAhNTeXN0ZW0uRHJhd2luZy5T
aXplAgAAAAIAAAAJAwAAAAX8////E1N5c3RlbS5EcmF3aW5nLlNpemUCAAAABXdpZHRoBmhlaWdo
dAAACAgCAAAAAAEAAAABAAAPAwAAAHBPAAACAAABAAEAAAAAAAEAIABaTwAAFgAAAIlQTkcNChoK
AAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAAAAFvck5UAc+id5oAAE8USURBVHja7X0HeFzllfZQ
AiQUAw6Q3U12/+xmd5OQyLY0mlFxkdVnRjMa1WnSaIqqm+Re5AaWMd2ATTHdGEyz6cbgjhu2wRQD
pgmyKYQOoYWafP855xbdmbnTVHxH0vc9z3nGliVZmvu97+nn6HT88MMPP/zwww8//PDDDz/88MMP
P/zwww8//PDDDz/8pNDJtQR1E8xNuixbUJdVjhLQZdNro/h3dcm2CaL28Vhfp/q97AH4Gfy6XFuA
PxB++OnvY7QGdPoSjwBsEaDZCgAa7SDmwPHw5x8DAYwAEJ+bXd747/D380GyQYpBKkE8IEGQKfA5
M0Bmwp/ngcwXZQ5+HF47QNpAfCBOEBvIRBA9EMv/gPwr/Hkk/Cynw89xUrq1NYIUjBIJwc9mL1ys
O7+mhj9IfviJdzIqg7rzXc2RmtbeqMuxNR6PoIO/nwfA+x28loIEQDpBVoPcC7Id5EWQP4G8B/Ix
yGcgX4F8A/I9yD9BWBz5AeQ7kK9BvgT5G8iHIO+CdIMcAnkc5A6Qy0CQOFwg4wH0/2VEgihv/HF2
mZrVENBljF+py+akwM9wPwarX6e3NIQAJAe1vC1wIvz5bBDQuEEzSDvItSCbQF4Wwf25CFKWIoJk
8SnIn0EOgtwHcglIC0gByH+AnK7r0oVZC406vakJ3otGfiH4Gdonp6JVl+/qAr9ZMN0J8BVoKjee
DH/+NxEoCPabQPaDvAPyRYJaO1XlB9GCeAvkCZDLwUpA90IP78M5BnvTiUqXxlAR1E0sqdfpli7l
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
5G8AAAAASUVORK5CYIIL'))
	#endregion
	$mainForm.Icon = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$mainForm.MinimumSize = New-Object System.Drawing.Size(1045, 630)
	$mainForm.Name = 'mainForm'
	$mainForm.StartPosition = 'CenterScreen'
	$mainForm.Text = 'System Center Operations Manager - Data Warehouse Grooming Tool'
	$mainForm.add_FormClosing($mainForm_FormClosing)
	$mainForm.add_FormClosed($jobTracker_FormClosed)
	$mainForm.add_Load($mainForm_Load)
	#
	# buttonStagingTables
	#
	$buttonStagingTables.Anchor = 'Bottom, Left'
	$buttonStagingTables.AutoSize = $True
	$buttonStagingTables.Cursor = 'Hand'
	$buttonStagingTables.Enabled = $False
	$buttonStagingTables.ImageAlign = 'MiddleLeft'
	$buttonStagingTables.ImageIndex = 10
	$buttonStagingTables.ImageList = $imagelist1
	$buttonStagingTables.Location = New-Object System.Drawing.Point(553, 472)
	$buttonStagingTables.Name = 'buttonStagingTables'
	$buttonStagingTables.Size = New-Object System.Drawing.Size(106, 53)
	$buttonStagingTables.TabIndex = 16
	$buttonStagingTables.Text = 'Staging Tables'
	$buttonStagingTables.TextAlign = 'MiddleRight'
	$buttonStagingTables.UseCompatibleTextRendering = $True
	$buttonStagingTables.add_Click($buttonStagingTables_Click)
	#
	# buttonRemoveOverrideMP
	#
	$buttonRemoveOverrideMP.Anchor = 'Bottom, Left'
	$buttonRemoveOverrideMP.AutoSize = $True
	$buttonRemoveOverrideMP.Cursor = 'Hand'
	$buttonRemoveOverrideMP.Enabled = $False
	$buttonRemoveOverrideMP.ImageAlign = 'MiddleLeft'
	$buttonRemoveOverrideMP.ImageIndex = 11
	$buttonRemoveOverrideMP.ImageList = $imagelist1
	$buttonRemoveOverrideMP.Location = New-Object System.Drawing.Point(172, 501)
	$buttonRemoveOverrideMP.Name = 'buttonRemoveOverrideMP'
	$buttonRemoveOverrideMP.Size = New-Object System.Drawing.Size(152, 24)
	$buttonRemoveOverrideMP.TabIndex = 13
	$buttonRemoveOverrideMP.Text = '&Remove Override MP'
	$buttonRemoveOverrideMP.UseCompatibleTextRendering = $True
	$buttonRemoveOverrideMP.UseVisualStyleBackColor = $True
	$buttonRemoveOverrideMP.add_Click($buttonRemoveOverrideMP_Click)
	#
	# buttonImportOverrideMP
	#
	$buttonImportOverrideMP.Anchor = 'Bottom, Left'
	$buttonImportOverrideMP.AutoSize = $True
	$buttonImportOverrideMP.Cursor = 'Hand'
	$buttonImportOverrideMP.Enabled = $False
	$buttonImportOverrideMP.ImageAlign = 'MiddleLeft'
	$buttonImportOverrideMP.ImageIndex = 12
	$buttonImportOverrideMP.ImageList = $imagelist1
	$buttonImportOverrideMP.Location = New-Object System.Drawing.Point(172, 472)
	$buttonImportOverrideMP.Name = 'buttonImportOverrideMP'
	$buttonImportOverrideMP.Size = New-Object System.Drawing.Size(152, 24)
	$buttonImportOverrideMP.TabIndex = 12
	$buttonImportOverrideMP.Text = '&Import Override MP'
	$buttonImportOverrideMP.UseCompatibleTextRendering = $True
	$buttonImportOverrideMP.UseVisualStyleBackColor = $True
	$buttonImportOverrideMP.add_Click($buttonImportOverrideMP_Click)
	#
	# splitter2
	#
	$splitter2.Location = New-Object System.Drawing.Point(0, 0)
	$splitter2.Name = 'splitter2'
	$splitter2.Size = New-Object System.Drawing.Size(3, 531)
	$splitter2.TabIndex = 0
	$splitter2.TabStop = $False
	#
	# buttonFullHistory
	#
	$buttonFullHistory.Anchor = 'Bottom, Left'
	$buttonFullHistory.Cursor = 'Hand'
	$buttonFullHistory.Enabled = $False
	$buttonFullHistory.ImageAlign = 'MiddleLeft'
	$buttonFullHistory.ImageIndex = 9
	$buttonFullHistory.ImageList = $imagelist1
	$buttonFullHistory.Location = New-Object System.Drawing.Point(455, 472)
	$buttonFullHistory.Name = 'buttonFullHistory'
	$buttonFullHistory.Size = New-Object System.Drawing.Size(92, 53)
	$buttonFullHistory.TabIndex = 15
	$buttonFullHistory.Text = '&Full History'
	$buttonFullHistory.TextAlign = 'MiddleRight'
	$buttonFullHistory.UseCompatibleTextRendering = $True
	$buttonFullHistory.UseVisualStyleBackColor = $True
	$buttonFullHistory.add_Click($buttonFullHistory_Click)
	#
	# buttonExportCurrentConfiguration
	#
	$buttonExportCurrentConfiguration.Anchor = 'Top, Right'
	$buttonExportCurrentConfiguration.AutoSizeMode = 'GrowAndShrink'
	$buttonExportCurrentConfiguration.Cursor = 'Hand'
	$buttonExportCurrentConfiguration.Enabled = $False
	$buttonExportCurrentConfiguration.ImageAlign = 'MiddleLeft'
	$buttonExportCurrentConfiguration.ImageIndex = 7
	$buttonExportCurrentConfiguration.ImageList = $imagelist1
	$buttonExportCurrentConfiguration.Location = New-Object System.Drawing.Point(849, 63)
	$buttonExportCurrentConfiguration.MinimumSize = New-Object System.Drawing.Size(165, 23)
	$buttonExportCurrentConfiguration.Name = 'buttonExportCurrentConfiguration'
	$buttonExportCurrentConfiguration.Size = New-Object System.Drawing.Size(171, 23)
	$buttonExportCurrentConfiguration.TabIndex = 5
	$buttonExportCurrentConfiguration.Text = '&Export Current Configuration'
	$buttonExportCurrentConfiguration.TextAlign = 'MiddleRight'
	$buttonExportCurrentConfiguration.UseVisualStyleBackColor = $True
	$buttonExportCurrentConfiguration.add_Click($buttonExportCurrentConfiguration_Click)
	#
	# labelCurrentUTCTime
	#
	$labelCurrentUTCTime.AutoSize = $True
	$labelCurrentUTCTime.ImageIndex = 8
	$labelCurrentUTCTime.Location = New-Object System.Drawing.Point(506, 5)
	$labelCurrentUTCTime.Name = 'labelCurrentUTCTime'
	$labelCurrentUTCTime.Size = New-Object System.Drawing.Size(95, 13)
	$labelCurrentUTCTime.TabIndex = 31
	$labelCurrentUTCTime.Text = 'Current UTC Time:'
	$labelCurrentUTCTime.Visible = $False
	#
	# labelLastUpdatedTop
	#
	$labelLastUpdatedTop.AutoSize = $True
	$labelLastUpdatedTop.Location = New-Object System.Drawing.Point(126, 73)
	$labelLastUpdatedTop.Name = 'labelLastUpdatedTop'
	$labelLastUpdatedTop.Size = New-Object System.Drawing.Size(74, 13)
	$labelLastUpdatedTop.TabIndex = 29
	$labelLastUpdatedTop.Text = 'Last Updated:'
	$labelLastUpdatedTop.Visible = $False
	#
	# progressBarTop
	#
	$progressBarTop.Cursor = 'AppStarting'
	$progressBarTop.Location = New-Object System.Drawing.Point(12, 53)
	$progressBarTop.Name = 'progressBarTop'
	$progressBarTop.Size = New-Object System.Drawing.Size(108, 10)
	$progressBarTop.Style = 'Marquee'
	$progressBarTop.TabIndex = 28
	$progressBarTop.Visible = $False
	#
	# buttonRefreshDataTop
	#
	$buttonRefreshDataTop.AutoSize = $True
	$buttonRefreshDataTop.Cursor = 'Hand'
	$buttonRefreshDataTop.Enabled = $False
	$buttonRefreshDataTop.ImageIndex = 0
	$buttonRefreshDataTop.ImageList = $imagelist1
	$buttonRefreshDataTop.Location = New-Object System.Drawing.Point(12, 68)
	$buttonRefreshDataTop.Name = 'buttonRefreshDataTop'
	$buttonRefreshDataTop.Size = New-Object System.Drawing.Size(108, 23)
	$buttonRefreshDataTop.TabIndex = 4
	$buttonRefreshDataTop.Text = 'Refresh Da&ta'
	$buttonRefreshDataTop.TextImageRelation = 'ImageBeforeText'
	$buttonRefreshDataTop.UseVisualStyleBackColor = $True
	$buttonRefreshDataTop.add_Click($buttonRefreshDataTop_Click)
	$buttonRefreshDataTop.add_KeyUp($buttonRefreshDataTop_KeyUp)
	#
	# buttonGroomingHistory
	#
	$buttonGroomingHistory.Anchor = 'Bottom, Left'
	$buttonGroomingHistory.AutoSize = $True
	$buttonGroomingHistory.Cursor = 'Hand'
	$buttonGroomingHistory.Enabled = $False
	$buttonGroomingHistory.ImageAlign = 'MiddleLeft'
	$buttonGroomingHistory.ImageIndex = 5
	$buttonGroomingHistory.ImageList = $imagelist1
	$buttonGroomingHistory.Location = New-Object System.Drawing.Point(330, 472)
	$buttonGroomingHistory.Name = 'buttonGroomingHistory'
	$buttonGroomingHistory.Size = New-Object System.Drawing.Size(119, 53)
	$buttonGroomingHistory.TabIndex = 14
	$buttonGroomingHistory.Text = 'Grooming &History'
	$buttonGroomingHistory.TextAlign = 'MiddleRight'
	$buttonGroomingHistory.UseCompatibleTextRendering = $True
	$buttonGroomingHistory.UseVisualStyleBackColor = $True
	$buttonGroomingHistory.add_Click($buttonGroomingHistory_Click)
	#
	# labelLastUpdatedBottom
	#
	$labelLastUpdatedBottom.Anchor = 'Bottom, Left'
	$labelLastUpdatedBottom.AutoSize = $True
	$labelLastUpdatedBottom.Location = New-Object System.Drawing.Point(125, 559)
	$labelLastUpdatedBottom.Name = 'labelLastUpdatedBottom'
	$labelLastUpdatedBottom.Size = New-Object System.Drawing.Size(74, 13)
	$labelLastUpdatedBottom.TabIndex = 25
	$labelLastUpdatedBottom.Text = 'Last Updated:'
	$labelLastUpdatedBottom.Visible = $False
	#
	# progressBarBottom
	#
	$progressBarBottom.Anchor = 'Bottom, Left'
	$progressBarBottom.Cursor = 'AppStarting'
	$progressBarBottom.Location = New-Object System.Drawing.Point(12, 538)
	$progressBarBottom.Name = 'progressBarBottom'
	$progressBarBottom.Size = New-Object System.Drawing.Size(108, 10)
	$progressBarBottom.Style = 'Marquee'
	$progressBarBottom.TabIndex = 24
	$progressBarBottom.Visible = $False
	#
	# actualRetentionDays_GridView
	#
	$actualRetentionDays_GridView.AllowUserToAddRows = $False
	$actualRetentionDays_GridView.AllowUserToDeleteRows = $False
	$actualRetentionDays_GridView.AllowUserToOrderColumns = $True
	$actualRetentionDays_GridView.Anchor = 'Bottom, Left, Right'
	$actualRetentionDays_GridView.AutoSizeColumnsMode = 'Fill'
	$actualRetentionDays_GridView.ColumnHeadersHeightSizeMode = 'AutoSize'
	$actualRetentionDays_GridView.EditMode = 'EditProgrammatically'
	$actualRetentionDays_GridView.Location = New-Object System.Drawing.Point(11, 583)
	$actualRetentionDays_GridView.Name = 'actualRetentionDays_GridView'
	$actualRetentionDays_GridView.ReadOnly = $True
	$actualRetentionDays_GridView.RowHeadersWidth = 4
	$actualRetentionDays_GridView.SelectionMode = 'FullRowSelect'
	$actualRetentionDays_GridView.ShowEditingIcon = $False
	$actualRetentionDays_GridView.Size = New-Object System.Drawing.Size(1009, 214)
	$actualRetentionDays_GridView.TabIndex = 20
	$actualRetentionDays_GridView.add_KeyUp($actualRetentionDays_GridView_KeyUp)
	#
	# buttonRefreshDataBottom
	#
	$buttonRefreshDataBottom.Anchor = 'Bottom, Left'
	$buttonRefreshDataBottom.AutoSize = $True
	$buttonRefreshDataBottom.Cursor = 'Hand'
	$buttonRefreshDataBottom.Enabled = $False
	$buttonRefreshDataBottom.ImageIndex = 0
	$buttonRefreshDataBottom.ImageList = $imagelist1
	$buttonRefreshDataBottom.Location = New-Object System.Drawing.Point(11, 554)
	$buttonRefreshDataBottom.Name = 'buttonRefreshDataBottom'
	$buttonRefreshDataBottom.Size = New-Object System.Drawing.Size(108, 23)
	$buttonRefreshDataBottom.TabIndex = 21
	$buttonRefreshDataBottom.Text = 'Refresh Dat&a'
	$buttonRefreshDataBottom.TextImageRelation = 'ImageBeforeText'
	$buttonRefreshDataBottom.UseVisualStyleBackColor = $True
	$buttonRefreshDataBottom.add_Click($buttonRefreshDataBottom_Click)
	$buttonRefreshDataBottom.add_KeyUp($buttonRefreshDataBottom_KeyUp)
	#
	# buttonRunGroomingManually
	#
	$buttonRunGroomingManually.Anchor = 'Bottom, Left'
	$buttonRunGroomingManually.AutoSize = $True
	$buttonRunGroomingManually.Cursor = 'Hand'
	$buttonRunGroomingManually.Enabled = $False
	$buttonRunGroomingManually.ImageAlign = 'MiddleLeft'
	$buttonRunGroomingManually.ImageIndex = 6
	$buttonRunGroomingManually.ImageList = $imagelist1
	$buttonRunGroomingManually.Location = New-Object System.Drawing.Point(11, 472)
	$buttonRunGroomingManually.Name = 'buttonRunGroomingManually'
	$buttonRunGroomingManually.Size = New-Object System.Drawing.Size(155, 53)
	$buttonRunGroomingManually.TabIndex = 11
	$buttonRunGroomingManually.Text = 'Run Grooming &Manually'
	$buttonRunGroomingManually.TextAlign = 'MiddleRight'
	$buttonRunGroomingManually.UseCompatibleTextRendering = $True
	$buttonRunGroomingManually.UseVisualStyleBackColor = $True
	$buttonRunGroomingManually.add_Click($buttonRunGroomingManually_Click)
	#
	# picturebox1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
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'))
	#endregion
	$picturebox1.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$picturebox1.Location = New-Object System.Drawing.Point(11, 3)
	$picturebox1.Name = 'picturebox1'
	$picturebox1.Size = New-Object System.Drawing.Size(69, 44)
	$picturebox1.SizeMode = 'Zoom'
	$picturebox1.TabIndex = 16
	$picturebox1.TabStop = $False
	#
	# buttonDisclaimer
	#
	$buttonDisclaimer.Anchor = 'Top, Right'
	$buttonDisclaimer.Cursor = 'Hand'
	$buttonDisclaimer.ImageAlign = 'MiddleLeft'
	$buttonDisclaimer.ImageIndex = 4
	$buttonDisclaimer.ImageList = $imagelist1
	$buttonDisclaimer.Location = New-Object System.Drawing.Point(937, 3)
	$buttonDisclaimer.Name = 'buttonDisclaimer'
	$buttonDisclaimer.Size = New-Object System.Drawing.Size(83, 28)
	$buttonDisclaimer.TabIndex = 3
	$buttonDisclaimer.Text = '&Disclaimer'
	$buttonDisclaimer.TextAlign = 'MiddleRight'
	$buttonDisclaimer.UseVisualStyleBackColor = $True
	$buttonDisclaimer.add_Click($buttonDisclaimer_Click)
	#
	# labelDays
	#
	$labelDays.Anchor = 'Bottom, Left'
	$labelDays.AutoSize = $True
	$labelDays.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '8.25', [System.Drawing.FontStyle]'Bold')
	$labelDays.Location = New-Object System.Drawing.Point(501, 388)
	$labelDays.Name = 'labelDays'
	$labelDays.Size = New-Object System.Drawing.Size(39, 13)
	$labelDays.TabIndex = 14
	$labelDays.Text = 'Days:'
	#
	# DaysSelector
	#
	$DaysSelector.Anchor = 'Bottom, Left'
	$DaysSelector.Enabled = $False
	$DaysSelector.Location = New-Object System.Drawing.Point(501, 407)
	$DaysSelector.Maximum = 99999
	$DaysSelector.Name = 'DaysSelector'
	$DaysSelector.Size = New-Object System.Drawing.Size(120, 20)
	$DaysSelector.TabIndex = 9
	$DaysSelector.add_ValueChanged($DaysSelector_ValueChanged)
	#
	# buttonResetToDefaults
	#
	$buttonResetToDefaults.Anchor = 'Bottom, Left'
	$buttonResetToDefaults.AutoSize = $True
	$buttonResetToDefaults.Cursor = 'Hand'
	$buttonResetToDefaults.Enabled = $False
	$buttonResetToDefaults.Location = New-Object System.Drawing.Point(627, 405)
	$buttonResetToDefaults.Name = 'buttonResetToDefaults'
	$buttonResetToDefaults.Size = New-Object System.Drawing.Size(111, 23)
	$buttonResetToDefaults.TabIndex = 10
	$buttonResetToDefaults.Text = '&Reset to Defaults'
	$buttonResetToDefaults.UseVisualStyleBackColor = $True
	$buttonResetToDefaults.add_Click($buttonResetToDefaults_Click)
	#
	# buttonExit
	#
	$buttonExit.Anchor = 'Bottom, Right'
	$buttonExit.Cursor = 'Hand'
	$buttonExit.DialogResult = 'OK'
	$buttonExit.ImageAlign = 'MiddleLeft'
	$buttonExit.ImageKey = 'exit.png'
	$buttonExit.ImageList = $imagelist1
	$buttonExit.Location = New-Object System.Drawing.Point(927, 486)
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = New-Object System.Drawing.Size(93, 39)
	$buttonExit.TabIndex = 20
	$buttonExit.Text = 'E&xit'
	$buttonExit.UseCompatibleTextRendering = $True
	$buttonExit.UseVisualStyleBackColor = $True
	#
	# labelAggregationType
	#
	$labelAggregationType.Anchor = 'Bottom, Left'
	$labelAggregationType.AutoSize = $True
	$labelAggregationType.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '8.25', [System.Drawing.FontStyle]'Bold')
	$labelAggregationType.Location = New-Object System.Drawing.Point(369, 388)
	$labelAggregationType.Name = 'labelAggregationType'
	$labelAggregationType.Size = New-Object System.Drawing.Size(111, 13)
	$labelAggregationType.TabIndex = 10
	$labelAggregationType.Text = 'Aggregation Type:'
	#
	# labelDatasetName
	#
	$labelDatasetName.Anchor = 'Bottom, Left'
	$labelDatasetName.AutoSize = $True
	$labelDatasetName.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '8.25', [System.Drawing.FontStyle]'Bold')
	$labelDatasetName.Location = New-Object System.Drawing.Point(11, 388)
	$labelDatasetName.Name = 'labelDatasetName'
	$labelDatasetName.Size = New-Object System.Drawing.Size(91, 13)
	$labelDatasetName.TabIndex = 8
	$labelDatasetName.Text = 'Dataset Name:'
	#
	# buttonGetCurrentSettings
	#
	$buttonGetCurrentSettings.Cursor = 'Hand'
	$buttonGetCurrentSettings.Enabled = $False
	$buttonGetCurrentSettings.ImageIndex = 1
	$buttonGetCurrentSettings.ImageList = $imagelist1
	$buttonGetCurrentSettings.Location = New-Object System.Drawing.Point(487, 22)
	$buttonGetCurrentSettings.Name = 'buttonGetCurrentSettings'
	$buttonGetCurrentSettings.Size = New-Object System.Drawing.Size(134, 25)
	$buttonGetCurrentSettings.TabIndex = 2
	$buttonGetCurrentSettings.Text = '&Get Current Settings'
	$buttonGetCurrentSettings.TextImageRelation = 'ImageBeforeText'
	$buttonGetCurrentSettings.UseVisualStyleBackColor = $True
	$buttonGetCurrentSettings.add_Click($buttonGetCurrentSettings_Click)
	#
	# mainGridView
	#
	$mainGridView.AllowUserToAddRows = $False
	$mainGridView.AllowUserToDeleteRows = $False
	$mainGridView.AllowUserToOrderColumns = $True
	$mainGridView.Anchor = 'Top, Bottom, Left, Right'
	$mainGridView.AutoSizeColumnsMode = 'Fill'
	$mainGridView.ColumnHeadersHeightSizeMode = 'AutoSize'
	$mainGridView.EditMode = 'EditProgrammatically'
	$mainGridView.Location = New-Object System.Drawing.Point(12, 97)
	$mainGridView.MultiSelect = $False
	$mainGridView.Name = 'mainGridView'
	$mainGridView.ReadOnly = $True
	$mainGridView.RowHeadersWidth = 4
	$mainGridView.SelectionMode = 'FullRowSelect'
	$mainGridView.ShowEditingIcon = $False
	$mainGridView.Size = New-Object System.Drawing.Size(1008, 281)
	$mainGridView.TabIndex = 6
	$mainGridView.add_SelectionChanged($mainGridView_SelectionChanged)
	$mainGridView.add_KeyUp($mainGridView_KeyUp)
	#
	# DWDBNameTextBox
	#
	$DWDBNameTextBox.Location = New-Object System.Drawing.Point(281, 24)
	$DWDBNameTextBox.Name = 'DWDBNameTextBox'
	$DWDBNameTextBox.Size = New-Object System.Drawing.Size(200, 20)
	$DWDBNameTextBox.TabIndex = 1
	#
	# DWDBServerTextBox
	#
	$DWDBServerTextBox.Location = New-Object System.Drawing.Point(87, 24)
	$DWDBServerTextBox.Name = 'DWDBServerTextBox'
	$DWDBServerTextBox.Size = New-Object System.Drawing.Size(188, 20)
	$DWDBServerTextBox.TabIndex = 0
	#
	# labelDataWarehouseDatabas
	#
	$labelDataWarehouseDatabas.AutoSize = $True
	$labelDataWarehouseDatabas.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '8.25', [System.Drawing.FontStyle]'Bold')
	$labelDataWarehouseDatabas.Location = New-Object System.Drawing.Point(281, 6)
	$labelDataWarehouseDatabas.Name = 'labelDataWarehouseDatabas'
	$labelDataWarehouseDatabas.Size = New-Object System.Drawing.Size(200, 13)
	$labelDataWarehouseDatabas.TabIndex = 2
	$labelDataWarehouseDatabas.Text = 'Data Warehouse Database Name:'
	#
	# labelDataWarehouseDBServe
	#
	$labelDataWarehouseDBServe.AutoSize = $True
	$labelDataWarehouseDBServe.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '8.25', [System.Drawing.FontStyle]'Bold')
	$labelDataWarehouseDBServe.Location = New-Object System.Drawing.Point(87, 6)
	$labelDataWarehouseDBServe.Name = 'labelDataWarehouseDBServe'
	$labelDataWarehouseDBServe.Size = New-Object System.Drawing.Size(168, 13)
	$labelDataWarehouseDBServe.TabIndex = 1
	$labelDataWarehouseDBServe.Text = 'Data Warehouse DB Server:'
	#
	# buttonSet
	#
	$buttonSet.Anchor = 'Bottom, Right'
	$buttonSet.Cursor = 'Hand'
	$buttonSet.Enabled = $False
	$buttonSet.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '12')
	$buttonSet.ImageAlign = 'MiddleLeft'
	$buttonSet.ImageIndex = 2
	$buttonSet.ImageList = $imagelist1
	$buttonSet.Location = New-Object System.Drawing.Point(667, 472)
	$buttonSet.Name = 'buttonSet'
	$buttonSet.Size = New-Object System.Drawing.Size(254, 53)
	$buttonSet.TabIndex = 19
	$buttonSet.Text = '&Set'
	$buttonSet.UseCompatibleTextRendering = $True
	$buttonSet.UseVisualStyleBackColor = $True
	$buttonSet.add_Click($buttonSet_Click)
	#
	# DataSetName_textbox
	#
	$DataSetName_textbox.Anchor = 'Bottom, Left'
	$DataSetName_textbox.Enabled = $False
	$DataSetName_textbox.Location = New-Object System.Drawing.Point(11, 408)
	$DataSetName_textbox.Name = 'DataSetName_textbox'
	$DataSetName_textbox.ReadOnly = $True
	$DataSetName_textbox.Size = New-Object System.Drawing.Size(351, 20)
	$DataSetName_textbox.TabIndex = 7
	$DataSetName_textbox.add_TextChanged($DataSetName_textbox_TextChanged)
	#
	# AggregationType_textbox
	#
	$AggregationType_textbox.Anchor = 'Bottom, Left'
	$AggregationType_textbox.Enabled = $False
	$AggregationType_textbox.Location = New-Object System.Drawing.Point(368, 408)
	$AggregationType_textbox.Name = 'AggregationType_textbox'
	$AggregationType_textbox.ReadOnly = $True
	$AggregationType_textbox.Size = New-Object System.Drawing.Size(127, 20)
	$AggregationType_textbox.TabIndex = 8
	#
	# splitter1
	#
	$splitter1.BorderStyle = 'Fixed3D'
	$splitter1.Cursor = 'Default'
	$splitter1.Dock = 'Bottom'
	$splitter1.Location = New-Object System.Drawing.Point(0, 531)
	$splitter1.MinSize = 0
	$splitter1.Name = 'splitter1'
	$splitter1.Size = New-Object System.Drawing.Size(1033, 278)
	$splitter1.TabIndex = 33
	$splitter1.TabStop = $False
	#
	# linklabelMoreInformation
	#
	$linklabelMoreInformation.Anchor = 'Bottom, Right'
	$linklabelMoreInformation.AutoSize = $True
	$linklabelMoreInformation.Location = New-Object System.Drawing.Point(774, 450)
	$linklabelMoreInformation.Name = 'linklabelMoreInformation'
	$linklabelMoreInformation.Size = New-Object System.Drawing.Size(86, 13)
	$linklabelMoreInformation.TabIndex = 18
	$linklabelMoreInformation.TabStop = $True
	$linklabelMoreInformation.Text = 'More Inf&ormation'
	$linklabelMoreInformation.Visible = $False
	$linklabelMoreInformation.add_LinkClicked($linklabelMoreInformation_LinkClicked)
	#
	# clockImageLabel
	#
	$clockImageLabel.AutoSize = $True
	$clockImageLabel.ImageIndex = 8
	$clockImageLabel.ImageList = $imagelist1
	$clockImageLabel.Location = New-Object System.Drawing.Point(489, 3)
	$clockImageLabel.MinimumSize = New-Object System.Drawing.Size(15, 15)
	$clockImageLabel.Name = 'clockImageLabel'
	$clockImageLabel.Size = New-Object System.Drawing.Size(15, 15)
	$clockImageLabel.TabIndex = 35
	$clockImageLabel.Text = ' '
	$clockImageLabel.Visible = $False
	#
	# checkboxIgnoreWarning
	#
	$checkboxIgnoreWarning.Anchor = 'Bottom, Right'
	$checkboxIgnoreWarning.AutoSize = $True
	$checkboxIgnoreWarning.Cursor = 'Hand'
	$checkboxIgnoreWarning.Location = New-Object System.Drawing.Point(669, 449)
	$checkboxIgnoreWarning.Name = 'checkboxIgnoreWarning'
	$checkboxIgnoreWarning.Size = New-Object System.Drawing.Size(99, 17)
	$checkboxIgnoreWarning.TabIndex = 17
	$checkboxIgnoreWarning.Text = 'I&gnore Warning'
	$checkboxIgnoreWarning.UseVisualStyleBackColor = $True
	$checkboxIgnoreWarning.Visible = $False
	$checkboxIgnoreWarning.add_CheckedChanged($checkboxIgnoreWarning_CheckedChanged)
	#
	# timerJobTracker
	#
	$timerJobTracker.add_Tick($timerJobTracker_Tick)
	#
	# imagelist1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAACCKAAAAk1TRnQBSQFMAgEBDQEAASgBAAEoAQABEAEAARABAAT/ASEBAAj/AUIBTQE2
BwABNgMAASgDAAFAAwABQAMAAQEBAAEgBgABQP8A/wD/AP8AUgADKAE7zwAB/wM2AVgoAANRAabL
AAH/AzYBVywAA1EBpscAAf8DVAG7Az4BawM+AWsDPgFrAz4BawM+AWsDPgFrAz4BawM+AWsDPgFr
Az4BawM+AWsDGwElA1EBpscAAf8DVQG5A00BkgNNAZIDTQGSA00BkgNNAZIDTQGSA00BkgNNAZID
TQGSA00BkgNNAZIDIwEyA1EBpssAAf8DGwEmLAADUQGmzwAB/wMZASIoAANRAab8AAM/AW3/AP8A
/wD/AP8AFQAD8QH/AwAB/wMAAf8D3QH/A8AB/wOGAf8DhgH/A4YB/wOGAf8DhgH/A4YB/wOGAf8I
AANSAagDWAG/A1gBvwNYAb8DWAG/A1gBvwNSAag4AAMbASUDOAFbAxcBHzMAAf8DAAH/AwAB/wMA
Af8DAAH/IwAB/wMAAf80AANYAb8DDwETA1gBvwMPARMDWAG/Aw8BEwNYAb8zAAH/AwAB/wM/AecD
UgGoAzcB7AMAAf8DAAH/IwAB/wMAAf8DAAH/DwAB/wMAAf8DAAH/FwAB/wNNAf8QAAPqAf8D1wH/
A9cB/wPXAf8D1wH/A9cB/wPXAf8D1wH/A1IB4AMhAf8DIQH/AyEB/wMhAf8DIQH/A0sB5ANYAb8D
WAG/KAADIwEyAwAB/xgAAxIBGAMAAf8DCQELFwAB/wMAAf8fAAH/AwAB/wwAA+MB/wMAAf8UAAPA
Af8DhgH/A4YB/wOGAf8DhgH/A4YB/wOGAf8DhgH/AyEB/wMTARkDIQH/AxMBGQMhAf8DEwEZAyEB
/wMPARMDWAG/BAABlQF8AQUB/gF/AWwBOgHrAWQBXwFVAcgDRgF9AwkBCxMAAf8nAAH/FwAB/ycA
Af8PAAH/OAADIQH/AyEB/wMhAf8DIQH/AyEB/wMhAf8DIQH/A1gBvwNYAb8EAAMTARoDHwEsAzMB
UQFVAVQBUQGmAWgBYQFTAc8PAAH/KAADDAEPAwAB/w8AAf8DAAH/GwAB/wsAAf8DAAH/CAADKQH/
GAAD6gH/A9cB/wPXAf8D1wH/A9cB/wPXAf8D1wH/A9cB/wMhAf8DEwEZAyEB/wMTARkDIQH/AxMB
GQMhAf8DWAG/A1MBpwQAAxMBGQMTARkDEwEZAxMBGQGgAXcBAAH/DwAB/y8AAf8PAAH/GwAB/xMA
Af8kAAPAAf8DhgH/A4YB/wOGAf8DhgH/A4YB/wOGAf8DhgH/AyEB/wMhAf8DIQH/AyEB/wMhAf8D
IQH/AyEB/wgAAwsBDgMTARkDEwEZAxMBGQMTARkBoAF3AQAB/wgAAzkBXgNUAa4sAAM0Ae0DFgEe
CwAB/xcAAf8XAAH/IAAD6gH/A/EB/xgAA+oB/wNQAd8DIQH/AyEB/wMhAf8DIQH/AyEB/wNQAd8E
AAMTARkDEwEZAxMBGQMTARkDEwEZAxMBGQGgAXcBAAH/CAADUgGnAzUBVQgAA1EBpgMAAf8DAAH/
AwAB/wMAAf8DAAH/AzYBWQgAA1IBpwM3AVoLAAH/FwAB/xcAAf8gAAOGAf8D1wH/GAADQgH/GAAE
AQMLAQ4DEwEZAxMBGQMTARkDEwEZAxMBGQMTARkBoAF3AQAB/wgAAz4BagNSAaUsAAM/AeQDGwEl
CwAB/wMWAf8TAAH/EwAB/wMAAf8EAAPqAf8D1wH/A9cB/wPXAf8D8QH/CAADhgH/A9cB/xsAAf8Y
AAGgAXcBAAH/AxMBGQMTARkDEwEZAxMBGQMTARkDEwEZAxMBGQGgAXcBAAH/DwAB/y8AAf8MAAT/
AwAB/xMAAf8TAAH/CAADhgH/AwAB/wOGAf8DhgH/A+oB/wgAA4YB/wPXAf8bAAH/GAABoAF3AQAB
/wMTARkDEwEZAxMBGQMTARkDEwEZAxMBGQMTARkBoAF3AQAB/w8AAf8oAAQCAwAB/xMAAf8DAAH/
DwAB/w8AAf8DAAH/CAADhgH/A1UB/wMAAf8QAAPAAf8D6gH/FwAB/wPqAf8YAAGgAXcBAAH/A0QB
egFeAVwBVQHCAXkBbAFBAeUBhQFxASsB8QF5AWwBQQHlAV4BXAFUAcEDRAF6AaABdwEAAf8MAAQB
AwAB/ycAAf8bAAH/AwAB/wMAAf8PAAH/AwAB/wMAAf8MAAOGAf8D1wH/AwAB/wOZAf8kAANVAf8D
AAH/HAABoAF3AQAB/wFWAVUBVAGsAzYBWAMjATIDHAEnAyMBMgM2AVkBVwFVAVMBrQGgAXcBAAH/
EAADPwFtAwAB/x8AAf8DIwEzHAAE/wMAAf8DAAH/AwAB/wMAAf8DAAH/FAADwAH/A+oB/wcAAf8D
AAH/HwAB/wMAAf8gAAFsAWMBUAHVAlABTwGbAy8BSQIaARkBIwMTARkCGgEZASMDLwFJAlEBUAGc
AWwBYwFQAdUbAAH/AwAB/wNRAaMDNgFXA1QBrAMAAf8DAAH/YAADwAH/AwAB/wMAAf8DmQH/A9cB
/wOWAf8DAAH/AwAB/wPdAf8kAAMMAQ8CRwFGAYABZAFgAVQBygGAAWwBNAHtAaABcQEKAf0BgAFs
ATQB7QFkAWABVAHKAkcBRgGAAwwBDyAAAz4BagNSAacDOQFedAADwAH/A4YB/wPMAf+oAAPqAf8D
mQH/A0IB/wMWAf8DFgH/A0IB/wOZAf8D6gH/bAAE/wPAAf8DmQH/A5YB/wOWAf8DsgH/A/EB/wsA
Af8nAAH/HAAE/wOZAf8DAAH/AwAB/wMAAf8DAAH/AwAB/wMAAf8DAAH/AwAB/wOZBf8cAAT/A7IB
/wNNAf8DFgH/AxYB/wNNAf8DsgX/EAAD8QH/A9cB/wOyAf8BpAKgAf8BpAKgAf8DsgH/A5YB/wGk
AqAB/wN3Af8DdwH/A4YB/wOyAf8DmQH/A90B/wcAAf8nAAH/GAAE/wNmAf8DAAH/AwAB/wMAAf8D
AAH/AwAB/wMAAf8DAAH/AwAB/wMAAf8DAAH/A2YF/xQAA9cB/wMiAf8BpAKgAf8D6gn/A+oB/wGk
AqAB/wMiAf8D1wH/CAADsgH/AmYBMwH/AZkBZgEzAf8BmQFmATMB/wGZAWYBMwH/AZkBZgEzAf8D
ZgH/A8AB/wEzApkB/wEzAWYBmQH/ATMBZgGZAf8BZgKZAf8D1wH/A/EB/wOZAf8D8QH/AwAB/ycA
Af8YAAOZAf8DAAH/AwAB/wMAAf8DAAH/A4YB/wPxAf8D6gH/A5YB/wMAAf8DAAH/AwAB/wMAAf8D
mQH/EAAD4wH/AzMB/wPxAf8YAAPxAf8DMwH/A9cB/wQAAWYCMwH/AZkBZgEzAf8BZgIzAf8BmQFm
ATMB/wJmATMB/wJmATMB/wPAAf8DlgH/AWYCzAH/AWYBmQHMAf8BZgLMAf8DhgH/A/EB/wPMAf8D
8QH/A7IB/wMAAf88AAPqAf8DAAH/AwAB/wMAAf8DAAH/AwAB/wPjAf8EAAOWAf8DFgH/AwAB/wMA
Af8DAAH/AwAB/wMAAf8D6gH/DAAI/xQAA/EB/wgAA/EB/wMiBf8BZgIzAf8BmQFmATMB/wGZAWYB
MwH/AZkBZgEzAf8BmQFmATMB/wNVAf8D8QH/A8AB/wEzApkB/wFmAswB/wFmAZkBzAH/A5kB/wGk
AqAB/wEzAmYB/wOyAf8DlgH/AwAB/zwAA5kB/wMAAf8DAAH/AwAB/wMAAf8DAAH/A8wB/wQAA7IB
/wMAAf8DAAH/AwAB/wMAAf8DAAH/AwAB/wOZAf8kAAPjAf8DIgH/A/EB/wgAAaQCoAH/A7IB/wNC
Af8CZgEzAf8CZgEzAf8BmQFmATMB/wGZAWYBMwH/A18B/wPxAf8D8QH/A7IB/wNVAf8DVQH/A4YB
/wPAAf8BMwJmAf8DwAH/A4YB/wMAAf8zAAH/CAADQgH/AwAB/wMAAf8DAAH/AwAB/wMAAf8DhgH/
BAAD4wH/AwAB/wMAAf8DAAH/AwAB/wMAAf8DAAH/A0IB/wgAA+MB/xQAA+MB/wMiAf8D4wH/DAAD
6gH/A00B/wFmAjMB/wHMAWYBMwH/AcwBZgEzAf8BzAFmATMB/wGZAWYBMwH/AmYBMwH/A+oB/wOG
Af8DdwH/A7IB/wNfAf8DVQH/A8wB/wPqAf8D8QH/A5YB/wMAAf83AAH/BAADFgH/AwAB/wMAAf8D
AAH/AwAB/wMAAf8DHAn/AxYB/wMAAf8DAAH/AwAB/wMAAf8DAAH/AxYB/wQAA7IB/wMAAf8DsgH/
DAAE/wMWAf8D4wH/EAAE/wMWAf8CZgEzAf8BmQFmATMB/wGZAWYBMwH/AcwBZgEzAf8BmQFmATMB
/wGZAWYBMwH/AaQCoAH/A3cB/wN3Af8D1wH/A4YB/wJmAZkB/wNmAf8D8QH/A90B/wPAAf8DAAH/
EwAB/wMAAf8DAAH/AwAB/wMAAf8DAAH/AwAB/wMAAf8DAAH/AwAB/wMAAf8DFgH/AwAB/wMAAf8D
AAH/AwAB/wM5Af8Dhgn/AyIB/wMAAf8DAAH/AwAB/wMAAf8DAAH/AxYB/wOyAf8DAAH/AwAB/wMA
Af8DsgH/CAAE/wMAAf8UAAT/AxYB/wJmATMB/wHMAWYBMwH/AZkBZgEzAf8BmQFmATMB/wGZAWYB
MwH/AZkBZgEzAf8DTQH/A8wB/wPdAf8D8QH/A9cB/wNVAf8DVQH/A+oB/wOWBf8DAAH/NAADZgX/
A0IB/wMAAf8DAAH/AwAB/wMAAf8DFgH/A5YB/wPMAf8DhgH/AwAB/wMAAf8DAAH/AwAB/wMAAf8D
AAH/A0IB/wgAA00B/wPqAf8TAAH/FAAD6gH/A00B/wNCAf8BZgIzAf8CZgEzAf8BmQFmATMB/wGZ
AWYBMwH/AZkBZgEzAf8BmQFmATMB/wJmATMB/wGkAqAB/wPqAf8D8QH/A8wB/wGkAqAB/wOWAf8D
8QH/BwAB/zAAA2YF/wQAA5kB/wMAAf8DAAH/AwAB/wMAAf8DAAH/AwAB/wMWAf8DhgH/AzkB/wMA
Af8DAAH/AwAB/wMAAf8DAAH/A5kB/wgAA7IB/wGkAqAB/xMAAf8UAAGkAqAB/wOyAf8BZgIzAf8B
mQFmATMB/wJmATMB/wGZAWYBMwH/AWYCMwH/AWYCMwH/AZkBZgEzAf8CZgEzAf8CZgEzAf8DTQH/
AaQCoAH/A7IB/wPdBf8LAAH/MAAE/wgAA+oB/wMAAf8DAAH/AwAB/wMAAf8DAAH/AwAB/wGkAqAB
/wQAA/EB/wMAAf8DAAH/AwAB/wMAAf8DAAH/A+oB/wgABP8DIgH/A/EB/yAAA/EB/wMiBf8BZgIz
Af8BmQFmATMB/wGZAWYBMwH/AZkBZgEzAf8BmQFmATMB/wGZAWYBMwH/AZkBZgEzAf8BmQFmATMB
/wGZAWYBMwH/AmYBMwH/A/EB/xcAAf9AAAOZAf8DAAH/AwAB/wMAAf8DAAH/AwAB/wNfAf8D8QH/
A8AB/wMAAf8DAAH/AwAB/wMAAf8DmQH/EAAD1wH/AzMB/wPxAf8YAAPxAf8DMwH/A9cB/wQAAZkB
ZgEzAf8BmQFmATMB/wJmATMB/wJmATMB/wJmATMB/wJmATMB/wJmATMB/wJmATMB/wGZAWYBMwH/
AmYBMwH/A/EB/xcAAf8nAAH/GAAE/wNmAf8DAAH/AwAB/wMAAf8DAAH/AwAB/wMAAf8DAAH/AwAB
/wMAAf8DAAH/A2YF/xQAA9cB/wMiAf8BpAKgAf8D6gn/A+oB/wGkAqAB/wMiAf8D1wH/CAADhgH/
AZkBZgEzAf8BzAFmATMB/wHMAZkBMwH/AcwBmQEzAf8BzAGZATMB/wHMAZkBMwH/AcwBZgEzAf8B
mQFmATMB/wNCAf8D8QH/FwAB/ycAAf8cAAT/A5kB/wMAAf8DAAH/AwAB/wMAAf8DAAH/AwAB/wMA
Af8DAAH/A5kF/xwABP8DsgH/A00B/wMWAf8DFgH/A00B/wOyBf8MAAN3Af8BzAFmATMB/wHMAZkB
MwH/AcwBmQEzAf8BzAGZATMB/wHMAZkBMwH/AcwBmQEzAf8BzAGZATMB/wHMAWYBMwH/A2YF/xcA
Af8nAAH/JAAD6gH/A5kB/wNCAf8DFgH/AxYB/wNCAf8DmQH/A+oB/1AABP8DzAH/A5YB/wGZAmYB
/wJmATMB/wJmATMB/wGZAmYB/wOWAf8DwAX/GAADzAH/AwAB/wMAAf8DAAH/AwAB/wMAAf8DAAH/
AwAB/wMAAf8DAAH/A4YB/yQAA/EB/wLMAZkB/wLMAWYB/wGZAcwBMwH/AZkBzAEzAf8CzAFmAf8C
zAGZAf8D8QH/UAAD4wH/AcwBmQEzAf8BzAGZATMB/wHMAZkBZgH/A/EB/wPxAf8D8QH/A/EB/wPx
Af8D8QH/A/EB/wPxAf8BzAGZAWYB/wHMAZkBMwH/AcwBmQEzAf8D4wH/BAAE/wKZAcwB/wIzAcwB
/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wKZ
AcwF/wwABP8CzAGZAf8BmQHMATMB/wGZAcwBMwH/AZkBzAEzAf8BmQHMATMB/wGZAcwBMwH/AZkB
zAEzAf8BmQHMATMB/wGZAcwBMwH/AswBmQX/DAAE/wHwAcoBpgL/AcwBmQL/AcwBmQL/AcwBmQL/
AcwBmQL/AcwBmQL/AcwBmQL/AcwBmQL/AcwBmQL/AcwBmQL/AcwBmQH/AfABygGmBf8EAAPXAf8B
mQFmATMB/wGZAmYB/wHMAZkBZgH/A+oB/wPqAf8D6gH/A+oB/wPqAf8D6gH/A+oB/wPqAf8BzAGZ
AWYB/wGZAmYB/wGZAWYBMwH/A9cF/wJmAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB
/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wJmAcwF/wQABP8CzAGZ
Af8BmQHMATMB/wGZAcwBMwH/AZkBzAEzAf8CzAFmAf8CzAGZAf8CzAGZAf8CzAFmAf8BmQHMATMB
/wGZAcwBMwH/AZkBzAEzAf8CzAGZBf8IAAPqAv8BzAFmAv8BzAFmAv8BzAGZAv8BzAGZAv8BzAGZ
Av8BzAGZAv8BzAGZAv8BzAGZAv8BzAGZAv8BzAGZAv8BzAFmAv8BzAFmAf8D6gH/BAAD1wH/ApkB
MwH/ApkBMwH/AcwBmQFmAf8D6gH/A+oB/wPqAf8D6gH/A+oB/wPqAf8D6gH/A+oB/wHMAZkBZgH/
ApkBMwH/ApkBMwH/A9cB/wHGAdYB7wH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMB
zAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AcYB1gHv
Af8EAALMAZkB/wGZAcwBMwH/AZkBzAEzAf8CzAFmAf8D6gH/A/EB/wPxAf8D8QH/A/EB/wPqAf8C
zAFmAf8BmQHMATMB/wGZAcwBMwH/AswBmQH/CAAD6gL/AcwBZgH/A+oB/yAAA+oC/wHMAWYB/wPq
Af8EAAPXAf8BzAGZATMB/wHMAZkBMwH/AcwBmQFmAf8D6gH/A+oB/wPqAf8D6gH/A+oB/wPqAf8D
6gH/A+oB/wHMAZkBZgH/AcwBmQEzAf8BzAGZATMB/wPXAf8DwAH/AjMBzAH/AjMBzAH/AjMBzAH/
AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMB
zAH/AjMBzAH/A8AB/wPxAf8BmQHMATMB/wGZAcwBMwH/AswBZgH/A/EB/wPxAf8CzAGZAf8CzAFm
Af8CzAFmAf8CzAGZAf8D8QH/A/EB/wLMAWYB/wGZAcwBMwH/AZkBzAEzAf8D8QH/BAAD6gL/AcwB
ZgH/A/EB/wwAA/EB/wPxAf8MAAPxAv8BzAFmAf8D6gH/BAAD1wH/AcwBmQEzAf8BzAGZATMB/wHM
AZkBZgH/A90B/wPdAf8D3QH/A90B/wPdAf8D3QH/A90B/wPdAf8BzAGZAWYB/wHMAZkBMwH/AcwB
mQEzAf8D1wH/ApkBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/
AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/ApkBzAH/AswBmQH/AZkB
zAEzAf8BmQHMATMB/wPqAf8D8QH/AswBZgH/AZkBzAEzAf8BmQHMATMB/wGZAcwBMwH/AZkBzAEz
Af8CzAFmAf8D8QH/A+oB/wGZAcwBMwH/AZkBzAEzAf8CzAGZAf8YAAT/AWYBzAGZAf8BZgHMAZkF
/xgAA9cB/wHMAZkBMwH/AcwBmQEzAf8BzAGZATMB/wGZAcwBMwH/AZkBzAEzAf8BmQHMATMB/wGZ
AcwBMwH/AZkBzAEzAf8BmQHMATMB/wGZAcwBMwH/AZkBzAEzAf8BzAGZATMB/wHMAZkBMwH/AcwB
mQEzAf8D1wH/ApkBzAH/AjMBzAH/AjMBzAH/AjMBzAH/ApkBzAX/ApkBzAH/AjMBzAH/AjMBzAH/
ApkBzAX/ApkBzAH/AjMBzAH/AjMBzAH/AjMBzAH/ApkBzAH/AswBZgH/AZkBzAEzAf8CzAFmAf8D
8QH/AswBmQH/AZkBzAEzAf8BmQHMATMB/wGZAcwBMwH/AZkBzAEzAf8BmQHMATMB/wGZAcwBMwH/
AswBmQH/A/EB/wLMAWYB/wGZAcwBMwH/AswBZgH/FAAE/wFmAswB/wFmAcwBmQH/AWYBzAGZAf8B
ZgLMBf8UAAPXAf8BzAGZATMB/wHMAZkBMwH/AcwBmQEzAf8BzAGZATMB/wHMAZkBMwH/AcwBmQEz
Af8BzAGZATMB/wHMAZkBMwH/AcwBmQEzAf8BzAGZATMB/wHMAZkBMwH/AcwBmQEzAf8BzAGZATMB
/wHMAZkBMwH/A9cB/wKZAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wJmAcwJ/wKZAcwB/wKZAcwJ/wJm
AcwB/wIzAcwB/wIzAcwB/wIzAcwB/wKZAcwB/wGZAcwBMwH/AZkBzAEzAf8CzAGZAf8D8QH/AswB
ZgH/AZkBzAEzAf8BmQHMATMB/wGZAcwBMwH/AZkBzAEzAf8BmQHMATMB/wGZAcwBMwH/AswBZgH/
A/EB/wLMAZkB/wGZAcwBMwH/AZkBzAEzAf8QAAT/AZkCzAH/AWYBzAGZAf8BZgHMAZkB/wFmAcwB
mQH/AWYBzAGZAf8BmQLMBf8QAAPXAf8BzAGZATMB/wHMAZkBMwH/AcwBmQEzAf8BzAGZATMB/wHM
AZkBMwH/AcwBmQEzAf8BzAGZATMB/wHMAZkBMwH/AcwBmQEzAf8BzAGZATMB/wHMAZkBMwH/AcwB
mQEzAf8BzAGZATMB/wHMAZkBMwH/A9cB/wKZAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wJm
AcwR/wJmAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wKZAcwB/wGZAcwBMwH/AZkBzAEzAf8C
zAGZAf8D8QH/AswBZgH/AZkBzAEzAf8BmQHMATMB/wGZAcwBMwH/AZkBzAEzAf8BmQHMATMB/wGZ
AcwBMwH/AswBZgH/A/EB/wLMAZkB/wGZAcwBMwH/AZkBzAEzAf8QAAHWAucB/wGZAf8BzAH/AZkC
zAH/AWYBzAGZAf8BZgHMAZkB/wGZAswB/wGZAf8BzAH/AdYC5wH/EAAD1wH/AcwBmQEzAf8BzAGZ
ATMB/wHMAZkBMwH/AcwBmQEzAf8BzAGZATMB/wHMAZkBMwH/AcwBmQEzAf8BzAGZATMB/wHMAZkB
MwH/AcwBmQEzAf8BzAGZATMB/wHMAZkBMwH/AcwBmQEzAf8BzAGZATMB/wPXAf8CmQHMAf8CMwHM
Af8CMwHMAf8CMwHMAf8CMwHMAf8CMwHMAf8DwAn/ApkBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMB
zAH/AjMBzAH/ApkBzAH/AswBZgH/AZkBzAEzAf8CzAFmAf8D8QH/AswBmQH/AZkBzAEzAf8BmQHM
ATMB/wGZAcwBMwH/AZkBzAEzAf8BmQHMATMB/wGZAcwBMwH/AswBmQH/A/EB/wLMAWYB/wGZAcwB
MwH/AswBZgH/GAAB1gLnAf8BZgHMAZkB/wFmAcwBmQH/A/EB/xgAA9cB/wHMAZkBMwH/AcwBmQEz
Af8BzAGZATMB/wHMAZkBMwH/AcwBmQEzAf8BzAGZATMB/wHMAZkBMwH/AcwBmQEzAf8BzAGZATMB
/wHMAZkBMwH/AcwBmQEzAf8BzAGZATMB/wHMAZkBMwH/AcwBmQEzAf8D1wH/ApkBzAH/AjMBzAH/
AjMBzAH/AjMBzAH/AjMBzAH/ApkBzBH/ApkBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/ApkB
zAH/AswBmQH/AZkBzAEzAf8BmQHMATMB/wPqAf8D8QH/AswBZgH/AZkBzAEzAf8BmQHMATMB/wGZ
AcwBMwH/AZkBzAEzAf8BmQHMATMB/wLMAWYB/wPdAf8BmQHMATMB/wGZAcwBMwH/AswBmQH/GAAB
1gLnAf8BZgHMAZkB/wFmAcwBmQH/A/EB/xgAA9cB/wHMAZkBMwH/AcwBmQEzAf8CzAGZAf8D6gH/
A+oB/wPqAf8D4wH/A9cB/wPXAf8D6gH/AswBmQH/AcwBmQEzAf8BzAGZATMB/wHMAZkBMwH/A9cB
/wKZAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wJmAcwJ/wJmAcwB/wJmAcwJ/wJmAcwB/wIzAcwB/wIz
AcwB/wIzAcwB/wKZAcwB/wPxAf8BmQHMATMB/wGZAcwBMwH/AswBZgH/A/EB/wPxAf8CzAGZAf8C
zAGZAf8D4wH/AswBZgH/AZkBzAEzAf8BmQHMATMB/wGZAcwBMwH/AZkBzAEzAf8BmQHMATMB/wPx
Af8YAAHWAucB/wFmAcwBmQH/AWYBzAGZAf8D8QH/GAAD1wH/AcwBmQEzAf8BzAGZATMB/wLMAZkB
/wPqAf8D6gH/A+oB/wPdAf8BmQJmAf8DhgH/A+oB/wLMAZkB/wHMAZkBMwH/AcwBmQEzAf8BzAGZ
ATMB/wPXAf8CmQHMAf8CMwHMAf8CMwHMAf8CMwHMAf8CmQHMBf8CZgHMAf8CMwHMAf8CMwHMAf8C
ZgHMBf8CmQHMAf8CMwHMAf8CMwHMAf8CMwHMAf8CmQHMAf8EAALMAZkB/wGZAcwBMwH/AZkBzAEz
Af8CzAFmAf8D6gH/A/EB/wPxAf8D8QH/A/EB/wHwAcoBpgH/AZkBzAEzAf8BmQHMATMB/wGZAcwB
MwH/AswBmQH/HAAB1gLnAf8BZgHMAZkB/wFmAcwBmQH/A/EB/xgAA9cB/wHMAZkBMwH/AcwBmQEz
Af8CzAGZAf8D6gH/A+oB/wPqAf8D3QH/AZkCZgH/A4YB/wPqAf8CzAGZAf8BzAGZATMB/wHMAZkB
MwH/AcwBmQEzAf8D1wH/A8AB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIz
AcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wPAAf8EAAT/AswB
mQH/AZkBzAEzAf8BmQHMATMB/wGZAcwBMwH/AswBZgH/AcAB3AHAAf8D8QH/AcAB3AHAAf8CzAEz
Af8BmQHMATMB/wGZAcwBMwH/AswBmQX/HAAB1gLnAf8BZgHMAZkB/wFmAcwBmQH/A/EB/xgAA9cB
/wHMAZkBMwH/AcwBmQEzAf8CzAGZAf8D6gH/A+oB/wPqAf8D3QH/AZkCZgH/A4YB/wPqAf8CzAGZ
Af8BzAGZATMB/wHMAZkBMwH/AcwBmQEzAf8D4wH/AcYB1gHvAf8CMwHMAf8CMwHMAf8CMwHMAf8C
MwHMAf8CMwHMAf8CMwHMAf8CMwHMAf8CMwHMAf8CMwHMAf8CMwHMAf8CMwHMAf8CMwHMAf8CMwHM
Af8CMwHMAf8BxgHWAe8B/wgABP8CzAGZAf8BmQHMATMB/wGZAcwBMwH/AZkBzAEzAf8CzAFmAf8C
zAFmAf8BmQHMATMB/wGZAcwBMwH/AZkBzAEzAf8CzAGZBf8gAAPqAf8BmQLMAf8BmQLMAf8D8QH/
GAAD1wH/AcwBmQEzAf8BzAGZATMB/wLMAZkB/wPqAf8D6gH/A+oB/wPdAf8BmQJmAf8DhgH/A+oB
/wLMAZkB/wHMAZkBMwH/AcwBmQEzAf8D1wH/BAAE/wJmAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIz
AcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wIzAcwB/wJmAcwF
/xAAA/EB/wLMAZkB/wLMAWYB/wGZAcwBMwH/AZkBzAEzAf8CzAFmAf8CzAGZAf8D8QH/UAAD4wH/
AcwBmQEzAf8BzAGZATMB/wLMAZkB/wPqAf8D6gH/A+oB/wPqAf8D1wH/A90B/wPqAf8CzAGZAf8B
zAGZATMB/wPXAf8MAAT/ApkBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/
AjMBzAH/AjMBzAH/AjMBzAH/AjMBzAH/ApkBzAX/BAABQgFNAT4HAAE+AwABKAMAAUADAAFAAwAB
AQEAAQEGAAECFgAD/wEAAv8GAAL/BgAC/wYAAv8GAAH/Af4GAAHnAf4GAAHPAf4GAAGABwABgAcA
Ac8B/gYAAecB/gYAAf8B/gYAAv8GAAL/BgAC/wYAAv8GAAL/AfABAAHAAX8B/gE/AfwBHwHnAf8B
wAF/AfgBDwHxAccBzwIAAX8B5wHjAecB8wGfAgABQQHvAfsB7wH7Ab8B/wEAAUEB3wH5Ac8B2QG/
AgABQQHfAf0B3wG9Af8BAAEBAYEBnwH8Ad8BfQH+AX4CAQGYAQwB3wF9Af4BfgH8AQEBnwH8Ac8B
eQEGAX4B/AEBAd8B/QHPAXsBBgF+AfwBAQHfAfkB5wFzAR4BfAH8AQEBzwH7AfEBxwEPAfkB/AEB
AecB8wH4AR8BJwHzAfwBAQH4AQ8C/wHwAQcB/AEBAf4BPwL/Af4BPwT/AfABDwL/Af4BAwF/Ad8B
wAEDAfgBBwGAAQEBfwHfAYABAQHwAQMCAAF/Ad8BgAEBAeMB8QIAAX8B/wEBAQAB5wHYAgABfwH/
AQEBAAH/AYwCAAF/AfsBAQEAAd8BHAIAAX8B/QIAAY4BPAIAAXgDAAEGAXwCAAF/AfwCAAHPAXwB
AAEBAX8B+QIAAc8BfAEAAQMBfwH7AQABgAHHAfgBAAEfAX8B/wGAAQEB4wHxAQABHwF/Ad8BgAEB
AfABAwEAAR8BfwHfAcABAwH4AQcBAAEfAX8B3wHwAQ8C/wEAAT8BAAEfAfABDwL/AgABgAEBAcAB
AwGAAQEEAAGAAQEBgAEBBAABgAEBAY8B8QYAAY4BcQYAAfwBPwYAAfgBHwYAAfABDwYAAfABDwYA
AfwBPwYAAfwBPwYAAfwBPwQAAYABAQH8AT8EAAGAAQEB/AE/BAABwAEDAfwBPwEAAQECAAHwAQ8C
/wEAAQMBgAEBCw=='))
	#endregion
	$imagelist1.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelist1.TransparentColor = [System.Drawing.Color]::Transparent 
	$imagelist1.Images.SetKeyName(0,'refresh.png')
	$imagelist1.Images.SetKeyName(1,'download.png')
	$imagelist1.Images.SetKeyName(2,'diskette.png')
	$imagelist1.Images.SetKeyName(3,'exit.png')
	$imagelist1.Images.SetKeyName(4,'info.png')
	$imagelist1.Images.SetKeyName(5,'history.png')
	$imagelist1.Images.SetKeyName(6,'grooming.png')
	$imagelist1.Images.SetKeyName(7,'export.png')
	$imagelist1.Images.SetKeyName(8,'clock.png')
	$imagelist1.Images.SetKeyName(9,'full-history.png')
	$imagelist1.Images.SetKeyName(10,'database-staging.png')
	$imagelist1.Images.SetKeyName(11,'remove.png')
	$imagelist1.Images.SetKeyName(12,'import.png')
	#
	# timer1
	#
	$timer1.Interval = 1000
	$timer1.add_Tick($timer1_Tick)
	#
	# saveBackupConfigDialog
	#
	$saveBackupConfigDialog.DefaultExt = 'csv'
	$saveBackupConfigDialog.FileName = "DWRetentionSettingsBackup-$((Get-Date).ToString(""MM_dd_yyyy_hh-mm-tt""))"
	$saveBackupConfigDialog.Filter = 'CSV file (*.csv)|*.csv|Text file (*.txt)|*.txt|All files (*.*)|*.*'
	$saveBackupConfigDialog.InitialDirectory = "$env:USERPROFILE\Desktop"
	$saveBackupConfigDialog.Title = 'Select the Location to Save Exported Configuration'
	$saveBackupConfigDialog.add_FileOk($saveBackupConfigDialog_FileOk)
	#
	# contextmenustrip1
	#
	[void]$contextmenustrip1.Items.Add($toolstripmenuitem1)
	$contextmenustrip1.Name = 'contextmenustrip1'
	$contextmenustrip1.Size = New-Object System.Drawing.Size(245, 26)
	$contextmenustrip1.Text = 'Current Version'
	#
	# toolstripmenuitem1
	#
	$toolstripmenuitem1.Name = 'toolstripmenuitem1'
	$toolstripmenuitem1.Size = New-Object System.Drawing.Size(244, 22)
	$toolstripmenuitem1.Text = "Script Version: $DWScriptVersion"
	$toolstripmenuitem1.add_Click($toolstripmenuitem1_Click)
	#
	# verifyDatasetDaysMatch
	#
	$verifyDatasetDaysMatch.AutoPopDelay = 10000
	$verifyDatasetDaysMatch.BackColor = [System.Drawing.SystemColors]::ActiveBorder 
	$verifyDatasetDaysMatch.ForeColor = [System.Drawing.SystemColors]::Desktop 
	$verifyDatasetDaysMatch.InitialDelay = 500
	$verifyDatasetDaysMatch.IsBalloon = $True
	$verifyDatasetDaysMatch.ReshowDelay = 100
	$verifyDatasetDaysMatch.ToolTipIcon = 'Info'
	$verifyDatasetDaysMatch.ToolTipTitle = 'Verify retention days match'
	$contextmenustrip1.ResumeLayout()
	$DaysSelector.EndInit()
	$mainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $mainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$mainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$mainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$mainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $mainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Disclaimer_Form.psf
function Show-Disclaimer_Form_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formDisclaimer = New-Object 'System.Windows.Forms.Form'
	$checkboxIAcceptDoNotShowThis = New-Object 'System.Windows.Forms.CheckBox'
	$websitePictureBox = New-Object 'System.Windows.Forms.PictureBox'
	$githubLogoPicture = New-Object 'System.Windows.Forms.PictureBox'
	$labelLegalLicense = New-Object 'System.Windows.Forms.Label'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$labelMITLicenseCopyrightG = New-Object 'System.Windows.Forms.Label'
	$labelVersionDWScriptVersi = New-Object 'System.Windows.Forms.Label'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formDisclaimer_Load={
		#TODO: Initialize Form Controls here
		if (Test-Path -Path $LicensePath)
		{
			$checkboxIAcceptDoNotShowThis.Visible = $false
			$buttonOK.Enabled = $true
		}
		else
		{
			$buttonOK.Enabled = $false
		}
	}
	
	$githubLogoPicture_Click={
		#TODO: Place custom script here
		Start-Process "https://www.github.com/blakedrumm"
	}
	
	$formDisclaimer_FormClosing=[System.Windows.Forms.FormClosingEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.FormClosingEventArgs]
		#TODO: Place custom script here
		[GC]::Collect()
	}
	
	$websitePictureBox_Click={
		#TODO: Place custom script here
		Start-Process "https://blakedrumm.com/"
	}
	
	$buttonOK_Click={
		#TODO: Place custom script here
		if ($checkboxIAcceptDoNotShowThis.Checked)
		{
			"Agreed on $(Get-Date -Format "MM/dd/yyyy hh:mm:ss tt")" | Out-File -FilePath $LicensePath
		}
	}
	
	
	$checkboxIAcceptDoNotShowThis_CheckedChanged={
		#TODO: Place custom script here
		if ($checkboxIAcceptDoNotShowThis.Checked)
		{
			$buttonOK.Enabled = $true
		}
		else
		{
			$buttonOK.Enabled = $false
		}
	}
	
	$formDisclaimer_KeyUp=[System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		#TODO: Place custom script here
		if ($_.KeyCode -eq "Escape")
		{
			# if escape, exit
			$formDisclaimer.Close()
		}
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formDisclaimer.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Disclaimer_Form_checkboxIAcceptDoNotShowThis = $checkboxIAcceptDoNotShowThis.Checked
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$checkboxIAcceptDoNotShowThis.remove_CheckedChanged($checkboxIAcceptDoNotShowThis_CheckedChanged)
			$websitePictureBox.remove_Click($websitePictureBox_Click)
			$githubLogoPicture.remove_Click($githubLogoPicture_Click)
			$buttonOK.remove_Click($buttonOK_Click)
			$formDisclaimer.remove_FormClosing($formDisclaimer_FormClosing)
			$formDisclaimer.remove_Load($formDisclaimer_Load)
			$formDisclaimer.remove_KeyUp($formDisclaimer_KeyUp)
			$formDisclaimer.remove_Load($Form_StateCorrection_Load)
			$formDisclaimer.remove_Closing($Form_StoreValues_Closing)
			$formDisclaimer.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formDisclaimer.SuspendLayout()
	#
	# formDisclaimer
	#
	$formDisclaimer.Controls.Add($checkboxIAcceptDoNotShowThis)
	$formDisclaimer.Controls.Add($websitePictureBox)
	$formDisclaimer.Controls.Add($githubLogoPicture)
	$formDisclaimer.Controls.Add($labelLegalLicense)
	$formDisclaimer.Controls.Add($picturebox1)
	$formDisclaimer.Controls.Add($buttonOK)
	$formDisclaimer.Controls.Add($labelMITLicenseCopyrightG)
	$formDisclaimer.Controls.Add($labelVersionDWScriptVersi)
	$formDisclaimer.AcceptButton = $buttonOK
	$formDisclaimer.AutoScaleDimensions = New-Object System.Drawing.SizeF(6, 13)
	$formDisclaimer.AutoScaleMode = 'Font'
	$formDisclaimer.CancelButton = $buttonOK
	$formDisclaimer.ClientSize = New-Object System.Drawing.Size(542, 344)
	$formDisclaimer.FormBorderStyle = 'FixedDialog'
	$formDisclaimer.KeyPreview = $True
	$formDisclaimer.MaximizeBox = $False
	$formDisclaimer.MinimizeBox = $False
	$formDisclaimer.Name = 'formDisclaimer'
	$formDisclaimer.StartPosition = 'CenterScreen'
	$formDisclaimer.Text = 'Disclaimer'
	$formDisclaimer.TopMost = $True
	$formDisclaimer.add_FormClosing($formDisclaimer_FormClosing)
	$formDisclaimer.add_Load($formDisclaimer_Load)
	$formDisclaimer.add_KeyUp($formDisclaimer_KeyUp)
	#
	# checkboxIAcceptDoNotShowThis
	#
	$checkboxIAcceptDoNotShowThis.AutoSize = $True
	$checkboxIAcceptDoNotShowThis.Location = New-Object System.Drawing.Point(132, 313)
	$checkboxIAcceptDoNotShowThis.Name = 'checkboxIAcceptDoNotShowThis'
	$checkboxIAcceptDoNotShowThis.Size = New-Object System.Drawing.Size(232, 17)
	$checkboxIAcceptDoNotShowThis.TabIndex = 36
	$checkboxIAcceptDoNotShowThis.Text = 'I accept. Do not show this again on startup.'
	$checkboxIAcceptDoNotShowThis.UseVisualStyleBackColor = $True
	$checkboxIAcceptDoNotShowThis.add_CheckedChanged($checkboxIAcceptDoNotShowThis_CheckedChanged)
	#
	# websitePictureBox
	#
	$websitePictureBox.Anchor = 'Top, Right'
	$websitePictureBox.Cursor = 'Hand'
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
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'))
	#endregion
	$websitePictureBox.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$websitePictureBox.Location = New-Object System.Drawing.Point(195, 65)
	$websitePictureBox.Name = 'websitePictureBox'
	$websitePictureBox.Size = New-Object System.Drawing.Size(26, 17)
	$websitePictureBox.SizeMode = 'Zoom'
	$websitePictureBox.TabIndex = 35
	$websitePictureBox.TabStop = $False
	$websitePictureBox.add_Click($websitePictureBox_Click)
	#
	# githubLogoPicture
	#
	$githubLogoPicture.Anchor = 'Top, Right'
	$githubLogoPicture.Cursor = 'Hand'
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAA/agAAAKJUE5HDQoaCgAA
AA1JSERSAAAGQAAABkAIBgAAACEMjqcAAAAEZ0FNQQAAsY8L/GEFAACotElEQVR4Xuzdd9hlZX3v
/z1D70gRBEVBjSJGxI6iiD2WWKLGigaVWKLEipoix4rGqKiJYhdjQ40NW1BjQayIiAgoNkCkSJPe
5vf73JmQYZjvzDxl7+fZa63X67re/5zrnCMzs/e97u/ee617BAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAADpmk03+f4GcEYure1F2AAAAAElFTkSuQmCCCw=='))
	#endregion
	$githubLogoPicture.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$githubLogoPicture.Location = New-Object System.Drawing.Point(172, 64)
	$githubLogoPicture.Name = 'githubLogoPicture'
	$githubLogoPicture.Size = New-Object System.Drawing.Size(26, 20)
	$githubLogoPicture.SizeMode = 'Zoom'
	$githubLogoPicture.TabIndex = 34
	$githubLogoPicture.TabStop = $False
	$githubLogoPicture.add_Click($githubLogoPicture_Click)
	#
	# labelLegalLicense
	#
	$labelLegalLicense.AutoSize = $True
	$labelLegalLicense.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '15.75', [System.Drawing.FontStyle]'Bold')
	$labelLegalLicense.Location = New-Object System.Drawing.Point(8, 12)
	$labelLegalLicense.Name = 'labelLegalLicense'
	$labelLegalLicense.Size = New-Object System.Drawing.Size(173, 25)
	$labelLegalLicense.TabIndex = 32
	$labelLegalLicense.Text = 'Legal / License'
	$labelLegalLicense.TextAlign = 'MiddleLeft'
	#
	# picturebox1
	#
	$picturebox1.Anchor = 'Top, Right'
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
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
+sP/Adc8QHYehoSQAAAAAElFTkSuQmCCCw=='))
	#endregion
	$picturebox1.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$picturebox1.Location = New-Object System.Drawing.Point(370, 12)
	$picturebox1.Name = 'picturebox1'
	$picturebox1.Size = New-Object System.Drawing.Size(160, 61)
	$picturebox1.SizeMode = 'Zoom'
	$picturebox1.TabIndex = 30
	$picturebox1.TabStop = $False
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.Cursor = 'Hand'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = New-Object System.Drawing.Point(455, 309)
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = New-Object System.Drawing.Size(75, 23)
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseCompatibleTextRendering = $True
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	#
	# labelMITLicenseCopyrightG
	#
	$labelMITLicenseCopyrightG.Location = New-Object System.Drawing.Point(12, 44)
	$labelMITLicenseCopyrightG.Name = 'labelMITLicenseCopyrightG'
	$labelMITLicenseCopyrightG.Size = New-Object System.Drawing.Size(545, 286)
	$labelMITLicenseCopyrightG.TabIndex = 31
	$labelMITLicenseCopyrightG.Text = "MIT License

Copyright © $(Get-Date -UFormat ""%Y"") Blake Drumm

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE."
	#
	# labelVersionDWScriptVersi
	#
	$labelVersionDWScriptVersi.AutoSize = $True
	$labelVersionDWScriptVersi.Font = [System.Drawing.Font]::new('Calibri', '8.25', [System.Drawing.FontStyle]'Italic')
	$labelVersionDWScriptVersi.Location = New-Object System.Drawing.Point(455, 330)
	$labelVersionDWScriptVersi.Name = 'labelVersionDWScriptVersi'
	$labelVersionDWScriptVersi.Size = New-Object System.Drawing.Size(128, 13)
	$labelVersionDWScriptVersi.TabIndex = 37
	$labelVersionDWScriptVersi.Text = "Version: $DWScriptVersion"
	$formDisclaimer.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formDisclaimer.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formDisclaimer.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formDisclaimer.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formDisclaimer.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formDisclaimer.ShowDialog()

}
#endregion Source: Disclaimer_Form.psf

#region Source: GroomingHistory_Form.psf
function Show-GroomingHistory_Form_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		[ProgressBarOverlay] | Out-Null
	}
	catch
	{
        if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives', 'System.ComponentModel.Primitives', 'System.Drawing.Common', 'System.Runtime'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'  

        }
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition @"
		using System;
		using System.Windows.Forms;
		using System.Drawing;
        namespace SAPIENTypes
        {
		    public class ProgressBarOverlay : System.Windows.Forms.ProgressBar
	        {
                public ProgressBarOverlay() : base() { SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, true); }
	            protected override void WndProc(ref Message m)
	            { 
	                base.WndProc(ref m);
	                if (m.Msg == 0x000F)// WM_PAINT
	                {
	                    if (Style != System.Windows.Forms.ProgressBarStyle.Marquee || !string.IsNullOrEmpty(this.Text))
                        {
                            using (Graphics g = this.CreateGraphics())
                            {
                                using (StringFormat stringFormat = new StringFormat(StringFormatFlags.NoWrap))
                                {
                                    stringFormat.Alignment = StringAlignment.Center;
                                    stringFormat.LineAlignment = StringAlignment.Center;
                                    if (!string.IsNullOrEmpty(this.Text))
                                        g.DrawString(this.Text, this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    else
                                    {
                                        int percent = (int)(((double)Value / (double)Maximum) * 100);
                                        g.DrawString(percent.ToString() + "%", this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    }
                                }
                            }
                        }
	                }
	            }
              
                public string TextOverlay
                {
                    get
                    {
                        return base.Text;
                    }
                    set
                    {
                        base.Text = value;
                        Invalidate();
                    }
                }
	        }
        }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formGroomingHistory = New-Object 'System.Windows.Forms.Form'
	$buttonFullHistory = New-Object 'System.Windows.Forms.Button'
	$labelRowsReturned = New-Object 'System.Windows.Forms.Label'
	$labelLastUpdatedGrooming = New-Object 'System.Windows.Forms.Label'
	$labelScreenFrozen = New-Object 'System.Windows.Forms.Label'
	$progressBarGrooming = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$buttonRefreshGrooming = New-Object 'System.Windows.Forms.Button'
	$buttonCloseWindow = New-Object 'System.Windows.Forms.Button'
	$labelGroomingHistory = New-Object 'System.Windows.Forms.Label'
	$groomingHistoryGridView = New-Object 'System.Windows.Forms.DataGridView'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$imagelist1 = New-Object 'System.Windows.Forms.ImageList'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formGroomingHistory_Load={
		#TODO: Initialize Form Controls here
		$DWDBServerName = $DWDBServerTextBox.Tag
		$DWDBName = $DWDBNameTextBox.Tag
		Get-GroomingHistory -ServerInstance $DWDBServerName -Database $DWDBName
	}
	
	#region Control Helper Functions
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		if ($DisplayMember)
		{
			$ComboBox.DisplayMember = $DisplayMember
		}
		
		if ($ValueMember)
		{
			$ComboBox.ValueMember = $ValueMember
		}
	}
	
	
	
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($null -eq $Item)
		{
			$DataGridView.DataSource = $null
		}
		elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterCIMProperties
				This switch removes CIM properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterCIMProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($null -eq $InputObject)
		{
			$Table.Clear()
			return @( ,$Table)
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)
	}
	
	
	
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ListBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
		{
			$ListBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ListBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ListBox.Items.Add($obj)
			}
			$ListBox.EndUpdate()
		}
		else
		{
			$ListBox.Items.Add($Items)
		}
		
		if ($DisplayMember)
		{
			$ListBox.DisplayMember = $DisplayMember
		}
		if ($ValueMember)
		{
			$ListBox.ValueMember = $ValueMember
		}
	}
	
	
	#endregion
	
	$buttonRefreshGrooming_Click={
		#TODO: Place custom script here
		$DWDBServerName = $DWDBServerTextBox.Tag
		$DWDBName = $DWDBNameTextBox.Tag
		Get-GroomingHistory -ServerInstance $DWDBServerName -Database $DWDBName
	}
	
	$formGroomingHistory_FormClosing = [System.Windows.Forms.FormClosingEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.FormClosingEventArgs]
		#TODO: Place custom script here
		Stop-JobTracker
		$formGroomingHistory.Dispose()
		[GC]::Collect()
	}
	$buttonFullHistory_Click={
		#TODO: Place custom script here
		Show-GroomingHistoryFull_Form_psf
	}
	
	$groomingHistoryGridView_KeyUp=[System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		#TODO: Place custom script here
		if ($_.KeyCode -eq 'F5')
		{
			$buttonRefreshGrooming_Click.Invoke()
		}
	}
	
	$buttonRefreshGrooming_KeyUp=[System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		#TODO: Place custom script here
		if ($_.KeyCode -eq 'F5')
		{
			$buttonRefreshGrooming_Click.Invoke()
		}
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formGroomingHistory.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:GroomingHistory_Form_groomingHistoryGridView = $groomingHistoryGridView.SelectedCells
		if ($groomingHistoryGridView.SelectionMode -eq 'FullRowSelect')
		{ $script:GroomingHistory_Form_groomingHistoryGridView_SelectedObjects = $groomingHistoryGridView.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:GroomingHistory_Form_groomingHistoryGridView_SelectedObjects = $groomingHistoryGridView.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $groomingHistoryGridView.Rows[$_].DataBoundItem } } }
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonFullHistory.remove_Click($buttonFullHistory_Click)
			$buttonRefreshGrooming.remove_Click($buttonRefreshGrooming_Click)
			$buttonRefreshGrooming.remove_KeyUp($buttonRefreshGrooming_KeyUp)
			$groomingHistoryGridView.remove_KeyUp($groomingHistoryGridView_KeyUp)
			$formGroomingHistory.remove_Load($formGroomingHistory_Load)
			$formGroomingHistory.remove_Load($Form_StateCorrection_Load)
			$formGroomingHistory.remove_Closing($Form_StoreValues_Closing)
			$formGroomingHistory.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formGroomingHistory.SuspendLayout()
	#
	# formGroomingHistory
	#
	$formGroomingHistory.Controls.Add($buttonFullHistory)
	$formGroomingHistory.Controls.Add($labelRowsReturned)
	$formGroomingHistory.Controls.Add($labelLastUpdatedGrooming)
	$formGroomingHistory.Controls.Add($labelScreenFrozen)
	$formGroomingHistory.Controls.Add($progressBarGrooming)
	$formGroomingHistory.Controls.Add($buttonRefreshGrooming)
	$formGroomingHistory.Controls.Add($buttonCloseWindow)
	$formGroomingHistory.Controls.Add($labelGroomingHistory)
	$formGroomingHistory.Controls.Add($groomingHistoryGridView)
	$formGroomingHistory.Controls.Add($picturebox1)
	$formGroomingHistory.AcceptButton = $buttonCloseWindow
	$formGroomingHistory.AutoScaleDimensions = New-Object System.Drawing.SizeF(96, 96)
	$formGroomingHistory.AutoScaleMode = 'Dpi'
	$formGroomingHistory.CancelButton = $buttonCloseWindow
	$formGroomingHistory.ClientSize = New-Object System.Drawing.Size(1059, 537)
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABNTeXN0
ZW0uRHJhd2luZy5JY29uAgAAAAhJY29uRGF0YQhJY29uU2l6ZQcEAhNTeXN0ZW0uRHJhd2luZy5T
aXplAgAAAAIAAAAJAwAAAAX8////E1N5c3RlbS5EcmF3aW5nLlNpemUCAAAABXdpZHRoBmhlaWdo
dAAACAgCAAAAAAEAAAABAAAPAwAAAHBPAAACAAABAAEAAAAAAAEAIABaTwAAFgAAAIlQTkcNChoK
AAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAAAAFvck5UAc+id5oAAE8USURBVHja7X0HeFzllfZQ
AiQUAw6Q3U12/+xmd5OQyLY0mlFxkdVnRjMa1WnSaIqqm+Re5AaWMd2ATTHdGEyz6cbgjhu2wRQD
pgmyKYQOoYWafP855xbdmbnTVHxH0vc9z3nGliVZmvu97+nn6HT88MMPP/zwww8//PDDDz/88MMP
P/zwww8//PDDDz/8pNDJtQR1E8xNuixbUJdVjhLQZdNro/h3dcm2CaL28Vhfp/q97AH4Gfy6XFuA
PxB++OnvY7QGdPoSjwBsEaDZCgAa7SDmwPHw5x8DAYwAEJ+bXd747/D380GyQYpBKkE8IEGQKfA5
M0Bmwp/ngcwXZQ5+HF47QNpAfCBOEBvIRBA9EMv/gPwr/Hkk/Cynw89xUrq1NYIUjBIJwc9mL1ys
O7+mhj9IfviJdzIqg7rzXc2RmtbeqMuxNR6PoIO/nwfA+x28loIEQDpBVoPcC7Id5EWQP4G8B/Ix
yGcgX4F8A/I9yD9BWBz5AeQ7kK9BvgT5G8iHIO+CdIMcAnkc5A6Qy0CQOFwg4wH0/2VEgihv/HF2
mZrVENBljF+py+akwM9wPwarX6e3NIQAJAe1vC1wIvz5bBDQuEEzSDvItSCbQF4Wwf25CFKWIoJk
8SnIn0EOgtwHcglIC0gByH+AnK7r0oVZC406vakJ3otGfiH4Gdonp6JVl+/qAr9ZMN0J8BVoKjee
DH/+NxEoCPabQPaDvAPyRYJaO1XlB9GCeAvkCZDLwUpA90IP78M5BnvTiUqXxlAR1E0sqdfpli7l
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
5G8AAAAASUVORK5CYIIL'))
	#endregion
	$formGroomingHistory.Icon = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$formGroomingHistory.MinimizeBox = $False
	$formGroomingHistory.MinimumSize = New-Object System.Drawing.Size(972, 547)
	$formGroomingHistory.Name = 'formGroomingHistory'
	$formGroomingHistory.ShowIcon = $False
	$formGroomingHistory.SizeGripStyle = 'Show'
	$formGroomingHistory.StartPosition = 'CenterParent'
	$formGroomingHistory.Text = ' '
	$formGroomingHistory.add_Load($formGroomingHistory_Load)
	#
	# buttonFullHistory
	#
	$buttonFullHistory.Anchor = 'Top, Right'
	$buttonFullHistory.Cursor = 'Hand'
	$buttonFullHistory.Enabled = $False
	$buttonFullHistory.ImageIndex = 2
	$buttonFullHistory.ImageList = $imagelist1
	$buttonFullHistory.Location = New-Object System.Drawing.Point(830, 17)
	$buttonFullHistory.Name = 'buttonFullHistory'
	$buttonFullHistory.Size = New-Object System.Drawing.Size(103, 37)
	$buttonFullHistory.TabIndex = 0
	$buttonFullHistory.Text = '&Full History'
	$buttonFullHistory.TextAlign = 'MiddleRight'
	$buttonFullHistory.TextImageRelation = 'ImageBeforeText'
	$buttonFullHistory.UseVisualStyleBackColor = $True
	$buttonFullHistory.add_Click($buttonFullHistory_Click)
	#
	# labelRowsReturned
	#
	$labelRowsReturned.Anchor = 'Bottom, Left'
	$labelRowsReturned.AutoSize = $True
	$labelRowsReturned.Location = New-Object System.Drawing.Point(12, 500)
	$labelRowsReturned.Name = 'labelRowsReturned'
	$labelRowsReturned.Size = New-Object System.Drawing.Size(84, 13)
	$labelRowsReturned.TabIndex = 32
	$labelRowsReturned.Text = 'Rows Returned:'
	$labelRowsReturned.Visible = $False
	#
	# labelLastUpdatedGrooming
	#
	$labelLastUpdatedGrooming.Anchor = 'Bottom, Left'
	$labelLastUpdatedGrooming.AutoSize = $True
	$labelLastUpdatedGrooming.Location = New-Object System.Drawing.Point(12, 517)
	$labelLastUpdatedGrooming.Name = 'labelLastUpdatedGrooming'
	$labelLastUpdatedGrooming.Size = New-Object System.Drawing.Size(74, 13)
	$labelLastUpdatedGrooming.TabIndex = 30
	$labelLastUpdatedGrooming.Text = 'Last Updated:'
	$labelLastUpdatedGrooming.Visible = $False
	#
	# labelScreenFrozen
	#
	$labelScreenFrozen.Anchor = 'Top, Left, Right'
	$labelScreenFrozen.AutoSize = $True
	$labelScreenFrozen.Location = New-Object System.Drawing.Point(370, 40)
	$labelScreenFrozen.Name = 'labelScreenFrozen'
	$labelScreenFrozen.Size = New-Object System.Drawing.Size(318, 13)
	$labelScreenFrozen.TabIndex = 31
	$labelScreenFrozen.Text = 'Window may appear frozen for a moment while the data populates'
	$labelScreenFrozen.Visible = $False
	#
	# progressBarGrooming
	#
	$progressBarGrooming.Anchor = 'Top, Right'
	$progressBarGrooming.Cursor = 'AppStarting'
	$progressBarGrooming.Location = New-Object System.Drawing.Point(939, 3)
	$progressBarGrooming.Name = 'progressBarGrooming'
	$progressBarGrooming.Size = New-Object System.Drawing.Size(108, 10)
	$progressBarGrooming.Style = 'Marquee'
	$progressBarGrooming.TabIndex = 29
	$progressBarGrooming.Visible = $False
	#
	# buttonRefreshGrooming
	#
	$buttonRefreshGrooming.Anchor = 'Top, Right'
	$buttonRefreshGrooming.AutoSize = $True
	$buttonRefreshGrooming.Cursor = 'Hand'
	$buttonRefreshGrooming.Enabled = $False
	$buttonRefreshGrooming.ImageIndex = 1
	$buttonRefreshGrooming.ImageList = $imagelist1
	$buttonRefreshGrooming.Location = New-Object System.Drawing.Point(939, 17)
	$buttonRefreshGrooming.Name = 'buttonRefreshGrooming'
	$buttonRefreshGrooming.Size = New-Object System.Drawing.Size(108, 36)
	$buttonRefreshGrooming.TabIndex = 1
	$buttonRefreshGrooming.Text = '&Refresh Data'
	$buttonRefreshGrooming.TextImageRelation = 'ImageBeforeText'
	$buttonRefreshGrooming.UseVisualStyleBackColor = $True
	$buttonRefreshGrooming.add_Click($buttonRefreshGrooming_Click)
	$buttonRefreshGrooming.add_KeyUp($buttonRefreshGrooming_KeyUp)
	#
	# buttonCloseWindow
	#
	$buttonCloseWindow.Anchor = 'Bottom, Right'
	$buttonCloseWindow.Cursor = 'Hand'
	$buttonCloseWindow.DialogResult = 'OK'
	$buttonCloseWindow.ImageAlign = 'MiddleLeft'
	$buttonCloseWindow.ImageKey = 'exit.png'
	$buttonCloseWindow.ImageList = $imagelist1
	$buttonCloseWindow.Location = New-Object System.Drawing.Point(915, 501)
	$buttonCloseWindow.Name = 'buttonCloseWindow'
	$buttonCloseWindow.Size = New-Object System.Drawing.Size(132, 29)
	$buttonCloseWindow.TabIndex = 3
	$buttonCloseWindow.Text = '&Close Window'
	$buttonCloseWindow.UseCompatibleTextRendering = $True
	$buttonCloseWindow.UseVisualStyleBackColor = $True
	#
	# labelGroomingHistory
	#
	$labelGroomingHistory.AutoSize = $True
	$labelGroomingHistory.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '20')
	$labelGroomingHistory.Location = New-Object System.Drawing.Point(67, 9)
	$labelGroomingHistory.Name = 'labelGroomingHistory'
	$labelGroomingHistory.Size = New-Object System.Drawing.Size(225, 31)
	$labelGroomingHistory.TabIndex = 9
	$labelGroomingHistory.Text = 'Grooming History'
	$labelGroomingHistory.TextAlign = 'MiddleLeft'
	#
	# groomingHistoryGridView
	#
	$groomingHistoryGridView.AllowUserToAddRows = $False
	$groomingHistoryGridView.AllowUserToDeleteRows = $False
	$groomingHistoryGridView.AllowUserToOrderColumns = $True
	$groomingHistoryGridView.Anchor = 'Top, Bottom, Left, Right'
	$groomingHistoryGridView.AutoSizeColumnsMode = 'Fill'
	$groomingHistoryGridView.ColumnHeadersHeightSizeMode = 'AutoSize'
	$groomingHistoryGridView.EditMode = 'EditProgrammatically'
	$groomingHistoryGridView.Location = New-Object System.Drawing.Point(12, 60)
	$groomingHistoryGridView.MultiSelect = $False
	$groomingHistoryGridView.Name = 'groomingHistoryGridView'
	$groomingHistoryGridView.ReadOnly = $True
	$groomingHistoryGridView.RowHeadersWidth = 4
	$groomingHistoryGridView.SelectionMode = 'FullRowSelect'
	$groomingHistoryGridView.ShowEditingIcon = $False
	$groomingHistoryGridView.Size = New-Object System.Drawing.Size(1035, 433)
	$groomingHistoryGridView.TabIndex = 2
	$groomingHistoryGridView.add_KeyUp($groomingHistoryGridView_KeyUp)
	#
	# picturebox1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
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
ggs='))
	#endregion
	$picturebox1.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$picturebox1.Location = New-Object System.Drawing.Point(-17, -1)
	$picturebox1.Name = 'picturebox1'
	$picturebox1.Size = New-Object System.Drawing.Size(98, 54)
	$picturebox1.SizeMode = 'Zoom'
	$picturebox1.TabIndex = 20
	$picturebox1.TabStop = $False
	#
	# imagelist1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAAAKCgAAAk1TRnQBSQFMAgEBAwEAAUgBAAFIAQABEAEAARABAAT/AQkBAAj/AUIBTQE2
AQQGAAE2AQQCAAEoAwABQAMAARADAAEBAQABCAYAAQQYAAGAAgABgAMAAoABAAGAAwABgAEAAYAB
AAKAAgADwAEAAcAB3AHAAQAB8AHKAaYBAAEzBQABMwEAATMBAAEzAQACMwIAAxYBAAMcAQADIgEA
AykBAANVAQADTQEAA0IBAAM5AQABgAF8Af8BAAJQAf8BAAGTAQAB1gEAAf8B7AHMAQABxgHWAe8B
AAHWAucBAAGQAakBrQIAAf8BMwMAAWYDAAGZAwABzAIAATMDAAIzAgABMwFmAgABMwGZAgABMwHM
AgABMwH/AgABZgMAAWYBMwIAAmYCAAFmAZkCAAFmAcwCAAFmAf8CAAGZAwABmQEzAgABmQFmAgAC
mQIAAZkBzAIAAZkB/wIAAcwDAAHMATMCAAHMAWYCAAHMAZkCAALMAgABzAH/AgAB/wFmAgAB/wGZ
AgAB/wHMAQABMwH/AgAB/wEAATMBAAEzAQABZgEAATMBAAGZAQABMwEAAcwBAAEzAQAB/wEAAf8B
MwIAAzMBAAIzAWYBAAIzAZkBAAIzAcwBAAIzAf8BAAEzAWYCAAEzAWYBMwEAATMCZgEAATMBZgGZ
AQABMwFmAcwBAAEzAWYB/wEAATMBmQIAATMBmQEzAQABMwGZAWYBAAEzApkBAAEzAZkBzAEAATMB
mQH/AQABMwHMAgABMwHMATMBAAEzAcwBZgEAATMBzAGZAQABMwLMAQABMwHMAf8BAAEzAf8BMwEA
ATMB/wFmAQABMwH/AZkBAAEzAf8BzAEAATMC/wEAAWYDAAFmAQABMwEAAWYBAAFmAQABZgEAAZkB
AAFmAQABzAEAAWYBAAH/AQABZgEzAgABZgIzAQABZgEzAWYBAAFmATMBmQEAAWYBMwHMAQABZgEz
Af8BAAJmAgACZgEzAQADZgEAAmYBmQEAAmYBzAEAAWYBmQIAAWYBmQEzAQABZgGZAWYBAAFmApkB
AAFmAZkBzAEAAWYBmQH/AQABZgHMAgABZgHMATMBAAFmAcwBmQEAAWYCzAEAAWYBzAH/AQABZgH/
AgABZgH/ATMBAAFmAf8BmQEAAWYB/wHMAQABzAEAAf8BAAH/AQABzAEAApkCAAGZATMBmQEAAZkB
AAGZAQABmQEAAcwBAAGZAwABmQIzAQABmQEAAWYBAAGZATMBzAEAAZkBAAH/AQABmQFmAgABmQFm
ATMBAAGZATMBZgEAAZkBZgGZAQABmQFmAcwBAAGZATMB/wEAApkBMwEAApkBZgEAA5kBAAKZAcwB
AAKZAf8BAAGZAcwCAAGZAcwBMwEAAWYBzAFmAQABmQHMAZkBAAGZAswBAAGZAcwB/wEAAZkB/wIA
AZkB/wEzAQABmQHMAWYBAAGZAf8BmQEAAZkB/wHMAQABmQL/AQABzAMAAZkBAAEzAQABzAEAAWYB
AAHMAQABmQEAAcwBAAHMAQABmQEzAgABzAIzAQABzAEzAWYBAAHMATMBmQEAAcwBMwHMAQABzAEz
Af8BAAHMAWYCAAHMAWYBMwEAAZkCZgEAAcwBZgGZAQABzAFmAcwBAAGZAWYB/wEAAcwBmQIAAcwB
mQEzAQABzAGZAWYBAAHMApkBAAHMAZkBzAEAAcwBmQH/AQACzAIAAswBMwEAAswBZgEAAswBmQEA
A8wBAALMAf8BAAHMAf8CAAHMAf8BMwEAAZkB/wFmAQABzAH/AZkBAAHMAf8BzAEAAcwC/wEAAcwB
AAEzAQAB/wEAAWYBAAH/AQABmQEAAcwBMwIAAf8CMwEAAf8BMwFmAQAB/wEzAZkBAAH/ATMBzAEA
Af8BMwH/AQAB/wFmAgAB/wFmATMBAAHMAmYBAAH/AWYBmQEAAf8BZgHMAQABzAFmAf8BAAH/AZkC
AAH/AZkBMwEAAf8BmQFmAQAB/wKZAQAB/wGZAcwBAAH/AZkB/wEAAf8BzAIAAf8BzAEzAQAB/wHM
AWYBAAH/AcwBmQEAAf8CzAEAAf8BzAH/AQAC/wEzAQABzAH/AWYBAAL/AZkBAAL/AcwBAAJmAf8B
AAFmAf8BZgEAAWYC/wEAAf8CZgEAAf8BZgH/AQAC/wFmAQABIQEAAaUBAANfAQADdwEAA4YBAAOW
AQADywEAA7IBAAPXAQAD3QEAA+MBAAPqAQAD8QEAA/gBAAHwAfsB/wEAAaQCoAEAA4ADAAH/AgAB
/wMAAv8BAAH/AwAB/wEAAf8BAAL/AgAD/wIAAf8BkwpGAZMB/wUAAfQBuwG6ApYBugG7AfQIAAH0
AgAB8QEHB+wQAAH/AW8MRgFvAf8CAAH/AbsIlgG7Af8iAAEaDkYBGgEAAf8BuwOWAboCuwG6A5YB
uwH/BAABEwQAAfMH8BAAAQcORgEHAQABuwKWAboB8wT0AfMBugKWAbsCAAHyBgABBwfsEAABkw5G
AZMB9AKWAboC9AG7AroBuwL0AboClgH0IAABkwNGAZMB/wGTAkYBkwH/AZMDRgGTAbsClgHzAfQB
ugSWAboB9AHzApYBuwEAAREGAAHzB/AQAAGTA0YBbwL/ApMC/wFvA0YBkwG6AZYBugH0AbsGlgG7
AfQBugGWAboIAAEHB+wQAAGTBEYBbwT/AW8ERgGTApYBuwH0AboGlgG6AfQBuwKWBwAB8wH0BgAB
8xAAAZMFRgEHAv8BkwVGAZMClgG7AfQBugaWAboB9AG7ApYHAAHsAfAGAAEUEAABkwRGAZME/wGT
BEYBkwG6AZYBugH0AbsGlgG7AfQBugGWAboB8wPwAfQCAAHsAfAXAAGTA0YBbwL/Am8C/wFvA0YB
kwG7ApYB8wH0AboFlgG6AfEClgG7AewBAALsAfMCAAHsAfAXAAGTA0YBkwH/AW8CRgFvAf8BkwNG
AZMB9AKWAboC9AK7AfIBugWWAfQB7AESBQABBwHzBgAB8xAAAQcORgEHAQABuwKWAboB8wT0AQkD
lgG7AQAB7AHwAQABkgkAARISAAEaDkYBGgEAAf8BuwOWAboBCAH0AQgBuQKWAbsB/wEAAQcB8x4A
Af8BbwxGAW8B/wIAAf8BuwOWAroDlgG7Af8GAAEHAgABkgHwAe0CAAHxFAAB/wGTCkYBkwH/BQAB
9AG7AboClgG6AbsB9AsAAQcB7AG8FgABQgFNAT4HAAE+AwABKAMAAUADAAEQAwABAQEAAQEFAAGA
FwAD/wEAAYABAQHwAQ8B8AUAAcABAwHnAf8EAAGAAQEBzwUAAYABAQGfBwABvwH/BgABvwcAAf8H
AAH+AX4GAAH+AX4GAAEGAX4GAAEGAX4GAAEeAXwEAAGAAQEBDwH5BAABgAEBAScB8wQAAcABAwHw
AQcCAAGAAQEB8AEPAf4BPwIACw=='))
	#endregion
	$imagelist1.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelist1.TransparentColor = [System.Drawing.Color]::Transparent 
	$imagelist1.Images.SetKeyName(0,'exit.png')
	$imagelist1.Images.SetKeyName(1,'refresh.png')
	$imagelist1.Images.SetKeyName(2,'full-history.png')
	$formGroomingHistory.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formGroomingHistory.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formGroomingHistory.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formGroomingHistory.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formGroomingHistory.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formGroomingHistory.ShowDialog()

}
#endregion Source: GroomingHistory_Form.psf

#region Source: GroomingHistoryFull_Form.psf
function Show-GroomingHistoryFull_Form_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		[ProgressBarOverlay] | Out-Null
	}
	catch
	{
        if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives', 'System.ComponentModel.Primitives', 'System.Drawing.Common', 'System.Runtime'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'  

        }
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition @"
		using System;
		using System.Windows.Forms;
		using System.Drawing;
        namespace SAPIENTypes
        {
		    public class ProgressBarOverlay : System.Windows.Forms.ProgressBar
	        {
                public ProgressBarOverlay() : base() { SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, true); }
	            protected override void WndProc(ref Message m)
	            { 
	                base.WndProc(ref m);
	                if (m.Msg == 0x000F)// WM_PAINT
	                {
	                    if (Style != System.Windows.Forms.ProgressBarStyle.Marquee || !string.IsNullOrEmpty(this.Text))
                        {
                            using (Graphics g = this.CreateGraphics())
                            {
                                using (StringFormat stringFormat = new StringFormat(StringFormatFlags.NoWrap))
                                {
                                    stringFormat.Alignment = StringAlignment.Center;
                                    stringFormat.LineAlignment = StringAlignment.Center;
                                    if (!string.IsNullOrEmpty(this.Text))
                                        g.DrawString(this.Text, this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    else
                                    {
                                        int percent = (int)(((double)Value / (double)Maximum) * 100);
                                        g.DrawString(percent.ToString() + "%", this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    }
                                }
                            }
                        }
	                }
	            }
              
                public string TextOverlay
                {
                    get
                    {
                        return base.Text;
                    }
                    set
                    {
                        base.Text = value;
                        Invalidate();
                    }
                }
	        }
        }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formGroomingHistory = New-Object 'System.Windows.Forms.Form'
	$labelSelectedRowCount = New-Object 'System.Windows.Forms.Label'
	$buttonExportCurrentOutput = New-Object 'System.Windows.Forms.Button'
	$labelRowsReturned = New-Object 'System.Windows.Forms.Label'
	$labelLastUpdatedGrooming = New-Object 'System.Windows.Forms.Label'
	$labelScreenFrozen = New-Object 'System.Windows.Forms.Label'
	$progressBarGrooming = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$buttonRefreshGrooming = New-Object 'System.Windows.Forms.Button'
	$buttonCloseWindow = New-Object 'System.Windows.Forms.Button'
	$labelFullGroomingHistory = New-Object 'System.Windows.Forms.Label'
	$groomingHistoryGridView = New-Object 'System.Windows.Forms.DataGridView'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$comboboxDatasetName = New-Object 'System.Windows.Forms.ComboBox'
	$checkboxDateTime = New-Object 'System.Windows.Forms.CheckBox'
	$labelDatasetName = New-Object 'System.Windows.Forms.Label'
	$datetimepicker1 = New-Object 'System.Windows.Forms.DateTimePicker'
	$comboboxAggregationType = New-Object 'System.Windows.Forms.ComboBox'
	$labelAggregationType = New-Object 'System.Windows.Forms.Label'
	$imagelist1 = New-Object 'System.Windows.Forms.ImageList'
	$savefiledialogExportOutput = New-Object 'System.Windows.Forms.SaveFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formGroomingHistory_Load = {
		#TODO: Initialize Form Controls here
		$DWDBServerName = $DWDBServerTextBox.Tag
		$DWDBName = $DWDBNameTextBox.Tag
		$initialRun = @()
		$datetimepicker1.MaxDate = (Get-Date).ToShortDateString()
		$datetimepicker1.Value = (Get-Date).ToShortDateString()
		Get-GroomingHistoryFull -ServerInstance $DWDBServerName -Database $DWDBName
	}
	
	#region Control Helper Functions
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		if ($DisplayMember)
		{
			$ComboBox.DisplayMember = $DisplayMember
		}
		
		if ($ValueMember)
		{
			$ComboBox.ValueMember = $ValueMember
		}
	}
	
	
	
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Item,
			[Parameter(Mandatory = $false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($null -eq $Item)
		{
			$DataGridView.DataSource = $null
		}
		elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
			-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterCIMProperties
				This switch removes CIM properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param (
			$InputObject,
			[ValidateNotNull()]
			[System.Data.DataTable]$Table,
			[switch]$RetainColumns,
			[switch]$FilterCIMProperties)
		
		if ($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($null -eq $InputObject)
		{
			$Table.Clear()
			return @( ,$Table)
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @( ,$Table)
	}
	
	
	
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ListBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
		{
			$ListBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ListBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ListBox.Items.Add($obj)
			}
			$ListBox.EndUpdate()
		}
		else
		{
			$ListBox.Items.Add($Items)
		}
		
		if ($DisplayMember)
		{
			$ListBox.DisplayMember = $DisplayMember
		}
		if ($ValueMember)
		{
			$ListBox.ValueMember = $ValueMember
		}
	}
	
	
	#endregion
	
	$buttonRefreshGrooming_Click = {
		#TODO: Place custom script here
		$DWDBServerName = $DWDBServerTextBox.Tag
		$DWDBName = $DWDBNameTextBox.Tag
		$checkboxDateTime.Checked = $false
		Get-GroomingHistoryFull -ServerInstance $DWDBServerName -Database $DWDBName
	}
	
	$formGroomingHistory_FormClosing = [System.Windows.Forms.FormClosingEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.FormClosingEventArgs]
		#TODO: Place custom script here
		Stop-JobTracker
		$formGroomingHistory.Dispose()
		[GC]::Collect()
	}
	$buttonExportCurrentOutput_Click = {
		#TODO: Place custom script here
		$savefiledialogExportOutput.FileName = "DW-GroomingHistory-$((Get-Date).ToString("MM_dd_yyyy_hh-mm-tt"))"
		$savefiledialogExportOutput.ShowDialog()
	}
	
	$savefiledialogExportOutput_FileOk = [System.ComponentModel.CancelEventHandler]{
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		$outputFileData = $script:groomingHistoryFullGridViewResults | Select-Object -Property 'Dataset Name', 'Aggregation Type', 'Aggregation Date/Time', 'Outstanding Aggregation Count', 'Count Aggregations', 'Aggregation Start Time', 'Aggregation Duration Seconds', 'Last Aggregation Start Time', 'Last Aggregation Duration Seconds', 'Data Last Received Date/Time'
		if ($savefiledialogExportOutput.FileName.EndsWith("csv"))
		{
			$outputFileData | Export-Csv -Path $savefiledialogExportOutput.FileName -NoTypeInformation
		}
		elseif ($savefiledialogExportOutput.FileName.EndsWith("txt"))
		{
			$outputFileData | Format-Table * -AutoSize | Out-File -FilePath $savefiledialogExportOutput.FileName
		}
		else
		{
			$outputFileData | Format-Table * -AutoSize | Out-File -FilePath $savefiledialogExportOutput.FileName
		}
		Write-Host "File exported here: $($savefiledialogExportOutput.FileName)" -ForegroundColor Gray
	}
	
	$comboboxDatasetName_SelectedIndexChanged = {
		#TODO: Place custom script here
		Filter-GroomingHistoryFullTableExtended
		if ($comboboxDatasetName.Text -eq 'No filter')
		{
			$data = $script:groomingHistoryFullGridViewResults | Select-Object -Property 'Aggregation Type' -ExpandProperty 'Aggregation Type' -Unique
			$array = @()
			$array += 'No filter'
			foreach ($item in $data)
			{
				$array += $item
			}
			Update-ComboBox -ErrorAction Stop -ComboBox $comboboxAggregationType -Items $array
			$comboboxAggregationType.SelectedIndex = 0
		}
		else
		{
			try
			{
				$data = $script:groomingHistoryFullGridViewResults | Where-Object { $_.'Dataset Name' -eq $comboboxDatasetName.SelectedItem } | Select-Object -Property 'Aggregation Type' -ExpandProperty 'Aggregation Type' -Unique
				$array = @()
				$array += 'No filter'
				foreach ($item in $data)
				{
					$array += $item
				}
				Update-ComboBox -ErrorAction Stop -ComboBox $comboboxAggregationType -Items $array
				$comboboxAggregationType.SelectedIndex = 0
			}
			catch
			{
				$data = $script:groomingHistoryFullGridViewResults | Where-Object { $_.'Dataset Name' -eq $comboboxDatasetName.SelectedItem } | Select-Object -Property 'Dataset Name' -ExpandProperty 'Dataset Name' -Unique
				$array = @()
				$array += 'No filter'
				foreach ($item in $data)
				{
					$array += $item
				}
				Update-ComboBox -ErrorAction Stop -ComboBox $comboboxDatasetName -Items $array
				$comboboxDatasetName.SelectedIndex = 0
			}
			
		}
		
	}
	
	$comboboxAggregationType_SelectedIndexChanged = {
		#TODO: Place custom script here
		Filter-GroomingHistoryFullTableExtended
		
	}
	
	$datetimepicker1_ValueChanged = {
		#TODO: Place custom script here
		Filter-GroomingHistoryFullTableExtended
		#[System.DateTime]$valueToCheck = $datetimepicker1.Value
		#$data = $script:groomingHistoryFullGridViewResults | Where-Object { $_.'Dataset Name' -eq $comboboxDatasetName.SelectedItem -and ($_.'Aggregation Date/Time').ToShortDateString() -eq ($valueToCheck).ToShortDateString() } | Select-Object -Property 'Dataset Name' -ExpandProperty 'Dataset Name' -Unique
	#	$data = $script:gridViewFinal | Select-Object -Property 'Dataset Name' -ExpandProperty 'Dataset Name' -Unique
	#	
	#	$array = @()
	#	$array += 'No filter'
	#	foreach ($item in $data)
	#	{
	#		$array += $item
	#	}
	#	Update-ComboBox -ComboBox $comboboxDatasetName -Items $array
	#	$comboboxDatasetName.SelectedIndex = 0
		
		Filter-GroomingHistoryFullTableExtended
	}
	
	$groomingHistoryGridView_SelectionChanged = {
		#TODO: Place custom script here
		$selectedRowCount = $groomingHistoryGridView.SelectedRows.Count
		if ($selectedRowCount -gt 1)
		{
			$labelSelectedRowCount.Visible = $true
			$labelSelectedRowCount.Text = "Selected Row Count: $selectedRowCount"
		}
		else
		{
			$labelSelectedRowCount.Visible = $false
		}
	}
	
	$checkboxDateTime_Click = {
		#TODO: Place custom script here
		if ($checkboxDateTime.Checked)
		{
			$datetimepicker1.Enabled = $true
		}
		else
		{
			$datetimepicker1.Enabled = $false
		}
		
		Filter-GroomingHistoryFullTableExtended
	}
	
	$groomingHistoryGridView_KeyUp=[System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		#TODO: Place custom script here
		if ($_.KeyCode -eq 'F5')
		{
			$buttonRefreshGrooming_Click.Invoke()
		}
	}
	
	$buttonRefreshGrooming_KeyUp=[System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		#TODO: Place custom script here
		if ($_.KeyCode -eq 'F5')
		{
			$buttonRefreshGrooming_Click.Invoke()
		}
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formGroomingHistory.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:GroomingHistoryFull_Form_groomingHistoryGridView = $groomingHistoryGridView.SelectedCells
		if ($groomingHistoryGridView.SelectionMode -eq 'FullRowSelect')
		{ $script:GroomingHistoryFull_Form_groomingHistoryGridView_SelectedObjects = $groomingHistoryGridView.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:GroomingHistoryFull_Form_groomingHistoryGridView_SelectedObjects = $groomingHistoryGridView.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $groomingHistoryGridView.Rows[$_].DataBoundItem } } }
		$script:GroomingHistoryFull_Form_comboboxDatasetName = $comboboxDatasetName.Text
		$script:GroomingHistoryFull_Form_comboboxDatasetName_SelectedItem = $comboboxDatasetName.SelectedItem
		$script:GroomingHistoryFull_Form_checkboxDateTime = $checkboxDateTime.Checked
		$script:GroomingHistoryFull_Form_datetimepicker1 = $datetimepicker1.Value
		$script:GroomingHistoryFull_Form_comboboxAggregationType = $comboboxAggregationType.Text
		$script:GroomingHistoryFull_Form_comboboxAggregationType_SelectedItem = $comboboxAggregationType.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonExportCurrentOutput.remove_Click($buttonExportCurrentOutput_Click)
			$buttonRefreshGrooming.remove_Click($buttonRefreshGrooming_Click)
			$buttonRefreshGrooming.remove_KeyUp($buttonRefreshGrooming_KeyUp)
			$groomingHistoryGridView.remove_SelectionChanged($groomingHistoryGridView_SelectionChanged)
			$groomingHistoryGridView.remove_KeyUp($groomingHistoryGridView_KeyUp)
			$comboboxDatasetName.remove_SelectedIndexChanged($comboboxDatasetName_SelectedIndexChanged)
			$checkboxDateTime.remove_Click($checkboxDateTime_Click)
			$datetimepicker1.remove_ValueChanged($datetimepicker1_ValueChanged)
			$comboboxAggregationType.remove_SelectedIndexChanged($comboboxAggregationType_SelectedIndexChanged)
			$formGroomingHistory.remove_Load($formGroomingHistory_Load)
			$savefiledialogExportOutput.remove_FileOk($savefiledialogExportOutput_FileOk)
			$formGroomingHistory.remove_Load($Form_StateCorrection_Load)
			$formGroomingHistory.remove_Closing($Form_StoreValues_Closing)
			$formGroomingHistory.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formGroomingHistory.SuspendLayout()
	$groupbox1.SuspendLayout()
	#
	# formGroomingHistory
	#
	$formGroomingHistory.Controls.Add($labelSelectedRowCount)
	$formGroomingHistory.Controls.Add($buttonExportCurrentOutput)
	$formGroomingHistory.Controls.Add($labelRowsReturned)
	$formGroomingHistory.Controls.Add($labelLastUpdatedGrooming)
	$formGroomingHistory.Controls.Add($labelScreenFrozen)
	$formGroomingHistory.Controls.Add($progressBarGrooming)
	$formGroomingHistory.Controls.Add($buttonRefreshGrooming)
	$formGroomingHistory.Controls.Add($buttonCloseWindow)
	$formGroomingHistory.Controls.Add($labelFullGroomingHistory)
	$formGroomingHistory.Controls.Add($groomingHistoryGridView)
	$formGroomingHistory.Controls.Add($picturebox1)
	$formGroomingHistory.Controls.Add($groupbox1)
	$formGroomingHistory.AcceptButton = $buttonCloseWindow
	$formGroomingHistory.AutoScaleDimensions = New-Object System.Drawing.SizeF(96, 96)
	$formGroomingHistory.AutoScaleMode = 'Dpi'
	$formGroomingHistory.CancelButton = $buttonCloseWindow
	$formGroomingHistory.ClientSize = New-Object System.Drawing.Size(1186, 559)
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABNTeXN0
ZW0uRHJhd2luZy5JY29uAgAAAAhJY29uRGF0YQhJY29uU2l6ZQcEAhNTeXN0ZW0uRHJhd2luZy5T
aXplAgAAAAIAAAAJAwAAAAX8////E1N5c3RlbS5EcmF3aW5nLlNpemUCAAAABXdpZHRoBmhlaWdo
dAAACAgCAAAAAAEAAAABAAAPAwAAAHBPAAACAAABAAEAAAAAAAEAIABaTwAAFgAAAIlQTkcNChoK
AAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAAAAFvck5UAc+id5oAAE8USURBVHja7X0HeFzllfZQ
AiQUAw6Q3U12/+xmd5OQyLY0mlFxkdVnRjMa1WnSaIqqm+Re5AaWMd2ATTHdGEyz6cbgjhu2wRQD
pgmyKYQOoYWafP855xbdmbnTVHxH0vc9z3nGliVZmvu97+nn6HT88MMPP/zwww8//PDDDz/88MMP
P/zwww8//PDDDz/8pNDJtQR1E8xNuixbUJdVjhLQZdNro/h3dcm2CaL28Vhfp/q97AH4Gfy6XFuA
PxB++OnvY7QGdPoSjwBsEaDZCgAa7SDmwPHw5x8DAYwAEJ+bXd747/D380GyQYpBKkE8IEGQKfA5
M0Bmwp/ngcwXZQ5+HF47QNpAfCBOEBvIRBA9EMv/gPwr/Hkk/Cynw89xUrq1NYIUjBIJwc9mL1ys
O7+mhj9IfviJdzIqg7rzXc2RmtbeqMuxNR6PoIO/nwfA+x28loIEQDpBVoPcC7Id5EWQP4G8B/Ix
yGcgX4F8A/I9yD9BWBz5AeQ7kK9BvgT5G8iHIO+CdIMcAnkc5A6Qy0CQOFwg4wH0/2VEgihv/HF2
mZrVENBljF+py+akwM9wPwarX6e3NIQAJAe1vC1wIvz5bBDQuEEzSDvItSCbQF4Wwf25CFKWIoJk
8SnIn0EOgtwHcglIC0gByH+AnK7r0oVZC406vakJ3otGfiH4Gdonp6JVl+/qAr9ZMN0J8BVoKjee
DH/+NxEoCPabQPaDvAPyRYJaO1XlB9GCeAvkCZDLwUpA90IP78M5BnvTiUqXxlAR1E0sqdfpli7l
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
5G8AAAAASUVORK5CYIIL'))
	#endregion
	$formGroomingHistory.Icon = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$formGroomingHistory.MinimizeBox = $False
	$formGroomingHistory.MinimumSize = New-Object System.Drawing.Size(1202, 598)
	$formGroomingHistory.Name = 'formGroomingHistory'
	$formGroomingHistory.ShowIcon = $False
	$formGroomingHistory.SizeGripStyle = 'Show'
	$formGroomingHistory.StartPosition = 'CenterParent'
	$formGroomingHistory.Text = 'Full Grooming History'
	$formGroomingHistory.add_Load($formGroomingHistory_Load)
	#
	# labelSelectedRowCount
	#
	$labelSelectedRowCount.Anchor = 'Bottom, Left'
	$labelSelectedRowCount.Location = New-Object System.Drawing.Point(222, 522)
	$labelSelectedRowCount.Name = 'labelSelectedRowCount'
	$labelSelectedRowCount.Size = New-Object System.Drawing.Size(254, 13)
	$labelSelectedRowCount.TabIndex = 40
	$labelSelectedRowCount.Text = 'Selected Row Count: '
	$labelSelectedRowCount.Visible = $False
	#
	# buttonExportCurrentOutput
	#
	$buttonExportCurrentOutput.Anchor = 'Top, Right'
	$buttonExportCurrentOutput.AutoSizeMode = 'GrowAndShrink'
	$buttonExportCurrentOutput.Cursor = 'Hand'
	$buttonExportCurrentOutput.Enabled = $False
	$buttonExportCurrentOutput.ImageAlign = 'MiddleLeft'
	$buttonExportCurrentOutput.ImageIndex = 2
	$buttonExportCurrentOutput.ImageList = $imagelist1
	$buttonExportCurrentOutput.Location = New-Object System.Drawing.Point(923, 22)
	$buttonExportCurrentOutput.Name = 'buttonExportCurrentOutput'
	$buttonExportCurrentOutput.Size = New-Object System.Drawing.Size(137, 31)
	$buttonExportCurrentOutput.TabIndex = 0
	$buttonExportCurrentOutput.Text = '&Export Current Output'
	$buttonExportCurrentOutput.TextAlign = 'MiddleRight'
	$buttonExportCurrentOutput.UseVisualStyleBackColor = $True
	$buttonExportCurrentOutput.add_Click($buttonExportCurrentOutput_Click)
	#
	# labelRowsReturned
	#
	$labelRowsReturned.Anchor = 'Bottom, Left'
	$labelRowsReturned.Location = New-Object System.Drawing.Point(12, 522)
	$labelRowsReturned.Name = 'labelRowsReturned'
	$labelRowsReturned.Size = New-Object System.Drawing.Size(204, 13)
	$labelRowsReturned.TabIndex = 32
	$labelRowsReturned.Text = 'Rows Returned:'
	$labelRowsReturned.Visible = $False
	#
	# labelLastUpdatedGrooming
	#
	$labelLastUpdatedGrooming.Anchor = 'Bottom, Left'
	$labelLastUpdatedGrooming.Location = New-Object System.Drawing.Point(12, 539)
	$labelLastUpdatedGrooming.Name = 'labelLastUpdatedGrooming'
	$labelLastUpdatedGrooming.Size = New-Object System.Drawing.Size(204, 13)
	$labelLastUpdatedGrooming.TabIndex = 30
	$labelLastUpdatedGrooming.Text = 'Last Updated:'
	$labelLastUpdatedGrooming.Visible = $False
	#
	# labelScreenFrozen
	#
	$labelScreenFrozen.Anchor = 'Top'
	$labelScreenFrozen.AutoSize = $True
	$labelScreenFrozen.Location = New-Object System.Drawing.Point(434, 40)
	$labelScreenFrozen.Name = 'labelScreenFrozen'
	$labelScreenFrozen.Size = New-Object System.Drawing.Size(318, 13)
	$labelScreenFrozen.TabIndex = 31
	$labelScreenFrozen.Text = 'Window may appear frozen for a moment while the data populates'
	$labelScreenFrozen.Visible = $False
	#
	# progressBarGrooming
	#
	$progressBarGrooming.Anchor = 'Top, Right'
	$progressBarGrooming.Cursor = 'AppStarting'
	$progressBarGrooming.Location = New-Object System.Drawing.Point(1066, 3)
	$progressBarGrooming.Name = 'progressBarGrooming'
	$progressBarGrooming.Size = New-Object System.Drawing.Size(108, 10)
	$progressBarGrooming.Style = 'Marquee'
	$progressBarGrooming.TabIndex = 29
	$progressBarGrooming.Visible = $False
	#
	# buttonRefreshGrooming
	#
	$buttonRefreshGrooming.Anchor = 'Top, Right'
	$buttonRefreshGrooming.AutoSize = $True
	$buttonRefreshGrooming.Cursor = 'Hand'
	$buttonRefreshGrooming.Enabled = $False
	$buttonRefreshGrooming.ImageIndex = 1
	$buttonRefreshGrooming.ImageList = $imagelist1
	$buttonRefreshGrooming.Location = New-Object System.Drawing.Point(1066, 17)
	$buttonRefreshGrooming.Name = 'buttonRefreshGrooming'
	$buttonRefreshGrooming.Size = New-Object System.Drawing.Size(108, 36)
	$buttonRefreshGrooming.TabIndex = 1
	$buttonRefreshGrooming.Text = '&Refresh Data'
	$buttonRefreshGrooming.TextImageRelation = 'ImageBeforeText'
	$buttonRefreshGrooming.UseVisualStyleBackColor = $True
	$buttonRefreshGrooming.add_Click($buttonRefreshGrooming_Click)
	$buttonRefreshGrooming.add_KeyUp($buttonRefreshGrooming_KeyUp)
	#
	# buttonCloseWindow
	#
	$buttonCloseWindow.Anchor = 'Bottom, Right'
	$buttonCloseWindow.Cursor = 'Hand'
	$buttonCloseWindow.DialogResult = 'OK'
	$buttonCloseWindow.ImageAlign = 'MiddleLeft'
	$buttonCloseWindow.ImageKey = 'exit.png'
	$buttonCloseWindow.ImageList = $imagelist1
	$buttonCloseWindow.Location = New-Object System.Drawing.Point(1042, 523)
	$buttonCloseWindow.Name = 'buttonCloseWindow'
	$buttonCloseWindow.Size = New-Object System.Drawing.Size(132, 29)
	$buttonCloseWindow.TabIndex = 7
	$buttonCloseWindow.Text = '&Close Window'
	$buttonCloseWindow.UseCompatibleTextRendering = $True
	$buttonCloseWindow.UseVisualStyleBackColor = $True
	#
	# labelFullGroomingHistory
	#
	$labelFullGroomingHistory.AutoSize = $True
	$labelFullGroomingHistory.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '20')
	$labelFullGroomingHistory.Location = New-Object System.Drawing.Point(67, 9)
	$labelFullGroomingHistory.Name = 'labelFullGroomingHistory'
	$labelFullGroomingHistory.Size = New-Object System.Drawing.Size(276, 31)
	$labelFullGroomingHistory.TabIndex = 9
	$labelFullGroomingHistory.Text = 'Full Grooming History'
	$labelFullGroomingHistory.TextAlign = 'MiddleLeft'
	#
	# groomingHistoryGridView
	#
	$groomingHistoryGridView.AllowUserToAddRows = $False
	$groomingHistoryGridView.AllowUserToDeleteRows = $False
	$groomingHistoryGridView.AllowUserToOrderColumns = $True
	$groomingHistoryGridView.Anchor = 'Top, Bottom, Left, Right'
	$groomingHistoryGridView.AutoSizeColumnsMode = 'Fill'
	$groomingHistoryGridView.ColumnHeadersHeightSizeMode = 'AutoSize'
	$groomingHistoryGridView.EditMode = 'EditProgrammatically'
	$groomingHistoryGridView.Location = New-Object System.Drawing.Point(12, 138)
	$groomingHistoryGridView.Name = 'groomingHistoryGridView'
	$groomingHistoryGridView.ReadOnly = $True
	$groomingHistoryGridView.RowHeadersWidth = 4
	$groomingHistoryGridView.SelectionMode = 'FullRowSelect'
	$groomingHistoryGridView.ShowEditingIcon = $False
	$groomingHistoryGridView.Size = New-Object System.Drawing.Size(1162, 377)
	$groomingHistoryGridView.TabIndex = 6
	$groomingHistoryGridView.add_SelectionChanged($groomingHistoryGridView_SelectionChanged)
	$groomingHistoryGridView.add_KeyUp($groomingHistoryGridView_KeyUp)
	#
	# picturebox1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAA1AQAAAKJUE5HDQoaCgAA
AA1JSERSAAAAQAAAAEAIBgAAAKppcd4AAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAAA6+AAAOvgHq
QrHAAAAEdklEQVR4Xu3bWah1YxzH8YNMZSZD5ogMGS/MSZkuZIrMkQuUKa5QQiiukIyRMoVcmIcb
85gbJEIUGSNTMvP6fjfr9H+f8+y9zz57rWft4fzqU2/nPfs8a/33Gp/1XzOFsjK2waE4G1fhVtyL
+3APbsLlOA0HYwusgLHN5jgVruBH+BNLBvAb3sMdOBEbYeSzKlzYp/Azciu2UN/jQRyGkdsy1sKF
+AS5ha/bOzgdrRdieZyHT5Fb0MjiPI9bcDHOwAk4Dm41Z+FS3I6X8C1yfyd6E0egleyHN5BbMLnP
P4MLsBvcPQbJ+jgQ18BjQW6MygPwmFMky+Ay5BZEn+Nq7Ii64qZ+EDyg/o7cuF/BranRrI3HkVsA
N9mLsA6azA7wzJBbBln8gXIOrGxlL+SyNd5GbtA7sSlKZl+8jtzyuB4rYV55DPHDpyDNTvgM8ff0
JY5FW3HX8OIpXS49CS/A+sZqxQ+m+5Hf/BeIv6NnUezA0yeHIHfWeAR9T5W9CuA+nzsC3wVPgaMU
jw3vI11Wjxc9060AHu29oov/J6/ZRzUbIHdqPh9d060AVyD+XLdh1LMe0i3hb+yDbNICeCe2Lf4J
P9MTWBbjkO3wHeLyf4jVMCdpAY7Hc8nPPobX++OUwxHXQddhTmIB/kK6D7kleM6tK84HOGZlDzSV
GxDXxfXbGUsl3QJS/pE646kp/v2T0FRWgXMRcTyve5ZKrwJ8g7ovbZ0FimMcgyZzFOJ48uZsNr0K
cCbqTukCmPSS2Sm42XQrgPv+Q7gbfiDHz+6OQdJGAZxFimM6W7UxOul3DOhn0H24jQIsB2eR4rhO
5HQybAEGXYE2CmDORRz3FXSS3g0Oahy2AOPt+q+oxnXWeTPM7AkXYqE2wSBpqwDmBcSxnYssnjYL
cAni2DejeNoswP6IY7+M4mmzABviJ1RjO4FbPG0WwNmhD1CN/QeKp80CmBcRxy+etguQ3owVT8m7
wVweRRy/eLz/91uvDHodMWy8d4njL2Yxi2k31Rxhbr6haY7betKjcmmtZ9j5iGHNyZpY479/Fsmw
8xHD6sQWNPvz/DZ8EnwtSmXY+YhhdWIDY6yKc+krYmqyOmx2iEU4AFMVn/zGAtyPqcreiAVw0tD+
3qnKq4hFGIkLhZKx6zIWwKdDTT69HbnYFvMaYhF8rjYujRG1xBbYWADZ29tU0j7F0rKxCywWwMaC
OpskYkbiSjDNuvga8Re9QvQtjrrj6TaOU1rXpAdEvQtb0erMw0jHKalnrkT6gbdQZ1+wvclOjNqc
Vdq8JmSdOEiL4L3CLpiKeFOUO1D9iNJT2q3FR0q+sJQWQb7+Nm49hAuKF0M3IlcEGylPxlTE3hof
KuYKYdvJ0bAnZ6LjkTttOop8m8sO7S0xsfEtME+Tse8m9Qt8scLX4XypYStM3EzT9rCXcD6vxnpJ
fSRiJua5wK5wVukH5Fa+kjYmTdxzAZ/2+lbo0/BaIR3Qt0Vj/BbS3ymp0Tjd7lnhetiZ4YtNs1PR
/6fFu8GZJf8CTyLs7BFtYDUAAAAASUVORK5CYIIL'))
	#endregion
	$picturebox1.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$picturebox1.Location = New-Object System.Drawing.Point(1, 3)
	$picturebox1.Name = 'picturebox1'
	$picturebox1.Size = New-Object System.Drawing.Size(70, 50)
	$picturebox1.SizeMode = 'Zoom'
	$picturebox1.TabIndex = 20
	$picturebox1.TabStop = $False
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($comboboxDatasetName)
	$groupbox1.Controls.Add($checkboxDateTime)
	$groupbox1.Controls.Add($labelDatasetName)
	$groupbox1.Controls.Add($datetimepicker1)
	$groupbox1.Controls.Add($comboboxAggregationType)
	$groupbox1.Controls.Add($labelAggregationType)
	$groupbox1.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '11.25')
	$groupbox1.Location = New-Object System.Drawing.Point(17, 59)
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = New-Object System.Drawing.Size(775, 61)
	$groupbox1.TabIndex = 41
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'Filter Output'
	#
	# comboboxDatasetName
	#
	$comboboxDatasetName.DropDownStyle = 'DropDownList'
	$comboboxDatasetName.Enabled = $False
	$comboboxDatasetName.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '9')
	$comboboxDatasetName.FormattingEnabled = $True
	[void]$comboboxDatasetName.Items.Add('No filter')
	$comboboxDatasetName.Location = New-Object System.Drawing.Point(102, 29)
	$comboboxDatasetName.Name = 'comboboxDatasetName'
	$comboboxDatasetName.Size = New-Object System.Drawing.Size(121, 23)
	$comboboxDatasetName.TabIndex = 2
	$comboboxDatasetName.add_SelectedIndexChanged($comboboxDatasetName_SelectedIndexChanged)
	#
	# checkboxDateTime
	#
	$checkboxDateTime.CheckAlign = 'MiddleRight'
	$checkboxDateTime.Enabled = $False
	$checkboxDateTime.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '9')
	$checkboxDateTime.Location = New-Object System.Drawing.Point(478, 28)
	$checkboxDateTime.Name = 'checkboxDateTime'
	$checkboxDateTime.Size = New-Object System.Drawing.Size(160, 24)
	$checkboxDateTime.TabIndex = 4
	$checkboxDateTime.Text = 'Aggregation Date/Time'
	$checkboxDateTime.TextAlign = 'MiddleRight'
	$checkboxDateTime.UseVisualStyleBackColor = $True
	$checkboxDateTime.add_Click($checkboxDateTime_Click)
	#
	# labelDatasetName
	#
	$labelDatasetName.AutoSize = $True
	$labelDatasetName.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '9')
	$labelDatasetName.Location = New-Object System.Drawing.Point(7, 33)
	$labelDatasetName.Name = 'labelDatasetName'
	$labelDatasetName.Size = New-Object System.Drawing.Size(89, 15)
	$labelDatasetName.TabIndex = 34
	$labelDatasetName.Text = 'Dataset Name:'
	#
	# datetimepicker1
	#
	$datetimepicker1.CustomFormat = 'MM/dd/yyyy'
	$datetimepicker1.Enabled = $False
	$datetimepicker1.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '9')
	$datetimepicker1.Format = 'Custom'
	$datetimepicker1.Location = New-Object System.Drawing.Point(644, 27)
	$datetimepicker1.Name = 'datetimepicker1'
	$datetimepicker1.Size = New-Object System.Drawing.Size(109, 21)
	$datetimepicker1.TabIndex = 5
	$datetimepicker1.Value = '2022-12-06'
	$datetimepicker1.add_ValueChanged($datetimepicker1_ValueChanged)
	#
	# comboboxAggregationType
	#
	$comboboxAggregationType.DropDownStyle = 'DropDownList'
	$comboboxAggregationType.Enabled = $False
	$comboboxAggregationType.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '9')
	$comboboxAggregationType.FormattingEnabled = $True
	[void]$comboboxAggregationType.Items.Add('No filter')
	$comboboxAggregationType.Location = New-Object System.Drawing.Point(351, 29)
	$comboboxAggregationType.Name = 'comboboxAggregationType'
	$comboboxAggregationType.Size = New-Object System.Drawing.Size(121, 23)
	$comboboxAggregationType.TabIndex = 3
	$comboboxAggregationType.add_SelectedIndexChanged($comboboxAggregationType_SelectedIndexChanged)
	#
	# labelAggregationType
	#
	$labelAggregationType.AutoSize = $True
	$labelAggregationType.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '9')
	$labelAggregationType.Location = New-Object System.Drawing.Point(240, 33)
	$labelAggregationType.Name = 'labelAggregationType'
	$labelAggregationType.Size = New-Object System.Drawing.Size(105, 15)
	$labelAggregationType.TabIndex = 36
	$labelAggregationType.Text = 'Aggregation Type:'
	#
	# imagelist1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAACSCQAAAk1TRnQBSQFMAgEBAwEAAWgBAAFoAQABEAEAARABAAT/AQkBAAj/AUIBTQE2
AQQGAAE2AQQCAAEoAwABQAMAARADAAEBAQABCAYAAQQYAAGAAgABgAMAAoABAAGAAwABgAEAAYAB
AAKAAgADwAEAAcAB3AHAAQAB8AHKAaYBAAEzBQABMwEAATMBAAEzAQACMwIAAxYBAAMcAQADIgEA
AykBAANVAQADTQEAA0IBAAM5AQABgAF8Af8BAAJQAf8BAAGTAQAB1gEAAf8B7AHMAQABxgHWAe8B
AAHWAucBAAGQAakBrQIAAf8BMwMAAWYDAAGZAwABzAIAATMDAAIzAgABMwFmAgABMwGZAgABMwHM
AgABMwH/AgABZgMAAWYBMwIAAmYCAAFmAZkCAAFmAcwCAAFmAf8CAAGZAwABmQEzAgABmQFmAgAC
mQIAAZkBzAIAAZkB/wIAAcwDAAHMATMCAAHMAWYCAAHMAZkCAALMAgABzAH/AgAB/wFmAgAB/wGZ
AgAB/wHMAQABMwH/AgAB/wEAATMBAAEzAQABZgEAATMBAAGZAQABMwEAAcwBAAEzAQAB/wEAAf8B
MwIAAzMBAAIzAWYBAAIzAZkBAAIzAcwBAAIzAf8BAAEzAWYCAAEzAWYBMwEAATMCZgEAATMBZgGZ
AQABMwFmAcwBAAEzAWYB/wEAATMBmQIAATMBmQEzAQABMwGZAWYBAAEzApkBAAEzAZkBzAEAATMB
mQH/AQABMwHMAgABMwHMATMBAAEzAcwBZgEAATMBzAGZAQABMwLMAQABMwHMAf8BAAEzAf8BMwEA
ATMB/wFmAQABMwH/AZkBAAEzAf8BzAEAATMC/wEAAWYDAAFmAQABMwEAAWYBAAFmAQABZgEAAZkB
AAFmAQABzAEAAWYBAAH/AQABZgEzAgABZgIzAQABZgEzAWYBAAFmATMBmQEAAWYBMwHMAQABZgEz
Af8BAAJmAgACZgEzAQADZgEAAmYBmQEAAmYBzAEAAWYBmQIAAWYBmQEzAQABZgGZAWYBAAFmApkB
AAFmAZkBzAEAAWYBmQH/AQABZgHMAgABZgHMATMBAAFmAcwBmQEAAWYCzAEAAWYBzAH/AQABZgH/
AgABZgH/ATMBAAFmAf8BmQEAAWYB/wHMAQABzAEAAf8BAAH/AQABzAEAApkCAAGZATMBmQEAAZkB
AAGZAQABmQEAAcwBAAGZAwABmQIzAQABmQEAAWYBAAGZATMBzAEAAZkBAAH/AQABmQFmAgABmQFm
ATMBAAGZATMBZgEAAZkBZgGZAQABmQFmAcwBAAGZATMB/wEAApkBMwEAApkBZgEAA5kBAAKZAcwB
AAKZAf8BAAGZAcwCAAGZAcwBMwEAAWYBzAFmAQABmQHMAZkBAAGZAswBAAGZAcwB/wEAAZkB/wIA
AZkB/wEzAQABmQHMAWYBAAGZAf8BmQEAAZkB/wHMAQABmQL/AQABzAMAAZkBAAEzAQABzAEAAWYB
AAHMAQABmQEAAcwBAAHMAQABmQEzAgABzAIzAQABzAEzAWYBAAHMATMBmQEAAcwBMwHMAQABzAEz
Af8BAAHMAWYCAAHMAWYBMwEAAZkCZgEAAcwBZgGZAQABzAFmAcwBAAGZAWYB/wEAAcwBmQIAAcwB
mQEzAQABzAGZAWYBAAHMApkBAAHMAZkBzAEAAcwBmQH/AQACzAIAAswBMwEAAswBZgEAAswBmQEA
A8wBAALMAf8BAAHMAf8CAAHMAf8BMwEAAZkB/wFmAQABzAH/AZkBAAHMAf8BzAEAAcwC/wEAAcwB
AAEzAQAB/wEAAWYBAAH/AQABmQEAAcwBMwIAAf8CMwEAAf8BMwFmAQAB/wEzAZkBAAH/ATMBzAEA
Af8BMwH/AQAB/wFmAgAB/wFmATMBAAHMAmYBAAH/AWYBmQEAAf8BZgHMAQABzAFmAf8BAAH/AZkC
AAH/AZkBMwEAAf8BmQFmAQAB/wKZAQAB/wGZAcwBAAH/AZkB/wEAAf8BzAIAAf8BzAEzAQAB/wHM
AWYBAAH/AcwBmQEAAf8CzAEAAf8BzAH/AQAC/wEzAQABzAH/AWYBAAL/AZkBAAL/AcwBAAJmAf8B
AAFmAf8BZgEAAWYC/wEAAf8CZgEAAf8BZgH/AQAC/wFmAQABIQEAAaUBAANfAQADdwEAA4YBAAOW
AQADywEAA7IBAAPXAQAD3QEAA+MBAAPqAQAD8QEAA/gBAAHwAfsB/wEAAaQCoAEAA4ADAAH/AgAB
/wMAAv8BAAH/AwAB/wEAAf8BAAL/AgAD/wIAAf8BkwpGAZMB/wUAAfQBuwG6ApYBugG7AfQkAAH/
AW8MRgFvAf8CAAH/AbsIlgG7Af8iAAEaDkYBGgEAAf8BuwOWAboCuwG6A5YBuwH/IQABBw5GAQcB
AAG7ApYBugHzBPQB8wG6ApYBuyEAAZMORgGTAfQClgG6AvQBuwK6AbsC9AG6ApYB9CAAAZMDRgGT
Af8BkwJGAZMB/wGTA0YBkwG7ApYB8wH0AboElgG6AfQB8wKWAbsgAAGTA0YBbwL/ApMC/wFvA0YB
kwG6AZYBugH0AbsGlgG7AfQBugGWAbogAAGTBEYBbwT/AW8ERgGTApYBuwH0AboGlgG6AfQBuwKW
IAABkwVGAQcC/wGTBUYBkwKWAbsB9AG6BpYBugH0AbsClg4AAW0B/xAAAZMERgGTBP8BkwRGAZMB
ugGWAboB9AG7BpYBuwH0AboBlgG6DQABbQH/EQABkwNGAW8C/wJvAv8BbwNGAZMBuwKWAfMB9AG6
BZYBugHxApYBuw0AAf8SAAGTA0YBkwH/AW8CRgFvAf8BkwNGAZMB9AKWAboC9AK7AfIBugWWAfQg
AAEHDkYBBwEAAbsClgG6AfME9AEJA5YBuyEAARoORgEaAQAB/wG7A5YBugEIAfQBCAG5ApYBuwH/
IQAB/wFvDEYBbwH/AgAB/wG7A5YCugOWAbsB/yMAAf8BkwpGAZMB/wUAAfQBuwG6ApYBugG7AfQE
AAG8CQAB7BUAAUIBTQE+BwABPgMAASgDAAFAAwABEAMAAQEBAAEBBQABgBcAA/8BAAGAAQEB8AEP
AX8B3wQAAcABAwF/Ad8EAAGAAQEBfwHfBAABgAEBAX8B/wYAAX8B/wYAAX8B+wYAAX8B/QYAAXgH
AAF/AfwGAAF/AfkGAAF/AfsGAAF/Af8EAAGAAQEBfwHfBAABgAEBAX8B3wQAAcABAwF/Ad8CAAGA
AQEB8AEPAQABHwIACw=='))
	#endregion
	$imagelist1.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelist1.TransparentColor = [System.Drawing.Color]::Transparent 
	$imagelist1.Images.SetKeyName(0,'exit.png')
	$imagelist1.Images.SetKeyName(1,'refresh.png')
	$imagelist1.Images.SetKeyName(2,'export.png')
	#
	# savefiledialogExportOutput
	#
	$savefiledialogExportOutput.FileName = 'DW-GroomingHistory-12-5-2022.csv'
	$savefiledialogExportOutput.Filter = 'CSV file (*.csv)|*.csv|Text file (*.txt)|*.txt|All files (*.*)|*.*'
	$savefiledialogExportOutput.InitialDirectory = 'C:\'
	$savefiledialogExportOutput.add_FileOk($savefiledialogExportOutput_FileOk)
	$groupbox1.ResumeLayout()
	$formGroomingHistory.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formGroomingHistory.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formGroomingHistory.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formGroomingHistory.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formGroomingHistory.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formGroomingHistory.ShowDialog()

}
#endregion Source: GroomingHistoryFull_Form.psf

#region Source: GroomingStaging.psf
function Show-GroomingStaging_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms.DataVisualization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35')
	[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		[ProgressBarOverlay] | Out-Null
	}
	catch
	{
        if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives', 'System.ComponentModel.Primitives', 'System.Drawing.Common', 'System.Runtime'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'  

        }
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition @"
		using System;
		using System.Windows.Forms;
		using System.Drawing;
        namespace SAPIENTypes
        {
		    public class ProgressBarOverlay : System.Windows.Forms.ProgressBar
	        {
                public ProgressBarOverlay() : base() { SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, true); }
	            protected override void WndProc(ref Message m)
	            { 
	                base.WndProc(ref m);
	                if (m.Msg == 0x000F)// WM_PAINT
	                {
	                    if (Style != System.Windows.Forms.ProgressBarStyle.Marquee || !string.IsNullOrEmpty(this.Text))
                        {
                            using (Graphics g = this.CreateGraphics())
                            {
                                using (StringFormat stringFormat = new StringFormat(StringFormatFlags.NoWrap))
                                {
                                    stringFormat.Alignment = StringAlignment.Center;
                                    stringFormat.LineAlignment = StringAlignment.Center;
                                    if (!string.IsNullOrEmpty(this.Text))
                                        g.DrawString(this.Text, this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    else
                                    {
                                        int percent = (int)(((double)Value / (double)Maximum) * 100);
                                        g.DrawString(percent.ToString() + "%", this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    }
                                }
                            }
                        }
	                }
	            }
              
                public string TextOverlay
                {
                    get
                    {
                        return base.Text;
                    }
                    set
                    {
                        base.Text = value;
                        Invalidate();
                    }
                }
	        }
        }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formGroomingStaging = New-Object 'System.Windows.Forms.Form'
	$labelChartType = New-Object 'System.Windows.Forms.Label'
	$comboboxChartType = New-Object 'System.Windows.Forms.ComboBox'
	$chartCount = New-Object 'System.Windows.Forms.DataVisualization.Charting.Chart'
	$labelRowsReturned = New-Object 'System.Windows.Forms.Label'
	$labelLastUpdatedGrooming = New-Object 'System.Windows.Forms.Label'
	$progressBarGrooming = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$buttonRefreshGrooming = New-Object 'System.Windows.Forms.Button'
	$buttonCloseWindow = New-Object 'System.Windows.Forms.Button'
	$labelGroomingStaging = New-Object 'System.Windows.Forms.Label'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$panel1 = New-Object 'System.Windows.Forms.Panel'
	$groomingStagingGridView = New-Object 'System.Windows.Forms.DataGridView'
	$checkboxAutoRefresh = New-Object 'System.Windows.Forms.CheckBox'
	$autoRefreshGif = New-Object 'System.Windows.Forms.PictureBox'
	$comboboxAutoRefresh = New-Object 'System.Windows.Forms.ComboBox'
	$imagelist1 = New-Object 'System.Windows.Forms.ImageList'
	$timerAutoRefresh = New-Object 'System.Windows.Forms.Timer'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formGroomingStaging_Load={
		#TODO: Initialize Form Controls here
		if (-NOT [Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms.DataVisualization"))
		{
			#Microsoft Chart Controls are not installed
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0,`
	    #Culture=neutral, PublicKeyToken=b77a5c561934e089")
			#[void][System.Windows.Forms.MessageBox]::Show("Microsoft Chart Controls for Microsoft .NET 3.5`
	    #Framework is required", "Microsoft Chart Controls Required")
			#Open the URL
			#[System.Diagnostics.Process]::Start("http://www.microsoft.com/downloads/en/`
	    #details.aspx?familyid=130F7986-BF49-4FE5-9CA8-910AE6EA442C&displaylang=en");
			#return $false
			$chartCount.Visible = $false
		}
		$DWDBServerName = $DWDBServerTextBox.Tag
		$DWDBName = $DWDBNameTextBox.Tag
		
		$comboboxAutoRefresh.SelectedIndex = 2
		$script:ChartType = 'Spline'
		$comboboxChartType.SelectedItem = $script:ChartType
		Get-GroomingStaging -ServerInstance $DWDBServerName -Database $DWDBName -ChartType $script:ChartType
		$groomingStagingGridView.Select()
	}
	
	
	#region Control Helper Functions
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		if ($DisplayMember)
		{
			$ComboBox.DisplayMember = $DisplayMember
		}
		
		if ($ValueMember)
		{
			$ComboBox.ValueMember = $ValueMember
		}
	}
	
	
	
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($null -eq $Item)
		{
			$DataGridView.DataSource = $null
		}
		elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterCIMProperties
				This switch removes CIM properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterCIMProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($null -eq $InputObject)
		{
			$Table.Clear()
			return @( ,$Table)
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)
	}
	
	
	
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[Parameter(Mandatory = $false)]
			[string]$ValueMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ListBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
		{
			$ListBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ListBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ListBox.Items.Add($obj)
			}
			$ListBox.EndUpdate()
		}
		else
		{
			$ListBox.Items.Add($Items)
		}
		
		if ($DisplayMember)
		{
			$ListBox.DisplayMember = $DisplayMember
		}
		if ($ValueMember)
		{
			$ListBox.ValueMember = $ValueMember
		}
	}
	
	
	#endregion
	
	$buttonRefreshGrooming_Click={
		#TODO: Place custom script here
		$DWDBServerName = $DWDBServerTextBox.Tag
		$DWDBName = $DWDBNameTextBox.Tag
		Get-GroomingStaging -ServerInstance $DWDBServerName -Database $DWDBName -ChartType $script:ChartType
	}
	
	$formGroomingHistory_FormClosing = [System.Windows.Forms.FormClosingEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.FormClosingEventArgs]
		#TODO: Place custom script here
		Stop-JobTracker
		$formGroomingStaging.Dispose()
		[GC]::Collect()
	}
	
	$checkboxAutoRefresh_CheckedChanged={
		#TODO: Place custom script here
		if ($checkboxAutoRefresh.Checked)
		{
			$autoRefreshGif.Visible = $true
			$comboboxAutoRefresh.Enabled = $true
			
			$timerAutoRefresh.Stop()
	
			switch ($comboboxAutoRefresh.SelectedItem) {
				'10 seconds' {
					$timerAutoRefresh.Interval = 10000
				}
				'30 seconds' {
					$timerAutoRefresh.Interval = 30000
				}
				'1 minute' {
					$timerAutoRefresh.Interval = 60000
				}
				'5 minutes' {
					$timerAutoRefresh.Interval = 300000
				}
				'10 minutes' {
					$timerAutoRefresh.Interval = 600000
				}
				'30 minutes' {
					$timerAutoRefresh.Interval = 1800000
				}
			}
			$timerAutoRefresh.Enabled = $true
			$timerAutoRefresh.Start()
			
		}
		else
		{
			$comboboxAutoRefresh.Enabled = $false
			$timerAutoRefresh.Stop()
			$timerAutoRefresh.Enabled = $false
			$autoRefreshGif.Visible = $false
		}
	}
	
	$timerAutoRefresh_Tick={
		#TODO: Place custom script here
		$DWDBServerName = $DWDBServerTextBox.Tag
		$DWDBName = $DWDBNameTextBox.Tag
		Get-GroomingStaging -ServerInstance $DWDBServerName -Database $DWDBName -ChartType $script:ChartType
	}
	
	$comboboxAutoRefresh_SelectedIndexChanged={
		#TODO: Place custom script here
		if ($checkboxAutoRefresh.Checked)
		{
			$autoRefreshGif.Visible = $true
			$comboboxAutoRefresh.Enabled = $true
			$timerAutoRefresh.Stop
			
			switch ($comboboxAutoRefresh.SelectedItem)
			{
				'10 seconds' {
					$timerAutoRefresh.Interval = 10000
				}
				'30 seconds' {
					$timerAutoRefresh.Interval = 30000
				}
				'1 minute' {
					$timerAutoRefresh.Interval = 60000
				}
				'5 minutes' {
					$timerAutoRefresh.Interval = 300000
				}
				'10 minutes' {
					$timerAutoRefresh.Interval = 600000
				}
				'30 minutes' {
					$timerAutoRefresh.Interval = 1800000
				}
			}
			$timerAutoRefresh.Enabled = $true
			$timerAutoRefresh.Start()
			
		}
		else
		{
			$comboboxAutoRefresh.Enabled = $false
			$timerAutoRefresh.Stop()
			$timerAutoRefresh.Enabled = $false
			$autoRefreshGif.Visible = $false
		}
	}
	
	$comboboxChartType_SelectedIndexChanged={
		#TODO: Place custom script here
		$script:ChartType = $comboboxChartType.SelectedItem
		Update-Chart -ChartControl $chartCount -XPoints $script:tableList -YPoints $script:overallCount -ChartType $script:ChartType -ErrorAction SilentlyContinue
	}
	
	$groomingStagingGridView_KeyUp=[System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		#TODO: Place custom script here
		if ($_.KeyCode -eq 'F5')
		{
			$buttonRefreshGrooming_Click.Invoke()
		}
	}
	
	$buttonRefreshGrooming_KeyUp=[System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		#TODO: Place custom script here
		if ($_.KeyCode -eq 'F5')
		{
			$buttonRefreshGrooming_Click.Invoke()
		}
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formGroomingStaging.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:GroomingStaging_comboboxChartType = $comboboxChartType.Text
		$script:GroomingStaging_comboboxChartType_SelectedItem = $comboboxChartType.SelectedItem
		$script:GroomingStaging_groomingStagingGridView = $groomingStagingGridView.SelectedCells
		if ($groomingStagingGridView.SelectionMode -eq 'FullRowSelect')
		{ $script:GroomingStaging_groomingStagingGridView_SelectedObjects = $groomingStagingGridView.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:GroomingStaging_groomingStagingGridView_SelectedObjects = $groomingStagingGridView.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $groomingStagingGridView.Rows[$_].DataBoundItem } } }
		$script:GroomingStaging_checkboxAutoRefresh = $checkboxAutoRefresh.Checked
		$script:GroomingStaging_comboboxAutoRefresh = $comboboxAutoRefresh.Text
		$script:GroomingStaging_comboboxAutoRefresh_SelectedItem = $comboboxAutoRefresh.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$comboboxChartType.remove_SelectedIndexChanged($comboboxChartType_SelectedIndexChanged)
			$buttonRefreshGrooming.remove_Click($buttonRefreshGrooming_Click)
			$buttonRefreshGrooming.remove_KeyUp($buttonRefreshGrooming_KeyUp)
			$groomingStagingGridView.remove_KeyUp($groomingStagingGridView_KeyUp)
			$checkboxAutoRefresh.remove_CheckedChanged($checkboxAutoRefresh_CheckedChanged)
			$comboboxAutoRefresh.remove_SelectedIndexChanged($comboboxAutoRefresh_SelectedIndexChanged)
			$formGroomingStaging.remove_Load($formGroomingStaging_Load)
			$timerAutoRefresh.remove_Tick($timerAutoRefresh_Tick)
			$formGroomingStaging.remove_Load($Form_StateCorrection_Load)
			$formGroomingStaging.remove_Closing($Form_StoreValues_Closing)
			$formGroomingStaging.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formGroomingStaging.SuspendLayout()
	$chartCount.BeginInit()
	$panel1.SuspendLayout()
	#
	# formGroomingStaging
	#
	$formGroomingStaging.Controls.Add($labelChartType)
	$formGroomingStaging.Controls.Add($comboboxChartType)
	$formGroomingStaging.Controls.Add($chartCount)
	$formGroomingStaging.Controls.Add($labelRowsReturned)
	$formGroomingStaging.Controls.Add($labelLastUpdatedGrooming)
	$formGroomingStaging.Controls.Add($progressBarGrooming)
	$formGroomingStaging.Controls.Add($buttonRefreshGrooming)
	$formGroomingStaging.Controls.Add($buttonCloseWindow)
	$formGroomingStaging.Controls.Add($labelGroomingStaging)
	$formGroomingStaging.Controls.Add($picturebox1)
	$formGroomingStaging.Controls.Add($panel1)
	$formGroomingStaging.AcceptButton = $buttonCloseWindow
	$formGroomingStaging.AutoScaleDimensions = New-Object System.Drawing.SizeF(96, 96)
	$formGroomingStaging.AutoScaleMode = 'Dpi'
	$formGroomingStaging.CancelButton = $buttonCloseWindow
	$formGroomingStaging.ClientSize = New-Object System.Drawing.Size(1059, 859)
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABNTeXN0
ZW0uRHJhd2luZy5JY29uAgAAAAhJY29uRGF0YQhJY29uU2l6ZQcEAhNTeXN0ZW0uRHJhd2luZy5T
aXplAgAAAAIAAAAJAwAAAAX8////E1N5c3RlbS5EcmF3aW5nLlNpemUCAAAABXdpZHRoBmhlaWdo
dAAACAgCAAAAQAAAAEAAAAAPAwAAAD5CAAACAAABAAEAQEAAAAEAIAAoQgAAFgAAACgAAABAAAAA
gAAAAAEAIAAAAAAAAEAAAMMOAADDDgAAAAAAAAAAAAAAAAC0AAAA/wAAAP8AAAD/AAAA/wAAAP8A
AAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA
/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/
AAAA/wAAAP8AAAD/AAAAXwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAqAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA
/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/
AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAFkAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKgAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA
/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/
AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8A
AAD/AAAA/wAAAP8AAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAACoAAAA/wAAAP8AAAD/AAAAxAAAAKIAAAClAAAApQAAAKUAAAClAAAApQAAAKUAAAClAAAA
pQAAAKUAAAClAAAApQAAAKUAAAClAAAApQAAAKUAAAClAAAApQAAAKUAAAClAAAApQAAAKUAAACl
AAAApQAAAKUAAAClAAAApQAAAKUAAAClAAAApQAAAKUAAAClAAAApQAAAKUAAAClAAAApQAAAKUA
AAClAAAApQAAAKUAAAClAAAApQAAAKIAAADgAAAA/wAAAP8AAAD/AAAAWQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqAAAAP8AAAD/AAAA/wAAAFAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAowAA
AP8AAAD/AAAA/wAAAFkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAKgAAAD/AAAA/wAAAP8AAABYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKgAAAD/AAAA/wAAAP8AAABZAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACoAAAA/wAAAP8AAAD/AAAAWQAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACoAAAA
/wAAAP8AAAD/AAAAWQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAqAAAAP8AAAD/AAAA/wAAAFkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqAAAAP8AAAD/AAAA/wAAAFkAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKgAAAD/AAAA/wAAAP8AAABZAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKgAAAD/
AAAA/wAAAP8AAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AACoAAAA/wAAAP8AAAD/AAAAWQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACoAAAA/wAAAP8AAAD/AAAAWQAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqAAAAP8AAAD/AAAA/wAAAFkAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqAAAAP8A
AAD/AAAA/wAAAFkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AKgAAAD/AAAA/wAAAP8AAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAKgAAAD/AAAA/wAAAP8AAABZAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACoAAAA/wAAAP8AAAD/AAAAWQAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACoAAAA/wAA
AP8AAAD/AAAAWQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
qAAAAP8AAAD/AAAA/wAAAFkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAqAAAAP8AAAD/AAAA/wAAAFkAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKgAAAD/AAAA/wAAAP8AAABZAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKgAAAD/AAAA
/wAAAP8AAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACo
AAAA/wAAAP8AAAD/AAAAWQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAACoAAAA/wAAAP8AAAD/AAAAWQAAAAAAAAAAAAAAAAAAADoAAABX
AAAAVwAAAFcAAABXAAAAVwAAAFcAAABXAAAAqAAAAP8AAAD/AAAA/wAAAFkAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqAAAAP8AAAD/
AAAA/wAAAFkAAAAAAAAAAAAAAAAAAAC0AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAKgA
AAD/AAAA/wAAAP8AAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAKgAAAD/AAAA/wAAAP8AAABZAAAAAAAAAAAAAAAAAAAAqAAAAP8A
AAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACoAAAA/wAAAP8AAAD/AAAAWQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACoAAAA/wAAAP8A
AAD/AAAAWQAAAAAAAAAAAAAAAAAAALMAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAqAAA
AP8AAAD/AAAA/wAAAFkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAqAAAAP8AAAD/AAAA/wAAAFkAAAAAAAAAAAAAAAAAAABtAAAAqAAA
AKUAAACjAAAA4AAAAP8AAAD/AAAA/wAAAKgAAAD/AAAA/wAAAP8AAABZAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKgAAAD/AAAA/wAA
AP8AAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKEAAAD/AAAA/wAAAP8AAACoAAAA
/wAAAP8AAAD/AAAAWQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAACoAAAA/wAAAP8AAAD/AAAAWQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAACmAAAA/wAAAP8AAAD/AAAAqAAAAP8AAAD/AAAA/wAAAFkAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqAAAAP8AAAD/AAAA
/wAAAFkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApgAAAP8AAAD/AAAA/wAAAKgAAAD/
AAAA/wAAAP8AAABZAAAAAAAAAAAAAAAAAAAAOgAAAFcAAABXAAAAVwAAAFcAAABXAAAAVwAAAFcA
AABXAAAAVwAAAFcAAABXAAAAVwAAAFcAAABXAAAAVwAAAFcAAABXAAAAVwAAAFcAAABXAAAAVwAA
AFcAAABXAAAAVwAAAFcAAABXAAAAVwAAAFcAAABXAAAAVwAAAFcAAABXAAAAVwAAAFcAAABXAAAA
HgAAAAAAAAAAAAAAAAAAAKgAAAD/AAAA/wAAAP8AAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAKYAAAD/AAAA/wAAAP8AAACoAAAA/wAAAP8AAAD/AAAAWQAAAAAAAAAAAAAAAAAAALQA
AAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA
/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAF8AAAAAAAAAAAAAAAAAAACoAAAA/wAAAP8AAAD/
AAAAWQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmAAAA/wAAAP8AAAD/AAAAqAAAAP8A
AAD/AAAA/wAAAFkAAAAAAAAAAAAAAAAAAACoAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA
/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAABZ
AAAAAAAAAAAAAAAAAAAAqAAAAP8AAAD/AAAA/wAAAFkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAApgAAAP8AAAD/AAAA/wAAAKgAAAD/AAAA/wAAAP8AAABZAAAAAAAAAAAAAAAAAAAAswAA
AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA
/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/
AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAXwAAAAAAAAAAAAAAAAAAAKgAAAD/AAAA/wAAAP8A
AABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKYAAAD/AAAA/wAAAP8AAACoAAAA/wAA
AP8AAAD/AAAAWQAAAAAAAAAAAAAAAAAAAG0AAACoAAAApQAAAKUAAAClAAAApQAAAKUAAAClAAAA
pQAAAKUAAAClAAAApQAAAKUAAAClAAAApQAAAKUAAAClAAAApQAAAKUAAAClAAAApQAAAKUAAACl
AAAApQAAAKUAAAClAAAApQAAAKUAAAClAAAApQAAAKUAAAClAAAApQAAAKUAAAClAAAApwAAADoA
AAAAAAAAAAAAAAAAAACoAAAA/wAAAP8AAAD/AAAAWQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAACmAAAA/wAAAP8AAAD/AAAAqAAAAP8AAAD/AAAA/wAAAFkAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqAAAAP8AAAD/AAAA/wAA
AFkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApgAAAP8AAAD/AAAA/wAAAKgAAAD/AAAA
/wAAAP8AAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAKgAAAD/AAAA/wAAAP8AAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAKYAAAD/AAAA/wAAAP8AAACoAAAA/wAAAP8AAAD/AAAAWQAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACoAAAA/wAAAP8AAAD/AAAA
WQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmAAAA/wAAAP8AAAD/AAAAqAAAAP8AAAD/
AAAA/wAAAFkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAqAAAAP8AAAD/AAAA/wAAAFkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAApgAAAP8AAAD/AAAA/wAAAKgAAAD/AAAA/wAAAP8AAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKgAAAD/AAAA/wAAAP8AAABZ
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKYAAAD/AAAA/wAAAP8AAACoAAAA/wAAAP8A
AAD/AAAAWQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAACoAAAA/wAAAP8AAAD/AAAAWQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AACmAAAA/wAAAP8AAAD/AAAAqAAAAP8AAAD/AAAA/wAAAE4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAogAAAP8AAAD/AAAA/wAAAFkA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApgAAAP8AAAD/AAAA/wAAAKgAAAD/AAAA/wAA
AP8AAACUAAAAVwAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAA
WgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABa
AAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoA
AABaAAAAVwAAAMcAAAD/AAAA/wAAAP8AAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AKYAAAD/AAAA/wAAAP8AAACoAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA
/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/
AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8A
AAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAWQAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmAAAA/wAAAP8AAAD/AAAAqAAAAP8AAAD/AAAA
/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/
AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8A
AAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAFkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
pgAAAP8AAAD/AAAA/wAAAKgAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/
AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8A
AAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAABZAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKYAAAD/AAAA/wAAAP8AAACoAAAA/wAAAP8AAAD/
AAAAxgAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgA
AACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAA
AKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAA
qAAAAKgAAADhAAAA/wAAAP8AAAD/AAAAWQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACm
AAAA/wAAAP8AAAD/AAAAqAAAAP8AAAD/AAAA/wAAAE0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAogAAAP8AAAD/AAAA/wAAAFkAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApgAAAP8AAAD/AAAA/wAAAKgAAAD/AAAA/wAAAP8A
AABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAKgAAAD/AAAA/wAAAP8AAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKYA
AAD/AAAA/wAAAP8AAACoAAAA/wAAAP8AAAD/AAAATgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACiAAAA/wAAAP8AAAD/AAAAWQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmAAAA/wAAAP8AAAD/AAAAqAAAAP8AAAD/AAAA/wAA
AJQAAABXAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAA
WgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABa
AAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoA
AABXAAAAxwAAAP8AAAD/AAAA/wAAAFkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApgAA
AP8AAAD/AAAA/wAAAKgAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA
/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/
AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8A
AAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAABZAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKYAAAD/AAAA/wAAAP8AAACoAAAA/wAAAP8AAAD/AAAA
/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/
AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8A
AAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
AP8AAAD/AAAA/wAAAP8AAAD/AAAAWQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmAAAA
/wAAAP8AAAD/AAAAtAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/
AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8A
AAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAGAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApgAAAP8AAAD/AAAA/wAAAG4AAACoAAAAqAAAAKgAAACo
AAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgA
AACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAA
AKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAA
qAAAAKgAAACoAAAAqAAAAKgAAAA7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKYAAAD/
AAAA/wAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmAAAA/wAAAP8AAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApgAAAP8A
AAD/AAAA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAD/AAAA/wAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7AAAAXQAAAFoAAABaAAAAWgAAAFoAAABaAAAA
WgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABa
AAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoA
AABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFgAAADGAAAA/wAA
AP8AAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
rwAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/
AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8A
AAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKcAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/
AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8A
AAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA
/wAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACm
AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8A
AAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA
/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApgAAAP8AAAD/AAAA/wAAAMUAAACoAAAAqAAAAKgA
AACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAA
AKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAA
qAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAA4QAAAP8AAAD/
AAAA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKYA
AAD/AAAA/wAAAP8AAABLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAKAAAAD/AAAA/wAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmAAAA/wAAAP8AAAD/AAAAVwAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmAAAA/wAAAP8A
AAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApgAA
AP8AAAD/AAAA/wAAAEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAoAAAAP8AAAD/AAAA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKYAAAD/AAAA/wAAAP8AAACSAAAAVwAAAFoAAABaAAAA
WgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABa
AAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoA
AABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWgAAAFoAAABaAAAAWAAAAMYAAAD/AAAA/wAA
AP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmAAAA
/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/
AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8A
AAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApgAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/
AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8A
AAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA
/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALIAAAD/
AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8A
AAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA
/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABtAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgA
AACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAA
AKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAA
qAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACo
AAAAAAAAB/8AAAAAAAAH/wAAAAAAAAf/AAAAAAAAB/8H//////8H/wf//////wf/B///////B/8H
//////8H/wf//////wf/B///////B/8H//////8H/wf//////wf/B///////B/8H//////8H/wf/
/////wf/B///////BwAH//////8HAAf//////wcAB///////BwAH//////8HAAf//////wfwB///
////B/AH//////8H8AcAAAAABwfwBwAAAAAHB/AHAAAAAAcH8AcAAAAABwfwBwAAAAAHB/AH////
//8H8Af//////wfwB///////B/AH//////8H8Af//////wfwB///////B/AH//////8H8AAAAAAA
AAfwAAAAAAAAB/AAAAAAAAAH8AAAAAAAAAfwAAAAAAAAB/AH//////8H8Af//////wfwB///////
B/AAAAAAAAAH8AAAAAAAAAfwAAAAAAAAB/AAAAAAAAAH8AAAAAAAAAfw//////////D/////////
8P/////////w//AAAAAAAAD/8AAAAAAAAP/wAAAAAAAA//AAAAAAAAD/8AAAAAAAAP/wf//////w
//B///////D/8H//////8P/wAAAAAAAA//AAAAAAAAD/8AAAAAAAAP/wAAAAAAAA//AAAAAAAAAL'))
	#endregion
	$formGroomingStaging.Icon = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$formGroomingStaging.MinimizeBox = $False
	$formGroomingStaging.MinimumSize = New-Object System.Drawing.Size(1075, 898)
	$formGroomingStaging.Name = 'formGroomingStaging'
	$formGroomingStaging.SizeGripStyle = 'Show'
	$formGroomingStaging.StartPosition = 'CenterParent'
	$formGroomingStaging.Text = ' '
	$formGroomingStaging.add_Load($formGroomingStaging_Load)
	#
	# labelChartType
	#
	$labelChartType.Anchor = 'Bottom, Right'
	$labelChartType.AutoSize = $True
	$labelChartType.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '9.75')
	$labelChartType.Location = New-Object System.Drawing.Point(686, 827)
	$labelChartType.Name = 'labelChartType'
	$labelChartType.Size = New-Object System.Drawing.Size(76, 16)
	$labelChartType.TabIndex = 39
	$labelChartType.Text = 'Chart Type:'
	#
	# comboboxChartType
	#
	$comboboxChartType.Anchor = 'Bottom, Right'
	$comboboxChartType.DropDownStyle = 'DropDownList'
	$comboboxChartType.FormattingEnabled = $True
	[void]$comboboxChartType.Items.Add('Area')
	[void]$comboboxChartType.Items.Add('Bar')
	[void]$comboboxChartType.Items.Add('BoxPlot')
	[void]$comboboxChartType.Items.Add('Bubble')
	[void]$comboboxChartType.Items.Add('Candlestick')
	[void]$comboboxChartType.Items.Add('Column')
	[void]$comboboxChartType.Items.Add('Doughnut')
	[void]$comboboxChartType.Items.Add('ErrorBar')
	[void]$comboboxChartType.Items.Add('FastLine')
	[void]$comboboxChartType.Items.Add('FastPoint')
	[void]$comboboxChartType.Items.Add('Funnel')
	[void]$comboboxChartType.Items.Add('Kagi')
	[void]$comboboxChartType.Items.Add('Line')
	[void]$comboboxChartType.Items.Add('Pie')
	[void]$comboboxChartType.Items.Add('Point')
	[void]$comboboxChartType.Items.Add('PointAndFigure')
	[void]$comboboxChartType.Items.Add('Polar')
	[void]$comboboxChartType.Items.Add('Pyramid')
	[void]$comboboxChartType.Items.Add('Radar')
	[void]$comboboxChartType.Items.Add('Range')
	[void]$comboboxChartType.Items.Add('RangeBar')
	[void]$comboboxChartType.Items.Add('RangeColumn')
	[void]$comboboxChartType.Items.Add('Renko')
	[void]$comboboxChartType.Items.Add('Spline')
	[void]$comboboxChartType.Items.Add('SplineArea')
	[void]$comboboxChartType.Items.Add('SplineRange')
	[void]$comboboxChartType.Items.Add('StackedArea')
	[void]$comboboxChartType.Items.Add('StackedArea100')
	[void]$comboboxChartType.Items.Add('StackedBar')
	[void]$comboboxChartType.Items.Add('StackedBar100')
	[void]$comboboxChartType.Items.Add('StackedColumn')
	[void]$comboboxChartType.Items.Add('StackedColumn100')
	[void]$comboboxChartType.Items.Add('StepLine')
	[void]$comboboxChartType.Items.Add('Stock')
	[void]$comboboxChartType.Items.Add('ThreeLineBreak')
	$comboboxChartType.Location = New-Object System.Drawing.Point(768, 826)
	$comboboxChartType.Name = 'comboboxChartType'
	$comboboxChartType.Size = New-Object System.Drawing.Size(121, 21)
	$comboboxChartType.TabIndex = 5
	$comboboxChartType.add_SelectedIndexChanged($comboboxChartType_SelectedIndexChanged)
	#
	# chartCount
	#
	$chartCount.Anchor = 'Top, Bottom, Left, Right'
	$chartCount.BorderlineDashStyle = 'Solid'
	$chartCount.BorderSkin.SkinStyle = 'FrameThin3'
	$System_Windows_Forms_DataVisualization_Charting_ChartArea_1 = New-Object 'System.Windows.Forms.DataVisualization.Charting.ChartArea'
	$System_Windows_Forms_DataVisualization_Charting_ChartArea_1.BackGradientStyle = 'DiagonalLeft'
	$System_Windows_Forms_DataVisualization_Charting_ChartArea_1.Name = 'ChartArea1'
	[void]$chartCount.ChartAreas.Add($System_Windows_Forms_DataVisualization_Charting_ChartArea_1)
	$chartCount.Location = New-Object System.Drawing.Point(12, 359)
	$chartCount.Name = 'chartCount'
	$chartCount.Palette = 'Bright'
	$chartCount.Size = New-Object System.Drawing.Size(1035, 456)
	$chartCount.TabIndex = 4
	$chartCount.TabStop = $False
	$chartCount.Text = 'chart1'
	$System_Windows_Forms_DataVisualization_Charting_Title_2 = New-Object 'System.Windows.Forms.DataVisualization.Charting.Title'
	$System_Windows_Forms_DataVisualization_Charting_Title_2.Alignment = 'BottomCenter'
	$System_Windows_Forms_DataVisualization_Charting_Title_2.DockedToChartArea = 'ChartArea1'
	$System_Windows_Forms_DataVisualization_Charting_Title_2.Docking = 'Bottom'
	$System_Windows_Forms_DataVisualization_Charting_Title_2.Name = 'Count'
	$System_Windows_Forms_DataVisualization_Charting_Title_2.Text = 'Staging Count Graph'
	$System_Windows_Forms_DataVisualization_Charting_Title_2.TextStyle = 'Frame'
	[void]$chartCount.Titles.Add($System_Windows_Forms_DataVisualization_Charting_Title_2)
	#
	# labelRowsReturned
	#
	$labelRowsReturned.Anchor = 'Bottom, Left'
	$labelRowsReturned.AutoSize = $True
	$labelRowsReturned.Location = New-Object System.Drawing.Point(12, 822)
	$labelRowsReturned.Name = 'labelRowsReturned'
	$labelRowsReturned.Size = New-Object System.Drawing.Size(84, 13)
	$labelRowsReturned.TabIndex = 32
	$labelRowsReturned.Text = 'Rows Returned:'
	$labelRowsReturned.Visible = $False
	#
	# labelLastUpdatedGrooming
	#
	$labelLastUpdatedGrooming.Anchor = 'Bottom, Left'
	$labelLastUpdatedGrooming.AutoSize = $True
	$labelLastUpdatedGrooming.Location = New-Object System.Drawing.Point(12, 839)
	$labelLastUpdatedGrooming.Name = 'labelLastUpdatedGrooming'
	$labelLastUpdatedGrooming.Size = New-Object System.Drawing.Size(74, 13)
	$labelLastUpdatedGrooming.TabIndex = 30
	$labelLastUpdatedGrooming.Text = 'Last Updated:'
	$labelLastUpdatedGrooming.Visible = $False
	#
	# progressBarGrooming
	#
	$progressBarGrooming.Anchor = 'Top, Right'
	$progressBarGrooming.Cursor = 'AppStarting'
	$progressBarGrooming.Location = New-Object System.Drawing.Point(939, 3)
	$progressBarGrooming.Name = 'progressBarGrooming'
	$progressBarGrooming.Size = New-Object System.Drawing.Size(108, 10)
	$progressBarGrooming.Style = 'Marquee'
	$progressBarGrooming.TabIndex = 29
	$progressBarGrooming.Visible = $False
	#
	# buttonRefreshGrooming
	#
	$buttonRefreshGrooming.Anchor = 'Top, Right'
	$buttonRefreshGrooming.AutoSize = $True
	$buttonRefreshGrooming.Cursor = 'Hand'
	$buttonRefreshGrooming.Enabled = $False
	$buttonRefreshGrooming.ImageIndex = 1
	$buttonRefreshGrooming.ImageList = $imagelist1
	$buttonRefreshGrooming.Location = New-Object System.Drawing.Point(939, 17)
	$buttonRefreshGrooming.Name = 'buttonRefreshGrooming'
	$buttonRefreshGrooming.Size = New-Object System.Drawing.Size(108, 36)
	$buttonRefreshGrooming.TabIndex = 2
	$buttonRefreshGrooming.Text = '&Refresh Data'
	$buttonRefreshGrooming.TextImageRelation = 'ImageBeforeText'
	$buttonRefreshGrooming.UseVisualStyleBackColor = $True
	$buttonRefreshGrooming.add_Click($buttonRefreshGrooming_Click)
	$buttonRefreshGrooming.add_KeyUp($buttonRefreshGrooming_KeyUp)
	#
	# buttonCloseWindow
	#
	$buttonCloseWindow.Anchor = 'Bottom, Right'
	$buttonCloseWindow.Cursor = 'Hand'
	$buttonCloseWindow.DialogResult = 'OK'
	$buttonCloseWindow.ImageAlign = 'MiddleLeft'
	$buttonCloseWindow.ImageKey = 'exit.png'
	$buttonCloseWindow.ImageList = $imagelist1
	$buttonCloseWindow.Location = New-Object System.Drawing.Point(939, 818)
	$buttonCloseWindow.Name = 'buttonCloseWindow'
	$buttonCloseWindow.Size = New-Object System.Drawing.Size(103, 34)
	$buttonCloseWindow.TabIndex = 6
	$buttonCloseWindow.Text = '&Close Window'
	$buttonCloseWindow.TextAlign = 'MiddleRight'
	$buttonCloseWindow.UseCompatibleTextRendering = $True
	$buttonCloseWindow.UseVisualStyleBackColor = $True
	#
	# labelGroomingStaging
	#
	$labelGroomingStaging.AutoSize = $True
	$labelGroomingStaging.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '20')
	$labelGroomingStaging.Location = New-Object System.Drawing.Point(67, 9)
	$labelGroomingStaging.Name = 'labelGroomingStaging'
	$labelGroomingStaging.Size = New-Object System.Drawing.Size(231, 31)
	$labelGroomingStaging.TabIndex = 9
	$labelGroomingStaging.Text = 'Grooming Staging'
	$labelGroomingStaging.TextAlign = 'MiddleLeft'
	#
	# picturebox1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAJwIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAQAAAAEAIBgAAAKppcd4AAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAAA6+AAAOvgHq
QrHAAAAByUlEQVR4Xu2ayU3EQBBFHQmBQAgs4sYiIUgAgkEEwCKWGxJMCCxpQCTw64BUKrfcKrqN
+zf1pXexW6XSG890eezhFzkFDx3hzhP46gh37kCqECvuhACgC5yDPXBIwD54A7p/d6yALcCUS6D7
d8cKkE+fKbZ/d2yBTcCU6lfAK0jtr63yCXT/7lgB7LhzD1KFWHHnEaQKseLOBjgCqX22darMAewp
3gXYUzwHsGck4Ayk9ktW5DdqKiMBK3OAnRMwlZEAsaYPsHMAphICgF4/EnABWO7vpc93oPsvFrAD
mHINdP/FAnIFWou3/6yAbcCU6leAzMpyjAV7f18sgJ0QAKYSAoBePxIQcwBgSswBwNN/CAB6fQgI
AeZACABMmV3AzztBtw0gT6XWgc7sAp6BPr80x0BndgH2/NLk+qsuoLV/jf/8CpDvnMzcrbAGdGYX
0HpCAPD0/+8FXAG9vnsBeo65AR9Ar+9eQG6O6V6APW/pXkBujuleQG6O6V5ANiEAFBVYOCEAFPUf
AkBRgYUTAkBR/yEAFBVYONUFyBvVTKkuYBcwRW5xdf/FAl6APHK2/8m3iPRp7++LBbATAoArvb0t
bp8bTGQYvgHh3VlFL3l54wAAAABJRU5ErkJgggs='))
	#endregion
	$picturebox1.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$picturebox1.Location = New-Object System.Drawing.Point(-16, 3)
	$picturebox1.Name = 'picturebox1'
	$picturebox1.Size = New-Object System.Drawing.Size(97, 50)
	$picturebox1.SizeMode = 'Zoom'
	$picturebox1.TabIndex = 20
	$picturebox1.TabStop = $False
	#
	# panel1
	#
	$panel1.Controls.Add($groomingStagingGridView)
	$panel1.Controls.Add($checkboxAutoRefresh)
	$panel1.Controls.Add($autoRefreshGif)
	$panel1.Controls.Add($comboboxAutoRefresh)
	$panel1.Dock = 'Top'
	$panel1.Location = New-Object System.Drawing.Point(0, 0)
	$panel1.Name = 'panel1'
	$panel1.Size = New-Object System.Drawing.Size(1059, 353)
	$panel1.TabIndex = 37
	#
	# groomingStagingGridView
	#
	$groomingStagingGridView.AllowUserToAddRows = $False
	$groomingStagingGridView.AllowUserToDeleteRows = $False
	$groomingStagingGridView.AllowUserToOrderColumns = $True
	$groomingStagingGridView.AutoSizeColumnsMode = 'Fill'
	$groomingStagingGridView.ColumnHeadersHeightSizeMode = 'AutoSize'
	$groomingStagingGridView.Dock = 'Bottom'
	$groomingStagingGridView.EditMode = 'EditProgrammatically'
	$groomingStagingGridView.Location = New-Object System.Drawing.Point(0, 60)
	$groomingStagingGridView.Name = 'groomingStagingGridView'
	$groomingStagingGridView.ReadOnly = $True
	$groomingStagingGridView.RowHeadersWidth = 4
	$groomingStagingGridView.SelectionMode = 'FullRowSelect'
	$groomingStagingGridView.ShowEditingIcon = $False
	$groomingStagingGridView.Size = New-Object System.Drawing.Size(1059, 293)
	$groomingStagingGridView.TabIndex = 3
	$groomingStagingGridView.add_KeyUp($groomingStagingGridView_KeyUp)
	#
	# checkboxAutoRefresh
	#
	$checkboxAutoRefresh.Anchor = 'Top, Right'
	$checkboxAutoRefresh.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '9')
	$checkboxAutoRefresh.Location = New-Object System.Drawing.Point(833, 30)
	$checkboxAutoRefresh.Name = 'checkboxAutoRefresh'
	$checkboxAutoRefresh.Size = New-Object System.Drawing.Size(100, 24)
	$checkboxAutoRefresh.TabIndex = 0
	$checkboxAutoRefresh.Text = 'Auto Refresh'
	$checkboxAutoRefresh.TextAlign = 'MiddleRight'
	$checkboxAutoRefresh.UseVisualStyleBackColor = $True
	$checkboxAutoRefresh.add_CheckedChanged($checkboxAutoRefresh_CheckedChanged)
	#
	# autoRefreshGif
	#
	$autoRefreshGif.Anchor = 'Top, Right'
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAA4sAAAJHSUY4OWFAAEAA
5gAABAIEhIKEREJExMLEJCIkpKKkZGJk5OLkFBIUlJKUVFJU1NLUNDI0tLK0dHJ09PL0DAoMjIqM
TEpMzMrMLCosrKqsbGps7OrsHBocnJqcXFpc3NrcPDo8vLq8fHp8/Pr8BAYEhIaEREZExMbEJCYk
pKakZGZk5ObkFBYUlJaUVFZU1NbUNDY0tLa0dHZ09Pb0DA4MjI6MTE5MzM7MLC4srK6sbG5s7O7s
HB4cnJ6cXF5c3N7cPD48vL68fH58/P78////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIf8LTkVUU0NBUEUy
LjADAQAAACH5BAkHAEAALAAAAABAAEAAAAf+gECCg4SFhoeIiYqLjI2Oj5CRjyc7hgeSmI8fDTIA
HD+EGxAsBS+Zp4YXHhgArQAZgx8irig+l6ioI64AIAAIF4I5u604uKgPrSwnCa0aPSMoABAzIa0K
xqgUADRAHwzDADFAE63i2Jk6vKbkuwwfQDGtI+eOpoTVAPNACRElKT4LBKng9Y4eIxUYFMQYMQBC
qwaKWAEw8eNBhwASWhgsdABcqxCLWiBoRWCXhI2EPLTq5cpHoRsTVhQUtGIkuFsbX0Qj8GJEDBU2
QAlqwcEVBBM4ewAgYSJDilYBUAIRBkDBzEE/XHhEoA+IPSAPHOIQalBlshWFmPHSkSICi1b+CE4U
6lBSntQa0XhFKHgDBgAYE2JpBWBg0AEFrnDUkCrowkBeQgu0gkXox1sI9ny4cvGAMaFZGAbZaHXD
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
xz76cRCBAAA7Cw=='))
	#endregion
	$autoRefreshGif.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$autoRefreshGif.Location = New-Object System.Drawing.Point(782, 6)
	$autoRefreshGif.Name = 'autoRefreshGif'
	$autoRefreshGif.Size = New-Object System.Drawing.Size(46, 45)
	$autoRefreshGif.SizeMode = 'Zoom'
	$autoRefreshGif.TabIndex = 35
	$autoRefreshGif.TabStop = $False
	$autoRefreshGif.Visible = $False
	#
	# comboboxAutoRefresh
	#
	$comboboxAutoRefresh.Anchor = 'Top, Right'
	$comboboxAutoRefresh.DropDownStyle = 'DropDownList'
	$comboboxAutoRefresh.Enabled = $False
	$comboboxAutoRefresh.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '9')
	$comboboxAutoRefresh.FormattingEnabled = $True
	[void]$comboboxAutoRefresh.Items.Add('10 seconds')
	[void]$comboboxAutoRefresh.Items.Add('30 seconds')
	[void]$comboboxAutoRefresh.Items.Add('1 minute')
	[void]$comboboxAutoRefresh.Items.Add('5 minutes')
	[void]$comboboxAutoRefresh.Items.Add('10 minutes')
	[void]$comboboxAutoRefresh.Items.Add('30 minutes')
	$comboboxAutoRefresh.Location = New-Object System.Drawing.Point(833, 6)
	$comboboxAutoRefresh.MaxDropDownItems = 10
	$comboboxAutoRefresh.Name = 'comboboxAutoRefresh'
	$comboboxAutoRefresh.Size = New-Object System.Drawing.Size(99, 23)
	$comboboxAutoRefresh.TabIndex = 1
	$comboboxAutoRefresh.add_SelectedIndexChanged($comboboxAutoRefresh_SelectedIndexChanged)
	#
	# imagelist1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAAAKCgAAAk1TRnQBSQFMAgEBAwEAAWgBAAFoAQABEAEAARABAAT/AQkBAAj/AUIBTQE2
AQQGAAE2AQQCAAEoAwABQAMAARADAAEBAQABCAYAAQQYAAGAAgABgAMAAoABAAGAAwABgAEAAYAB
AAKAAgADwAEAAcAB3AHAAQAB8AHKAaYBAAEzBQABMwEAATMBAAEzAQACMwIAAxYBAAMcAQADIgEA
AykBAANVAQADTQEAA0IBAAM5AQABgAF8Af8BAAJQAf8BAAGTAQAB1gEAAf8B7AHMAQABxgHWAe8B
AAHWAucBAAGQAakBrQIAAf8BMwMAAWYDAAGZAwABzAIAATMDAAIzAgABMwFmAgABMwGZAgABMwHM
AgABMwH/AgABZgMAAWYBMwIAAmYCAAFmAZkCAAFmAcwCAAFmAf8CAAGZAwABmQEzAgABmQFmAgAC
mQIAAZkBzAIAAZkB/wIAAcwDAAHMATMCAAHMAWYCAAHMAZkCAALMAgABzAH/AgAB/wFmAgAB/wGZ
AgAB/wHMAQABMwH/AgAB/wEAATMBAAEzAQABZgEAATMBAAGZAQABMwEAAcwBAAEzAQAB/wEAAf8B
MwIAAzMBAAIzAWYBAAIzAZkBAAIzAcwBAAIzAf8BAAEzAWYCAAEzAWYBMwEAATMCZgEAATMBZgGZ
AQABMwFmAcwBAAEzAWYB/wEAATMBmQIAATMBmQEzAQABMwGZAWYBAAEzApkBAAEzAZkBzAEAATMB
mQH/AQABMwHMAgABMwHMATMBAAEzAcwBZgEAATMBzAGZAQABMwLMAQABMwHMAf8BAAEzAf8BMwEA
ATMB/wFmAQABMwH/AZkBAAEzAf8BzAEAATMC/wEAAWYDAAFmAQABMwEAAWYBAAFmAQABZgEAAZkB
AAFmAQABzAEAAWYBAAH/AQABZgEzAgABZgIzAQABZgEzAWYBAAFmATMBmQEAAWYBMwHMAQABZgEz
Af8BAAJmAgACZgEzAQADZgEAAmYBmQEAAmYBzAEAAWYBmQIAAWYBmQEzAQABZgGZAWYBAAFmApkB
AAFmAZkBzAEAAWYBmQH/AQABZgHMAgABZgHMATMBAAFmAcwBmQEAAWYCzAEAAWYBzAH/AQABZgH/
AgABZgH/ATMBAAFmAf8BmQEAAWYB/wHMAQABzAEAAf8BAAH/AQABzAEAApkCAAGZATMBmQEAAZkB
AAGZAQABmQEAAcwBAAGZAwABmQIzAQABmQEAAWYBAAGZATMBzAEAAZkBAAH/AQABmQFmAgABmQFm
ATMBAAGZATMBZgEAAZkBZgGZAQABmQFmAcwBAAGZATMB/wEAApkBMwEAApkBZgEAA5kBAAKZAcwB
AAKZAf8BAAGZAcwCAAGZAcwBMwEAAWYBzAFmAQABmQHMAZkBAAGZAswBAAGZAcwB/wEAAZkB/wIA
AZkB/wEzAQABmQHMAWYBAAGZAf8BmQEAAZkB/wHMAQABmQL/AQABzAMAAZkBAAEzAQABzAEAAWYB
AAHMAQABmQEAAcwBAAHMAQABmQEzAgABzAIzAQABzAEzAWYBAAHMATMBmQEAAcwBMwHMAQABzAEz
Af8BAAHMAWYCAAHMAWYBMwEAAZkCZgEAAcwBZgGZAQABzAFmAcwBAAGZAWYB/wEAAcwBmQIAAcwB
mQEzAQABzAGZAWYBAAHMApkBAAHMAZkBzAEAAcwBmQH/AQACzAIAAswBMwEAAswBZgEAAswBmQEA
A8wBAALMAf8BAAHMAf8CAAHMAf8BMwEAAZkB/wFmAQABzAH/AZkBAAHMAf8BzAEAAcwC/wEAAcwB
AAEzAQAB/wEAAWYBAAH/AQABmQEAAcwBMwIAAf8CMwEAAf8BMwFmAQAB/wEzAZkBAAH/ATMBzAEA
Af8BMwH/AQAB/wFmAgAB/wFmATMBAAHMAmYBAAH/AWYBmQEAAf8BZgHMAQABzAFmAf8BAAH/AZkC
AAH/AZkBMwEAAf8BmQFmAQAB/wKZAQAB/wGZAcwBAAH/AZkB/wEAAf8BzAIAAf8BzAEzAQAB/wHM
AWYBAAH/AcwBmQEAAf8CzAEAAf8BzAH/AQAC/wEzAQABzAH/AWYBAAL/AZkBAAL/AcwBAAJmAf8B
AAFmAf8BZgEAAWYC/wEAAf8CZgEAAf8BZgH/AQAC/wFmAQABIQEAAaUBAANfAQADdwEAA4YBAAOW
AQADywEAA7IBAAPXAQAD3QEAA+MBAAPqAQAD8QEAA/gBAAHwAfsB/wEAAaQCoAEAA4ADAAH/AgAB
/wMAAv8BAAH/AwAB/wEAAf8BAAL/AgAD/wIAAf8BkwpGAZMB/wUAAfQBuwG6ApYBugG7AfQIAAH0
AgAB8QEHB+wQAAH/AW8MRgFvAf8CAAH/AbsIlgG7Af8iAAEaDkYBGgEAAf8BuwOWAboCuwG6A5YB
uwH/BAABEwQAAfMH8BAAAQcORgEHAQABuwKWAboB8wT0AfMBugKWAbsCAAHyBgABBwfsEAABkw5G
AZMB9AKWAboC9AG7AroBuwL0AboClgH0IAABkwNGAZMB/wGTAkYBkwH/AZMDRgGTAbsClgHzAfQB
ugSWAboB9AHzApYBuwEAAREGAAHzB/AQAAGTA0YBbwL/ApMC/wFvA0YBkwG6AZYBugH0AbsGlgG7
AfQBugGWAboIAAEHB+wQAAGTBEYBbwT/AW8ERgGTApYBuwH0AboGlgG6AfQBuwKWBwAB8wH0BgAB
8xAAAZMFRgEHAv8BkwVGAZMClgG7AfQBugaWAboB9AG7ApYHAAHsAfAGAAEUEAABkwRGAZME/wGT
BEYBkwG6AZYBugH0AbsGlgG7AfQBugGWAboB8wPwAfQCAAHsAfAXAAGTA0YBbwL/Am8C/wFvA0YB
kwG7ApYB8wH0AboFlgG6AfEClgG7AewBAALsAfMCAAHsAfAXAAGTA0YBkwH/AW8CRgFvAf8BkwNG
AZMB9AKWAboC9AK7AfIBugWWAfQB7AESBQABBwHzBgAB8xAAAQcORgEHAQABuwKWAboB8wT0AQkD
lgG7AQAB7AHwAQABkgkAARISAAEaDkYBGgEAAf8BuwOWAboBCAH0AQgBuQKWAbsB/wEAAQcB8x4A
Af8BbwxGAW8B/wIAAf8BuwOWAroDlgG7Af8GAAEHAgABkgHwAe0CAAHxFAAB/wGTCkYBkwH/BQAB
9AG7AboClgG6AbsB9AsAAQcB7AG8FgABQgFNAT4HAAE+AwABKAMAAUADAAEQAwABAQEAAQEFAAGA
FwAD/wEAAYABAQHwAQ8B8AUAAcABAwHnAf8EAAGAAQEBzwUAAYABAQGfBwABvwH/BgABvwcAAf8H
AAH+AX4GAAH+AX4GAAEGAX4GAAEGAX4GAAEeAXwEAAGAAQEBDwH5BAABgAEBAScB8wQAAcABAwHw
AQcCAAGAAQEB8AEPAf4BPwIACw=='))
	#endregion
	$imagelist1.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelist1.TransparentColor = [System.Drawing.Color]::Transparent 
	$imagelist1.Images.SetKeyName(0,'exit.png')
	$imagelist1.Images.SetKeyName(1,'refresh.png')
	$imagelist1.Images.SetKeyName(2,'full-history.png')
	#
	# timerAutoRefresh
	#
	$timerAutoRefresh.Interval = 1000
	$timerAutoRefresh.add_Tick($timerAutoRefresh_Tick)
	$panel1.ResumeLayout()
	$chartCount.EndInit()
	$formGroomingStaging.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formGroomingStaging.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formGroomingStaging.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formGroomingStaging.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formGroomingStaging.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formGroomingStaging.ShowDialog()

}
#endregion Source: GroomingStaging.psf

#Start the application
Main ($CommandLine)
